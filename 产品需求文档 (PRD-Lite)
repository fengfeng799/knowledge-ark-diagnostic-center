### **`PRD-Lite.md`: “知识方舟诊断中心” V1.0 - 核心功能需求**

**文档目的:** 本文档旨在为“知识方舟诊断中心”的开源贡献者，提供一份关于V1.0版本核心功能、设计原则和技术架构的清晰概览，以确保所有贡献都能与项目的主线愿景保持一致。

---

#### **1. 核心设计原则 (Core Design Principles)**

1.  **本地优先，零外部依赖 (Local-First & Zero External Dependency):**
    *   所有诊断和数据处理，必须在用户本地设备上完成。
    *   插件在V1.0阶段，**禁止**任何形式的网络请求或对外部API的调用。

2.  **性能至上 (Performance-First):**
    *   所有核心诊断逻辑，必须**优先且充分地利用**Obsidian内置的`app.metadataCache` API进行，以最小化对文件系统的直接I/O操作，确保大型知识库的流畅体验。
    *   耗时操作（如全面诊断）应考虑使用`Web Workers`在后台执行，避免UI卡顿。

3.  **用户可控与可配置 (User Controllable & Configurable):**
    *   插件的所有核心行为和阈值，都必须在设置页面提供相应的选项，供用户进行自定义。我们提供“最佳实践”作为默认值，但将最终的“控制权”交给用户。

4.  **遵循“活水笔记法” (Aligned with "Living Water" Philosophy):**
    *   本插件的所有功能，都是为了帮助用户实践我们的核心方法论——**《活水笔记法》**。所有功能的设计与迭代，都应以此为最终的评判标准。

---

#### **2. 技术架构概览 (Technical Architecture Overview)**

*   **语言与环境:** `TypeScript`, `Obsidian Plugin API`
*   **核心UI框架:** `ItemView` API (用于构建侧边栏主视图), `PluginSettingTab` API (用于设置页)。
*   **核心数据接口:** `app.vault` API (文件操作), `app.metadataCache` API (元数据与链接分析)。
*   **设计模式:** 采用“**规则注册中心 (RuleRegistry)**”模式，将诊断规则的定义与执行进行解耦，以实现高度的模块化和可扩展性。

---

#### **3. 核心功能模块需求 (Core Feature Requirements)**

##### **3.1. 模块：诊断仪表盘 (UI)**

*   **用户故事:** 作为一个用户，我希望能在一个集成的界面，一键触发诊断，并直观地看到我知识库的整体健康状况和所有具体问题。
*   **验收标准:**
    *   [ ] 插件在右侧边栏提供一个名为“知识方舟诊断中心”的`ItemView`。
    *   [ ] 界面包含“开始全面诊断/增量诊断”按钮。
    *   [ ] 界面能显示“健康度总分”、“知识原子统计”、“连接密度”三个核心指标。
    *   [ ] 诊断出的每一类问题，都以一个独立的、可折叠/展开的“**诊断卡片 (Diagnostic Card)**”组件进行展示。
    *   [ ] 展开的“诊断卡片”能以列表形式，清晰地展示所有具体问题的**文件名、上下文预览、和[跳转]、[忽略]操作按钮**。

##### **3.2. 模块：诊断规则引擎 (Logic)**

*   **用户故事:** 作为一个用户，我希望插件能根据一套专业的标准，自动找出我知识库中所有不符合“活水笔记法”最佳实践的笔记和链接。
*   **验收标准 (V1.0 必须实现的规则):**
    *   [ ] **规则1 (元数据完整性):** 能根据用户在设置中定义的模板，检查YAML区的存在性和必填字段。
    *   [ ] **规则2 (笔记原子化):** 能检查笔记的字数是否超限，以及是否存在多个一级标题。
    *   [ ] **规则3 (裸链接):** 能找出所有缺少足够上下文的内部链接。
    *   [ ] **规则4 (知识图谱连接性):** 能识别出“孤岛节点”和“终点节点”。
    *   [ ] **规则5 (关系谓语一致性):** 能统计并提示用户统一规范`key:: [[Link]]`格式的“谓语”。

##### **3.3. 模块：训练数据导出器 (Export)**

*   **用户故事:** 作为一个用户，我希望能轻松地将我精心整理的、高质量的笔记，一键导出为可供未来个人AI模型微调使用的标准训练数据集。
*   **验收标准:**
    *   [ ] 插件提供一个“导出训练数据”的功能。
    *   [ ] 导出时，能**自动过滤**掉所有被诊断为“不健康”且未被忽略的笔记。
    *   [ ] 用户可以通过一个简单的筛选器（类似Dataview查询），来选择要导出的笔记范围。
    *   [ ] 用户可以在设置中，自定义导出`.jsonl`文件的**格式模板**，以适配不同的训练需求。

---

#### **4. 未来版本（V2.0+）展望 (Future Vision)**

**请注意：以下功能不属于V1.0的开发范围，仅作为项目的长远方向参考。我们欢迎任何关于这些未来功能的、前瞻性的讨论和设计建议。**

*   **模块B: 个人模型熔炉:** 在插件内实现本地化的LoRA微调功能。
*   **本地推理集成:** 将微调好的个人模型，无缝集成到Obsidian的写作工作流中。
*   **智能诊断与修复:** 引入轻量化AI模型，从“发现问题”进化到“智能建议修复方案”。

---

**本文档旨在为所有贡献者提供一个清晰、共享的“上下文”。我们相信，对项目目标的深刻理解，是做出高质量贡献的根本前提。期待与您共建！**
