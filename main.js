/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  RuleRegistry: () => RuleRegistry,
  default: () => KnowledgeArkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var KnowledgeArkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u8BED\u8A00 / Language").addDropdown((dropdown) => dropdown.addOption("zh", "\u4E2D\u6587").addOption("en", "English").setValue(this.plugin.settings.language || "zh").onChange(async (value) => {
      this.plugin.settings.language = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    const isEnglish = this.plugin.settings.language === "en";
    const titleText = isEnglish ? "Knowledge Ark Diagnostic Center Settings" : "\u77E5\u8BC6\u65B9\u821F\u8BCA\u65AD\u4E2D\u5FC3\u8BBE\u7F6E";
    containerEl.createEl("h3", { text: titleText });
    const getLocalizedText = (zhText, enText) => {
      return isEnglish ? enText : zhText;
    };
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u5FC5\u586B\u5143\u6570\u636E\u5B57\u6BB5", "Required Metadata Fields")).setDesc(getLocalizedText("\u8BF7\u8F93\u5165\u5FC5\u586B\u7684\u5143\u6570\u636E\u5B57\u6BB5\uFF0C\u7528\u9017\u53F7\u5206\u9694", "Please enter the required metadata fields, separated by commas")).addText((text) => text.setPlaceholder("type,status,domain").setValue(this.plugin.settings.requiredMetadataFields.join(",")).onChange(async (value) => {
      this.plugin.settings.requiredMetadataFields = value.split(",").map((s) => s.trim()).filter((s) => s.length > 0);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u6700\u5927\u7B14\u8BB0\u957F\u5EA6", "Maximum Note Length")).setDesc(getLocalizedText("\u8D85\u8FC7\u6B64\u957F\u5EA6\u7684\u7B14\u8BB0\u5C06\u88AB\u6807\u8BB0\u4E3A\u95EE\u9898", "Notes exceeding this length will be flagged as issues")).addText((text) => text.setPlaceholder("1500").setValue(this.plugin.settings.maxNoteLength.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num)) {
        this.plugin.settings.maxNoteLength = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u6700\u5C0F\u4E0A\u4E0B\u6587\u957F\u5EA6", "Minimum Context Length")).setDesc(getLocalizedText("\u68C0\u67E5\u88F8\u94FE\u63A5\u65F6\u7684\u4E0A\u4E0B\u6587\u957F\u5EA6", "Context length when checking naked links")).addText((text) => text.setPlaceholder("30").setValue(this.plugin.settings.minContextLength.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num)) {
        this.plugin.settings.minContextLength = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u6392\u9664\u6587\u4EF6\u5939", "Excluded Folders")).setDesc(getLocalizedText("\u8BF7\u8F93\u5165\u8981\u6392\u9664\u7684\u6587\u4EF6\u5939\u8DEF\u5F84\uFF0C\u7528\u9017\u53F7\u5206\u9694", "Please enter the folder paths to exclude, separated by commas")).addText((text) => text.setPlaceholder("templates,archive").setValue(this.plugin.settings.excludedFolders.join(",")).onChange(async (value) => {
      this.plugin.settings.excludedFolders = value.split(",").map((s) => s.trim()).filter((s) => s.length > 0);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u6392\u9664\u6807\u7B7E", "Excluded Tags")).setDesc(getLocalizedText("\u8BF7\u8F93\u5165\u8981\u6392\u9664\u7684\u6807\u7B7E(tags)\uFF0C\u7528\u9017\u53F7\u5206\u9694", "Please enter the tags to exclude, separated by commas")).addText((text) => text.setPlaceholder("draft,template").setValue(this.plugin.settings.excludedTags.join(",")).onChange(async (value) => {
      this.plugin.settings.excludedTags = value.split(",").map((s) => s.trim()).filter((s) => s.length > 0);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u77E5\u8BC6\u539F\u5B50\u7C7B\u578B", "Knowledge Atom Types")).setDesc(getLocalizedText("\u8BF7\u8F93\u5165\u88AB\u89C6\u4E3A\u77E5\u8BC6\u539F\u5B50\u7684\u7B14\u8BB0\u7C7B\u578B(type)\uFF0C\u7528\u9017\u53F7\u5206\u9694", "Please enter the note types (type) considered as knowledge atoms, separated by commas")).addText((text) => text.setPlaceholder("atom,concept,entity").setValue(this.plugin.settings.knowledgeAtomTypes.join(",")).onChange(async (value) => {
      this.plugin.settings.knowledgeAtomTypes = value.split(",").map((s) => s.trim()).filter((s) => s.length > 0);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u8C13\u8BED\u4F7F\u7528\u9891\u7387\u9608\u503C", "Predicate Usage Threshold")).setDesc(getLocalizedText("\u4F4E\u4E8E\u6B64\u4F7F\u7528\u6B21\u6570\u7684\u8C13\u8BED\u5C06\u88AB\u6807\u8BB0\u4E3A\u4F7F\u7528\u9891\u7387\u8FC7\u4F4E\uFF08\u8BBE\u4E3A0\u53EF\u7981\u7528\u6B64\u68C0\u67E5\uFF09", "Predicates with usage count below this threshold will be flagged as low usage (set to 0 to disable this check)")).addText((text) => text.setPlaceholder("1").setValue(this.plugin.settings.predicateUsageThreshold.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num) && num >= 0) {
        this.plugin.settings.predicateUsageThreshold = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u5BFC\u51FA\u6A21\u677F", "Export Template")).setDesc(getLocalizedText("\u8BBE\u7F6E\u5BFC\u51FAJSONL\u7684\u6A21\u677F", "Set the template for exporting JSONL")).addTextArea((text) => {
      text.setPlaceholder('{"content": "{{content}}", "tags": "{{tags}}", "type": "{{type}}"}').setValue(this.plugin.settings.exportTemplate).onChange(async (value) => {
        this.plugin.settings.exportTemplate = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.rows = 4;
      text.inputEl.cols = 50;
    });
    new import_obsidian.Setting(containerEl).setName(getLocalizedText("\u767D\u540D\u5355\u7BA1\u7406", "Whitelist Management")).setDesc(getLocalizedText("\u4EE5\u4E0B\u95EE\u9898\u5DF2\u88AB\u6DFB\u52A0\u5230\u767D\u540D\u5355\u4E2D\uFF0C\u4E0D\u4F1A\u5728\u8BCA\u65AD\u4E2D\u663E\u793A\u3002", "The following issues have been added to the whitelist and will not be displayed in the diagnosis."));
    const ignoredIssuesContainer = containerEl.createEl("div", { cls: "knowledge-ark-ignored-issues" });
    const renderIgnoredIssues = () => {
      ignoredIssuesContainer.empty();
      if (this.plugin.settings.ignoredIssues.length === 0) {
        ignoredIssuesContainer.createEl("p", { text: getLocalizedText("\u6682\u65E0\u88AB\u5FFD\u7565\u7684\u95EE\u9898\u3002", "No ignored issues.") });
        return;
      }
      const removeAllButton = ignoredIssuesContainer.createEl("button", {
        text: getLocalizedText("\u5168\u90E8\u79FB\u9664", "Remove All"),
        cls: "knowledge-ark-ignored-issue-button"
      });
      removeAllButton.style.marginBottom = "10px";
      removeAllButton.onClickEvent(async () => {
        this.plugin.settings.ignoredIssues = [];
        await this.plugin.saveSettings();
        renderIgnoredIssues();
      });
      const listEl = ignoredIssuesContainer.createEl("ul");
      this.plugin.settings.ignoredIssues.forEach((issueId, index) => {
        const itemEl = listEl.createEl("li", { cls: "knowledge-ark-ignored-issue-item" });
        const issueTextEl = itemEl.createEl("span", {
          text: issueId,
          cls: "knowledge-ark-ignored-issue-text"
        });
        const unignoreButtonEl = itemEl.createEl("button", {
          text: getLocalizedText("\u79FB\u9664", "Remove"),
          cls: "knowledge-ark-ignored-issue-button"
        });
        unignoreButtonEl.onClickEvent(async () => {
          this.plugin.settings.ignoredIssues.splice(index, 1);
          await this.plugin.saveSettings();
          renderIgnoredIssues();
        });
      });
    };
    renderIgnoredIssues();
    const weightsTitle = getLocalizedText("\u8BCA\u65AD\u89C4\u5219\u6743\u91CD\u914D\u7F6E", "Diagnostic Rule Weights Configuration");
    containerEl.createEl("h3", { text: weightsTitle });
    const weightsDescription = getLocalizedText(
      "\u4E3A\u6BCF\u4E2A\u8BCA\u65AD\u89C4\u5219\u8BBE\u7F6E\u5355\u9879\u6263\u5206\u503C\u3002\u6263\u5206\u503C\u8D8A\u9AD8\uFF0C\u8BE5\u95EE\u9898\u5BF9\u5065\u5EB7\u5EA6\u603B\u5206\u7684\u5F71\u54CD\u8D8A\u5927\u3002",
      "Set the penalty points for each diagnostic rule. Higher penalty points mean the issue will have a greater impact on the health score."
    );
    containerEl.createEl("p", { text: weightsDescription });
    const ruleWeightsConfig = [
      { id: "metadata-integrity", name: getLocalizedText("\u5143\u6570\u636E\u5B8C\u6574\u6027\u68C0\u67E5", "Metadata Integrity Check"), default: 5 },
      { id: "naked-links", name: getLocalizedText("\u88F8\u94FE\u63A5\u68C0\u67E5", "Naked Links Check"), default: 2 },
      { id: "graph-connectivity", name: getLocalizedText("\u77E5\u8BC6\u56FE\u8C31\u8FDE\u63A5\u6027\u68C0\u67E5", "Knowledge Graph Connectivity Check"), default: 1 },
      { id: "note-atomicity", name: getLocalizedText("\u7B14\u8BB0\u539F\u5B50\u5316\u7A0B\u5EA6\u68C0\u67E5", "Note Atomicity Check"), default: 0.8 },
      { id: "predicate-consistency", name: getLocalizedText("\u5173\u7CFB\u8C13\u8BED\u4E00\u81F4\u6027\u68C0\u67E5", "Predicate Consistency Check"), default: 0.5 },
      { id: "word-count-exceed", name: getLocalizedText("\u7B14\u8BB0\u957F\u5EA6\u8D85\u9650", "Word Count Exceed"), default: 0.1 }
    ];
    for (const rule of ruleWeightsConfig) {
      const currentValue = this.plugin.settings.ruleWeights[rule.id] !== void 0 ? this.plugin.settings.ruleWeights[rule.id] : rule.default;
      new import_obsidian.Setting(containerEl).setName(rule.name).addText((text) => text.setPlaceholder(rule.default.toString()).setValue(currentValue.toString()).onChange(async (value) => {
        const num = parseFloat(value);
        if (!isNaN(num)) {
          this.plugin.settings.ruleWeights[rule.id] = num;
          await this.plugin.saveSettings();
        }
      }));
    }
  }
};

// src/view.ts
var import_obsidian3 = require("obsidian");

// src/export.ts
var import_obsidian2 = require("obsidian");
var DataExporter = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
  }
  async exportHealthyNotes(issues) {
    var _a, _b;
    const files = this.app.vault.getMarkdownFiles();
    let healthyFiles = files.filter(
      (file) => !issues.some((issue) => issue.filePath === file.path)
    );
    healthyFiles = healthyFiles.filter(
      (file) => !this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder + "/") || file.path === folder)
    );
    healthyFiles = healthyFiles.filter((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        return !normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag));
      }
      return true;
    });
    console.log("Excluded folders:", this.plugin.settings.excludedFolders);
    console.log("Excluded tags:", this.plugin.settings.excludedTags);
    const problematicFiles = files.filter((file) => {
      const hasIssue = issues.some((issue) => issue.filePath === file.path);
      if (!hasIssue)
        return false;
      const isExcludedByFolder = this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder + "/") || file.path === folder);
      if (isExcludedByFolder)
        return false;
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const isExcludedByTag = normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag));
        if (isExcludedByTag)
          return false;
      }
      return true;
    });
    new import_obsidian2.Notice(`\u5BFC\u51FA ${healthyFiles.length} \u4E2A\u5065\u5EB7\u7B14\u8BB0\uFF0C${problematicFiles.length} \u4E2A\u7B14\u8BB0\u6709\u95EE\u9898\u3002`);
    const jsonlLines = [];
    for (const file of healthyFiles) {
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder + "/") || file.path === folder)) {
        continue;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
          continue;
        }
      }
      const content = await this.app.vault.read(file);
      const jsonObject = {};
      const template = this.plugin.settings.exportTemplate.replace("{{content}}", JSON.stringify(content)).replace("{{tags}}", JSON.stringify(((_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.map((tag) => tag.tag).join(", ")) || "")).replace("{{type}}", JSON.stringify(((_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b.type) || "")).replace("{{fileName}}", JSON.stringify(file.name)).replace("{{filePath}}", JSON.stringify(file.path)).replace("{{frontmatter}}", JSON.stringify((cache == null ? void 0 : cache.frontmatter) || {})).replace("{{links}}", JSON.stringify((cache == null ? void 0 : cache.links) || [])).replace("{{headings}}", JSON.stringify((cache == null ? void 0 : cache.headings) || []));
      try {
        const parsedTemplate = JSON.parse(template);
        jsonlLines.push(JSON.stringify(parsedTemplate));
        console.log(`Successfully parsed template for file ${file.path}`);
      } catch (error) {
        console.error(`Error parsing template for file ${file.path}:`, error);
        console.error(`Template content: ${template}`);
      }
    }
    const jsonlContent = jsonlLines.join("\n");
    const blob = new Blob([jsonlContent], { type: "application/jsonl" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "knowledge-ark-export.jsonl";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
};

// src/view.ts
var addHealthScoreStyles = () => {
  const styleId = "knowledge-ark-health-score-styles";
  if (document.getElementById(styleId))
    return;
  const style = document.createElement("style");
  style.id = styleId;
  style.textContent = `
    .knowledge-ark-score.score-healthy {
      color: #28a745 !important; /* Green */
      font-size: 1.2em !important;
      font-weight: bold !important;
    }
    
    .knowledge-ark-score.score-warning {
      color: #ffc107 !important; /* Yellow */
      font-size: 1.2em !important;
      font-weight: bold !important;
    }
    
    .knowledge-ark-score.score-critical {
      color: #dc3545 !important; /* Red */
      font-size: 1.2em !important;
      font-weight: bold !important;
    }
  `;
  document.head.appendChild(style);
};
addHealthScoreStyles();
var VIEW_TYPE = "knowledge-ark-view";
var KnowledgeArkView = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    const isEnglish = this.plugin.settings.language === "en";
    return isEnglish ? "Knowledge Ark Diagnostic Center" : "\u77E5\u8BC6\u65B9\u821F\u8BCA\u65AD\u4E2D\u5FC3";
  }
  getIcon() {
    return "lucide-compass";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    const isEnglish = this.plugin.settings.language === "en";
    container.empty();
    container.createEl("h2", { text: isEnglish ? "Knowledge Ark Diagnostic Center" : "\u77E5\u8BC6\u65B9\u821F\u8BCA\u65AD\u4E2D\u5FC3" });
    const headerEl = container.createEl("div", { cls: "knowledge-ark-header" });
    const diagnoseButton = headerEl.createEl("button", {
      text: isEnglish ? "Start Full Diagnosis" : "\u5F00\u59CB\u5168\u9762\u8BCA\u65AD",
      cls: "knowledge-ark-button primary"
    });
    const incrementalDiagnoseButton = headerEl.createEl("button", {
      text: isEnglish ? "Start Incremental Diagnosis" : "\u65B0\u589E\u7B14\u8BB0\u8BCA\u65AD",
      cls: "knowledge-ark-button primary"
    });
    const exportButton = headerEl.createEl("button", {
      text: isEnglish ? "Export Healthy Notes" : "\u5BFC\u51FA\u5065\u5EB7\u7B14\u8BB0",
      cls: "knowledge-ark-button secondary"
    });
    const metricsEl = headerEl.createEl("div", { cls: "knowledge-ark-metrics" });
    const scoreEl = metricsEl.createEl("div", {
      text: isEnglish ? "Health Score: --%" : "\u5065\u5EB7\u5EA6\u603B\u5206: --%",
      cls: "knowledge-ark-score"
    });
    const atomCountEl = metricsEl.createEl("div", {
      text: isEnglish ? "Knowledge Atom Stats: --" : "\u77E5\u8BC6\u539F\u5B50\u7EDF\u8BA1: --",
      cls: "knowledge-ark-atom-count"
    });
    const connectionDensityEl = metricsEl.createEl("div", {
      text: isEnglish ? "Connection Density: --" : "\u8FDE\u63A5\u5BC6\u5EA6: --",
      cls: "knowledge-ark-connection-density"
    });
    const resultsEl = container.createEl("div", { cls: "knowledge-ark-results" });
    const savedResults = this.plugin.settings.savedDiagnosisResults;
    if (savedResults) {
      scoreEl.setText(isEnglish ? `Health Score: ${savedResults.healthScore}%` : `\u5065\u5EB7\u5EA6\u603B\u5206: ${savedResults.healthScore}%`);
      scoreEl.className = `knowledge-ark-score ${this.getScoreClass(savedResults.healthScore)}`;
      atomCountEl.setText(isEnglish ? `Knowledge Atom Stats: ${savedResults.atomCount}` : `\u77E5\u8BC6\u539F\u5B50\u7EDF\u8BA1: ${savedResults.atomCount}`);
      connectionDensityEl.setText(isEnglish ? `Connection Density: ${savedResults.connectionDensity}` : `\u8FDE\u63A5\u5BC6\u5EA6: ${savedResults.connectionDensity}`);
      resultsEl.empty();
      if (savedResults.issues.length === 0) {
        resultsEl.createEl("p", {
          text: isEnglish ? "Congratulations! Your knowledge base is very healthy." : "\u606D\u559C\uFF01\u60A8\u7684\u77E5\u8BC6\u5E93\u975E\u5E38\u5065\u5EB7\u3002",
          cls: "knowledge-ark-placeholder"
        });
      } else {
        this.renderDiagnosticCards(resultsEl, savedResults.issues);
        await this.renderHealthyNotes(resultsEl);
      }
    } else {
      const placeholderEl = resultsEl.createEl("p", {
        text: isEnglish ? 'Click "Start Full Diagnosis" to analyze your knowledge ark' : '\u70B9\u51FB"\u5F00\u59CB\u5168\u9762\u8BCA\u65AD"\u4EE5\u5206\u6790\u60A8\u7684\u77E5\u8BC6\u65B9\u821F',
        cls: "knowledge-ark-placeholder"
      });
    }
    connectionDensityEl.addEventListener("mouseenter", (event) => {
      const densityText = this.calculateConnectionDensity();
      const matches = densityText.match(/\[↑ ([0-9.]+)\] \[↓ ([0-9.]+)\]/);
      let inboundAvg = "0";
      let outboundAvg = "0";
      if (matches && matches.length === 3) {
        inboundAvg = matches[1];
        outboundAvg = matches[2];
      }
      const tooltip = document.createElement("div");
      tooltip.className = "knowledge-ark-tooltip";
      tooltip.textContent = isEnglish ? `Each note is referenced by an average of ${inboundAvg} other notes / Each note references an average of ${outboundAvg} other notes` : `\u5E73\u5747\u6BCF\u4E2A\u7B14\u8BB0\u88AB${inboundAvg}\u4E2A\u5176\u4ED6\u7B14\u8BB0\u6240\u5F15\u7528 / \u5E73\u5747\u6BCF\u4E2A\u7B14\u8BB0\u5F15\u7528\u4E86${outboundAvg}\u4E2A\u5176\u4ED6\u7B14\u8BB0`;
      tooltip.style.position = "absolute";
      tooltip.style.left = `${event.pageX}px`;
      tooltip.style.top = `${event.pageY - 30}px`;
      document.body.appendChild(tooltip);
    });
    connectionDensityEl.addEventListener("mouseleave", () => {
      const tooltips = document.querySelectorAll(".knowledge-ark-tooltip");
      tooltips.forEach((tooltip) => tooltip.remove());
    });
    diagnoseButton.onClickEvent(async () => {
      diagnoseButton.setText(isEnglish ? "Diagnosing..." : "\u8BCA\u65AD\u4E2D...");
      diagnoseButton.disabled = true;
      const issues = await this.plugin.runDiagnostics();
      const healthScore = this.calculateHealthScore(issues);
      scoreEl.setText(isEnglish ? `Health Score: ${healthScore}%` : `\u5065\u5EB7\u5EA6\u603B\u5206: ${healthScore}%`);
      scoreEl.className = `knowledge-ark-score ${this.getScoreClass(healthScore)}`;
      const atomCount = this.calculateAtomCount();
      atomCountEl.setText(isEnglish ? `Knowledge Atom Stats: ${atomCount}` : `\u77E5\u8BC6\u539F\u5B50\u7EDF\u8BA1: ${atomCount}`);
      const connectionDensity = this.calculateConnectionDensity();
      connectionDensityEl.setText(isEnglish ? `Connection Density: ${connectionDensity}` : `\u8FDE\u63A5\u5BC6\u5EA6: ${connectionDensity}`);
      this.plugin.settings.savedDiagnosisResults = {
        issues,
        healthScore,
        atomCount,
        connectionDensity,
        diagnosisTime: Date.now()
      };
      await this.plugin.saveSettings();
      resultsEl.empty();
      if (issues.length === 0) {
        resultsEl.createEl("p", {
          text: isEnglish ? "Congratulations! Your knowledge base is very healthy." : "\u606D\u559C\uFF01\u60A8\u7684\u77E5\u8BC6\u5E93\u975E\u5E38\u5065\u5EB7\u3002",
          cls: "knowledge-ark-placeholder"
        });
      } else {
        this.renderDiagnosticCards(resultsEl, issues);
        await this.renderHealthyNotes(resultsEl);
      }
      diagnoseButton.setText(isEnglish ? "Start Full Diagnosis" : "\u5F00\u59CB\u5168\u9762\u8BCA\u65AD");
      diagnoseButton.disabled = false;
    });
    incrementalDiagnoseButton.onClickEvent(async () => {
      incrementalDiagnoseButton.setText(isEnglish ? "Diagnosing..." : "\u8BCA\u65AD\u4E2D...");
      incrementalDiagnoseButton.disabled = true;
      const newIssues = await this.plugin.runDiagnostics(true);
      let allIssues = newIssues;
      if (this.plugin.settings.savedDiagnosisResults) {
        const currentFiles = new Set(this.app.vault.getMarkdownFiles().map((file) => file.path));
        const existingIssues = this.plugin.settings.savedDiagnosisResults.issues.filter((issue) => currentFiles.has(issue.filePath));
        const existingIssueIds = new Set(existingIssues.map((issue) => issue.id));
        const uniqueNewIssues = newIssues.filter((issue) => !existingIssueIds.has(issue.id));
        allIssues = [...existingIssues, ...uniqueNewIssues];
      }
      const healthScore = this.calculateHealthScore(allIssues);
      scoreEl.setText(isEnglish ? `Health Score: ${healthScore}%` : `\u5065\u5EB7\u5EA6\u603B\u5206: ${healthScore}%`);
      scoreEl.className = `knowledge-ark-score ${this.getScoreClass(healthScore)}`;
      const atomCount = this.calculateAtomCount();
      atomCountEl.setText(isEnglish ? `Knowledge Atom Stats: ${atomCount}` : `\u77E5\u8BC6\u539F\u5B50\u7EDF\u8BA1: ${atomCount}`);
      const connectionDensity = this.calculateConnectionDensity();
      connectionDensityEl.setText(isEnglish ? `Connection Density: ${connectionDensity}` : `\u8FDE\u63A5\u5BC6\u5EA6: ${connectionDensity}`);
      this.plugin.settings.savedDiagnosisResults = {
        issues: allIssues,
        healthScore,
        atomCount,
        connectionDensity,
        diagnosisTime: Date.now()
      };
      await this.plugin.saveSettings();
      resultsEl.empty();
      if (allIssues.length === 0) {
        resultsEl.createEl("p", {
          text: isEnglish ? "Congratulations! Your knowledge base is very healthy." : "\u606D\u559C\uFF01\u60A8\u7684\u77E5\u8BC6\u5E93\u975E\u5E38\u5065\u5EB7\u3002",
          cls: "knowledge-ark-placeholder"
        });
      } else {
        this.renderDiagnosticCards(resultsEl, allIssues);
        await this.renderHealthyNotes(resultsEl);
      }
      incrementalDiagnoseButton.setText(isEnglish ? "Start Incremental Diagnosis" : "\u65B0\u589E\u7B14\u8BB0\u8BCA\u65AD");
      incrementalDiagnoseButton.disabled = false;
    });
    exportButton.onClickEvent(async () => {
      exportButton.setText(isEnglish ? "Exporting..." : "\u5BFC\u51FA\u4E2D...");
      exportButton.disabled = true;
      const issues = await this.plugin.runDiagnostics();
      await this.plugin.exportHealthyNotes(issues);
      exportButton.setText(isEnglish ? "Export Healthy Notes" : "\u5BFC\u51FA\u5065\u5EB7\u7B14\u8BB0");
      exportButton.disabled = false;
    });
  }
  calculateHealthScore(issues) {
    const filteredIssues = issues.filter((issue) => !this.plugin.settings.ignoredIssues.includes(issue.id));
    let totalPenalty = 0;
    const issuesByRule = {};
    for (const issue of filteredIssues) {
      if (!issuesByRule[issue.ruleId]) {
        issuesByRule[issue.ruleId] = 0;
      }
      issuesByRule[issue.ruleId]++;
    }
    for (const [ruleId, count] of Object.entries(issuesByRule)) {
      const weight = this.plugin.settings.ruleWeights[ruleId] || 0;
      totalPenalty += count * weight;
    }
    const finalScore = Math.max(0, 100 - totalPenalty);
    return Math.round(finalScore);
  }
  getScoreClass(score) {
    if (score >= 90)
      return "score-healthy";
    if (score >= 70)
      return "score-warning";
    return "score-critical";
  }
  renderDiagnosticCards(container, issues) {
    const isEnglish = this.plugin.settings.language === "en";
    const filteredIssues = issues.filter((issue) => !this.plugin.settings.ignoredIssues.includes(issue.id));
    const issuesByRule = {};
    for (const issue of filteredIssues) {
      if (!issuesByRule[issue.ruleId]) {
        issuesByRule[issue.ruleId] = [];
      }
      issuesByRule[issue.ruleId].push(issue);
    }
    for (const [ruleId, ruleIssues] of Object.entries(issuesByRule)) {
      const cardEl = container.createEl("div", {
        cls: "knowledge-ark-card",
        attr: { "data-rule-id": ruleId }
      });
      const headerEl = cardEl.createEl("div", { cls: "knowledge-ark-card-header" });
      const titleContainerEl = headerEl.createEl("div", { cls: "knowledge-ark-card-title-container" });
      const titleEl = titleContainerEl.createEl("div", { cls: "knowledge-ark-card-title" });
      let ruleName = ruleIssues[0].ruleId;
      let ruleDescription = isEnglish ? "Issue Description" : "\u95EE\u9898\u63CF\u8FF0";
      const ruleInfoMap = isEnglish ? {
        "metadata-integrity": {
          name: "Metadata Integrity Check",
          description: "Check if note files contain standard YAML Frontmatter"
        },
        "note-atomicity": {
          name: "Note Atomicity Check",
          description: "Check if notes are too lengthy or have scattered topics"
        },
        "naked-links": {
          name: "Naked Links Check",
          description: "Check if internal links lack sufficient context"
        },
        "graph-connectivity": {
          name: "Knowledge Graph Connectivity Check",
          description: 'Check for unconnected "information islands"'
        },
        "predicate-consistency": {
          name: "Predicate Consistency Check",
          description: "Encourage the standard use of `key:: [[Link]]`"
        }
      } : {
        "metadata-integrity": {
          name: "\u5143\u6570\u636E\u5B8C\u6574\u6027\u68C0\u67E5",
          description: "\u68C0\u67E5\u7B14\u8BB0\u6587\u4EF6\u662F\u5426\u5305\u542B\u89C4\u8303\u7684YAML Frontmatter"
        },
        "note-atomicity": {
          name: "\u7B14\u8BB0\u539F\u5B50\u5316\u7A0B\u5EA6\u68C0\u67E5",
          description: "\u68C0\u67E5\u7B14\u8BB0\u662F\u5426\u8FC7\u4E8E\u5197\u957F\u6216\u4E3B\u9898\u5206\u6563"
        },
        "naked-links": {
          name: "\u88F8\u94FE\u63A5\u68C0\u67E5",
          description: "\u68C0\u67E5\u5185\u90E8\u94FE\u63A5\u662F\u5426\u7F3A\u5C11\u8DB3\u591F\u7684\u4E0A\u4E0B\u6587"
        },
        "graph-connectivity": {
          name: "\u77E5\u8BC6\u56FE\u8C31\u8FDE\u63A5\u6027\u68C0\u67E5",
          description: '\u68C0\u67E5\u662F\u5426\u5B58\u5728\u672A\u88AB\u8FDE\u63A5\u7684"\u4FE1\u606F\u5B64\u5C9B"'
        },
        "predicate-consistency": {
          name: "\u5173\u7CFB\u8C13\u8BED\u4E00\u81F4\u6027\u68C0\u67E5",
          description: "\u9F13\u52B1`key:: [[Link]]`\u7684\u89C4\u8303\u4F7F\u7528"
        }
      };
      if (ruleInfoMap[ruleId]) {
        ruleName = ruleInfoMap[ruleId].name;
        ruleDescription = ruleInfoMap[ruleId].description;
      }
      titleEl.createEl("span", { text: `\u26A0\uFE0F ${ruleName}` });
      titleContainerEl.createEl("div", {
        text: ruleDescription,
        cls: "knowledge-ark-card-description"
      });
      const badgeToggleContainerEl = headerEl.createEl("div", { cls: "knowledge-ark-badge-toggle-container" });
      badgeToggleContainerEl.createEl("span", {
        text: ruleIssues.length.toString(),
        cls: "knowledge-ark-card-badge"
      });
      const toggleEl = badgeToggleContainerEl.createEl("button", {
        cls: "knowledge-ark-card-toggle"
      });
      const expandIcon = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>`;
      const collapseIcon = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>`;
      toggleEl.innerHTML = expandIcon;
      const contentEl = cardEl.createEl("div", { cls: "knowledge-ark-card-content" });
      contentEl.hide();
      const tableEl = contentEl.createEl("table", { cls: "knowledge-ark-issue-table" });
      const theadEl = tableEl.createEl("thead");
      const headerRowEl = theadEl.createEl("tr");
      headerRowEl.createEl("th", { text: isEnglish ? "File Name" : "\u6587\u4EF6\u540D" });
      headerRowEl.createEl("th", { text: isEnglish ? "Context Preview" : "\u4E0A\u4E0B\u6587\u9884\u89C8" });
      headerRowEl.createEl("th", { text: isEnglish ? "Actions" : "\u64CD\u4F5C" });
      const tbodyEl = tableEl.createEl("tbody");
      for (const issue of ruleIssues) {
        const rowEl = tbodyEl.createEl("tr");
        rowEl.addClass("diagnostic-issue");
        rowEl.setAttribute("data-file-path", issue.filePath);
        const fileCellEl = rowEl.createEl("td");
        const fileLinkEl = fileCellEl.createEl("a", {
          text: issue.fileName,
          href: "#"
        });
        fileLinkEl.onClickEvent((evt) => {
          evt.preventDefault();
          this.navigateToIssue(issue.filePath, issue.position);
        });
        rowEl.createEl("td", {
          text: issue.contextPreview,
          cls: "knowledge-ark-issue-context"
        });
        const actionsCellEl = rowEl.createEl("td", { cls: "knowledge-ark-issue-actions" });
        const recheckButtonEl = actionsCellEl.createEl("button", {
          text: isEnglish ? "Recheck" : "\u91CD\u68C0",
          cls: "knowledge-ark-issue-button"
        });
        recheckButtonEl.onClickEvent(async () => {
          await this.recheckFileIssues(issue.filePath, issue.ruleId, rowEl);
        });
        const ignoreButtonEl = actionsCellEl.createEl("button", {
          text: isEnglish ? "Ignore" : "\u5FFD\u7565",
          cls: "knowledge-ark-issue-button"
        });
        ignoreButtonEl.onClickEvent(() => {
          this.ignoreIssue(issue.id);
          rowEl.remove();
        });
        if (this.plugin.settings.ignoredIssues.includes(issue.id)) {
          const unignoreButtonEl = actionsCellEl.createEl("button", {
            text: isEnglish ? "Unignore" : "\u53D6\u6D88\u5FFD\u7565",
            cls: "knowledge-ark-issue-button"
          });
          unignoreButtonEl.onClickEvent(() => {
            this.unignoreIssue(issue.id);
            ignoreButtonEl.setText("\u5FFD\u7565");
            unignoreButtonEl.remove();
          });
        }
      }
      const toggleContent = () => {
        if (contentEl.isShown()) {
          contentEl.hide();
          toggleEl.innerHTML = expandIcon;
        } else {
          contentEl.show();
          toggleEl.innerHTML = collapseIcon;
        }
      };
      toggleEl.onClickEvent((evt) => {
        evt.stopPropagation();
        toggleContent();
      });
      headerEl.onClickEvent(toggleContent);
    }
  }
  async renderHealthyNotes(container) {
    const isEnglish = this.plugin.settings.language === "en";
    const sectionEl = container.createEl("div", { cls: "knowledge-ark-healthy-notes-section" });
    const headerEl = sectionEl.createEl("div", { cls: "knowledge-ark-card-header" });
    const titleContainerEl = headerEl.createEl("div", { cls: "knowledge-ark-card-title-container" });
    const titleEl = titleContainerEl.createEl("div", { cls: "knowledge-ark-card-title" });
    titleEl.createEl("span", { text: "\u2705 " });
    titleEl.createEl("span", { text: isEnglish ? "Healthy Notes List" : "\u5065\u5EB7\u7B14\u8BB0\u5217\u8868" });
    const allIssues = await this.plugin.runDiagnostics();
    const exporter = new DataExporter(this.plugin, this.app);
    const allFiles = this.app.vault.getMarkdownFiles();
    const files = allFiles.filter((file) => {
      const isInExcludedFolder = this.plugin.settings.excludedFolders.some(
        (folder) => file.path.startsWith(folder + "/")
      );
      const cache = this.app.metadataCache.getFileCache(file);
      let fileTags = [];
      if (cache && cache.frontmatter && cache.frontmatter.tags) {
        fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
      }
      const hasExcludedTag = this.plugin.settings.excludedTags.length > 0 && (() => {
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        return normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag));
      })();
      return !isInExcludedFolder && !hasExcludedTag;
    });
    const healthyFiles = files.filter(
      (file) => !allIssues.some((issue) => issue.filePath === file.path)
    );
    const badgeToggleContainerEl = headerEl.createEl("div", { cls: "knowledge-ark-badge-toggle-container" });
    badgeToggleContainerEl.createEl("span", {
      text: healthyFiles.length.toString(),
      cls: "knowledge-ark-card-badge"
    });
    const toggleEl = badgeToggleContainerEl.createEl("button", {
      cls: "knowledge-ark-card-toggle"
    });
    const expandIcon = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>`;
    const collapseIcon = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>`;
    toggleEl.innerHTML = expandIcon;
    const contentEl = sectionEl.createEl("div", { cls: "knowledge-ark-card-content" });
    contentEl.hide();
    titleEl.createEl("span", { text: "\u2705 " });
    titleEl.createEl("span", { text: isEnglish ? "Healthy Notes List" : "\u5065\u5EB7\u7B14\u8BB0\u5217\u8868" });
    const tableEl = contentEl.createEl("table", { cls: "knowledge-ark-issue-table" });
    const theadEl = tableEl.createEl("thead");
    const headerRowEl = theadEl.createEl("tr");
    const fileNameHeader = headerRowEl.createEl("th", { text: isEnglish ? "File Name" : "\u6587\u4EF6\u540D", cls: "sortable-header" });
    const domainHeader = headerRowEl.createEl("th", { text: isEnglish ? "Domain" : "\u9886\u57DF", cls: "sortable-header" });
    const typeHeader = headerRowEl.createEl("th", { text: isEnglish ? "Type" : "\u7C7B\u578B", cls: "sortable-header" });
    const tbodyEl = tableEl.createEl("tbody");
    const healthyNotesData = healthyFiles.map((file) => {
      var _a, _b;
      const cache = this.app.metadataCache.getFileCache(file);
      const domain = ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.domain) || "";
      const type = ((_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b.type) || "";
      return {
        file,
        fileName: file.name,
        domain,
        type,
        pinyin: this.getPinyin(file.name)
      };
    });
    let currentSortField = "";
    let currentSortDirection = "asc";
    const renderTable = (data, sortField, direction) => {
      tbodyEl.empty();
      const sortedData = [...data].sort((a, b) => {
        let valueA = a[sortField];
        let valueB = b[sortField];
        if (!valueA)
          valueA = "";
        if (!valueB)
          valueB = "";
        const strA = String(valueA).toLowerCase();
        const strB = String(valueB).toLowerCase();
        let result = 0;
        if (sortField === "fileName") {
          const pinyinA = a.pinyin || strA;
          const pinyinB = b.pinyin || strB;
          result = pinyinA.localeCompare(pinyinB);
        } else {
          result = strA.localeCompare(strB);
        }
        return direction === "asc" ? result : -result;
      });
      for (const note of sortedData) {
        const rowEl = tbodyEl.createEl("tr");
        const fileCellEl = rowEl.createEl("td");
        const fileLinkEl = fileCellEl.createEl("a", {
          text: note.fileName,
          href: "#"
        });
        fileLinkEl.onClickEvent((evt) => {
          evt.preventDefault();
          this.app.workspace.getLeaf(true).openFile(note.file);
        });
        rowEl.createEl("td", { text: note.domain });
        rowEl.createEl("td", { text: note.type });
      }
    };
    const addSortHandler = (header, field) => {
      header.style.cursor = "pointer";
      header.style.userSelect = "none";
      header.addEventListener("click", () => {
        if (currentSortField === field) {
          currentSortDirection = currentSortDirection === "asc" ? "desc" : "asc";
        } else {
          currentSortField = field;
          currentSortDirection = "asc";
        }
        const allHeaders = theadEl.querySelectorAll(".sortable-header");
        allHeaders.forEach((h) => h.classList.remove("sorted-asc", "sorted-desc"));
        const directionClass = currentSortDirection === "asc" ? "sorted-asc" : "sorted-desc";
        header.classList.add(directionClass);
        renderTable(healthyNotesData, currentSortField, currentSortDirection);
      });
    };
    const style = document.createElement("style");
    style.textContent = `
				.sortable-header {
					position: relative;
					padding-right: 20px;
				}
				.sortable-header:hover {
					background-color: var(--background-secondary);
				}
				.sorted-asc::after {
					content: ' \u2191';
					position: absolute;
					right: 5px;
					color: var(--text-accent);
				}
				.sorted-desc::after {
					content: ' \u2193';
					position: absolute;
					right: 5px;
					color: var(--text-accent);
				}
			`;
    document.head.appendChild(style);
    addSortHandler(fileNameHeader, "fileName");
    addSortHandler(domainHeader, "domain");
    addSortHandler(typeHeader, "type");
    renderTable(healthyNotesData, "fileName", "asc");
    const toggleContent = () => {
      if (contentEl.isShown()) {
        contentEl.hide();
        toggleEl.innerHTML = expandIcon;
      } else {
        contentEl.show();
        toggleEl.innerHTML = collapseIcon;
      }
    };
    toggleEl.onClickEvent((evt) => {
      evt.stopPropagation();
      toggleContent();
    });
    headerEl.onClickEvent(toggleContent);
  }
  /**
   * Calculate the number of knowledge atoms based on user-defined types
   * @returns The count of knowledge atoms
   */
  calculateAtomCount() {
    var _a;
    const files = this.app.vault.getMarkdownFiles();
    let atomCount = 0;
    for (const file of files) {
      const cache = this.app.metadataCache.getFileCache(file);
      const type = (_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.type;
      if (type && this.plugin.settings.knowledgeAtomTypes.includes(type)) {
        atomCount++;
      }
    }
    return atomCount;
  }
  /**
   * Calculate the connection density of the knowledge graph
   * @returns The connection density as a string in the format "[↑ inboundAvg] [↓ outboundAvg]"
   */
  /**
   * Convert Chinese characters to pinyin for sorting
   * @param text Input text
   * @returns Pinyin string for sorting
   */
  getPinyin(text) {
    const pinyinMap = {
      "\u554A": "a",
      "\u5427": "ba",
      "\u624D": "cai",
      "\u7684": "de",
      "\u989D": "e",
      "\u53D1": "fa",
      "\u7ED9": "gei",
      "\u54C8": "ha",
      "\u662F": "shi",
      "\u5C31": "jiu",
      "\u770B": "kan",
      "\u4E86": "le",
      "\u5417": "ma",
      "\u4F60": "ni",
      "\u54E6": "o",
      "\u6015": "pa",
      "\u53BB": "qu",
      "\u4EBA": "ren",
      "\u4E09": "san",
      "\u4ED6": "ta",
      "\u6211": "wo",
      "\u60F3": "xiang",
      "\u4E00": "yi",
      "\u5728": "zai",
      "\u963F": "a",
      "\u516B": "ba",
      "\u64E6": "ca",
      "\u7B54": "da",
      "\u4FC4": "e",
      "\u5676": "ga",
      "\u51FB": "ji",
      "\u5361": "ka",
      "\u62C9": "la",
      "\u90A3": "na",
      "\u556A": "pa",
      "\u4E03": "qi",
      "\u7136": "ran",
      "\u6492": "sa",
      "\u54C7": "wa",
      "\u897F": "xi",
      "\u5440": "ya",
      "\u6742": "za",
      "\u5B89": "an",
      "\u767D": "bai",
      "\u91C7": "cai",
      "\u5E26": "dai",
      "\u8BF6": "ei",
      "\u8BE5": "gai",
      "\u6D77": "hai",
      "\u5BB6": "jia",
      "\u5F00": "kai",
      "\u6765": "lai",
      "\u4E70": "mai",
      "\u4E43": "nai",
      "\u6B27": "ou",
      "\u62CD": "pai",
      "\u5343": "qian",
      "\u8BA9": "rang",
      "\u8D5B": "sai",
      "\u592A": "tai",
      "\u5916": "wai",
      "\u5148": "xian",
      "\u518D": "zai",
      "\u6602": "ang",
      "\u5E2E": "bang",
      "\u4ED3": "cang",
      "\u5F53": "dang",
      "\u521A": "gang",
      "\u822A": "hang",
      "\u5C06": "jiang",
      "\u5EB7": "kang",
      "\u90CE": "lang",
      "\u5FD9": "mang",
      "\u56CA": "nang",
      "\u65C1": "pang",
      "\u5F3A": "qiang",
      "\u6851": "sang",
      "\u5510": "tang",
      "\u738B": "wang",
      "\u9999": "xiang",
      "\u5F20": "zhang"
    };
    let pinyin = "";
    for (const char of text) {
      const charPinyin = pinyinMap[char];
      if (charPinyin) {
        pinyin += charPinyin;
      } else if (/[\u4e00-\u9fff]/.test(char)) {
        pinyin += "z";
      } else {
        pinyin += char.toLowerCase();
      }
    }
    return pinyin;
  }
  calculateConnectionDensity() {
    var _a;
    const allFiles = this.app.vault.getMarkdownFiles();
    const files = allFiles.filter((file) => {
      const isInExcludedFolder = this.plugin.settings.excludedFolders.some(
        (folder) => file.path.startsWith(folder + "/")
      );
      const cache = this.app.metadataCache.getFileCache(file);
      let fileTags = [];
      if (cache && cache.frontmatter && cache.frontmatter.tags) {
        fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
      }
      const hasExcludedTag = this.plugin.settings.excludedTags.length > 0 && (() => {
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        return normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag));
      })();
      return !isInExcludedFolder && !hasExcludedTag;
    });
    const totalFiles = files.length;
    if (totalFiles === 0) {
      return "[\u2191 0] [\u2193 0]";
    }
    let totalInboundLinks = 0;
    let totalOutboundLinks = 0;
    const resolvedLinks = this.app.metadataCache.resolvedLinks;
    for (const file of files) {
      const outboundLinks = resolvedLinks[file.path] ? Object.values(resolvedLinks[file.path]).reduce((sum, count) => sum + count, 0) : 0;
      totalOutboundLinks += outboundLinks;
      let inboundLinks = 0;
      for (const sourcePath in resolvedLinks) {
        const sourceFile = allFiles.find((f) => f.path === sourcePath);
        if (sourceFile) {
          const sourceCache = this.app.metadataCache.getFileCache(sourceFile);
          const sourceTags = ((_a = sourceCache == null ? void 0 : sourceCache.tags) == null ? void 0 : _a.map((tag) => tag.tag)) || [];
          const isSourceInExcludedFolder = this.plugin.settings.excludedFolders.some(
            (folder) => sourceFile.path.startsWith(folder + "/")
          );
          const hasSourceExcludedTag = this.plugin.settings.excludedTags.some(
            (excludedTag) => sourceTags.includes("#" + excludedTag)
          );
          if (!isSourceInExcludedFolder && !hasSourceExcludedTag) {
            if (resolvedLinks[sourcePath][file.path]) {
              inboundLinks += resolvedLinks[sourcePath][file.path];
            }
          }
        }
      }
      totalInboundLinks += inboundLinks;
    }
    const inboundAvg = (totalInboundLinks / totalFiles).toFixed(1);
    const outboundAvg = (totalOutboundLinks / totalFiles).toFixed(1);
    return `[\u2191 ${inboundAvg}] [\u2193 ${outboundAvg}]`;
  }
  async recheckFileIssues(filePath, ruleId, issueRowEl) {
    var _a, _b;
    const isEnglish = this.plugin.settings.language === "en";
    const originalText = (_a = issueRowEl.querySelector(".knowledge-ark-issue-button")) == null ? void 0 : _a.textContent;
    const recheckButton = issueRowEl.querySelector(".knowledge-ark-issue-button");
    if (recheckButton) {
      recheckButton.textContent = isEnglish ? "Checking..." : "\u68C0\u67E5\u4E2D...";
      recheckButton.disabled = true;
    }
    try {
      const ruleRegistry = RuleRegistry.getInstance();
      const rule = ruleRegistry.getRules(this.plugin, this.app).find((r) => r.id === ruleId);
      if (!rule) {
        console.error(`Rule not found: ${ruleId}`);
        return;
      }
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file || !(file instanceof import_obsidian3.TFile)) {
        console.error(`File not found: ${filePath}`);
        return;
      }
      const newIssues = await rule.check();
      const fileIssues = newIssues.filter((issue) => issue.filePath === filePath && !issue.isIgnored);
      const existingIssues = ((_b = this.plugin.settings.savedDiagnosisResults) == null ? void 0 : _b.issues) || [];
      const oldIssue = existingIssues.find(
        (issue) => issue.filePath === filePath && issue.ruleId === ruleId && !issue.isIgnored
      );
      if (fileIssues.length === 0 && oldIssue) {
        const updatedIssues = existingIssues.filter((issue) => issue.id !== oldIssue.id);
        const currentResults = this.plugin.settings.savedDiagnosisResults || { issues: [], healthScore: 100, atomCount: 0, connectionDensity: "0", diagnosisTime: 0 };
        this.plugin.settings.savedDiagnosisResults = {
          ...currentResults,
          issues: updatedIssues
        };
        await this.plugin.saveSettings();
        issueRowEl.remove();
        this.updateRuleBadgeCount(ruleId);
        const remainingIssues = updatedIssues.filter((issue) => issue.ruleId === ruleId);
        if (remainingIssues.length === 0) {
          const ruleCard = this.containerEl.querySelector(`[data-rule-id="${ruleId}"]`);
          if (ruleCard) {
            ruleCard.remove();
          }
        }
        console.log(`Issue fixed for file: ${filePath}, rule: ${ruleId}`);
      } else if (fileIssues.length > 0 && oldIssue) {
        const updatedIssues = existingIssues.map(
          (issue) => issue.id === oldIssue.id ? fileIssues[0] : issue
        );
        const currentResults = this.plugin.settings.savedDiagnosisResults || { issues: [], healthScore: 100, atomCount: 0, connectionDensity: "0", diagnosisTime: 0 };
        this.plugin.settings.savedDiagnosisResults = {
          ...currentResults,
          issues: updatedIssues
        };
        await this.plugin.saveSettings();
        console.log(`Issue still exists for file: ${filePath}, rule: ${ruleId}`);
      }
    } catch (error) {
      console.error(`Error rechecking file ${filePath}:`, error);
    } finally {
      if (recheckButton) {
        recheckButton.textContent = originalText || (isEnglish ? "Recheck" : "\u91CD\u68C0");
        recheckButton.disabled = false;
      }
    }
  }
  updateRuleBadgeCount(ruleId) {
    var _a;
    const ruleCard = this.containerEl.querySelector(`[data-rule-id="${ruleId}"]`);
    if (!ruleCard)
      return;
    const badgeEl = ruleCard.querySelector(".knowledge-ark-card-badge");
    if (!badgeEl)
      return;
    const currentIssues = ((_a = this.plugin.settings.savedDiagnosisResults) == null ? void 0 : _a.issues) || [];
    const ruleIssues = currentIssues.filter((issue) => issue.ruleId === ruleId && !issue.isIgnored);
    badgeEl.textContent = ruleIssues.length.toString();
  }
  async navigateToIssue(filePath, position) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file) {
      const leaf = this.app.workspace.getLeaf(true);
      await leaf.openFile(file);
      const editor = leaf.view instanceof import_obsidian3.MarkdownView ? leaf.view.editor : null;
      if (editor) {
        const pos = editor.offsetToPos(position.start);
        editor.setCursor(pos);
        editor.scrollIntoView({ from: pos, to: pos }, true);
      }
    } else {
      console.error(`File not found: ${filePath}`);
    }
  }
  ignoreIssue(issueId) {
    if (!this.plugin.settings.ignoredIssues.includes(issueId)) {
      this.plugin.settings.ignoredIssues.push(issueId);
      this.plugin.saveSettings();
    }
  }
  unignoreIssue(issueId) {
    const index = this.plugin.settings.ignoredIssues.indexOf(issueId);
    if (index > -1) {
      this.plugin.settings.ignoredIssues.splice(index, 1);
      this.plugin.saveSettings();
    }
  }
  async onClose() {
    return;
  }
  /**
   * Navigate to a specific file in the diagnostic view
   * @param filePath The path of the file to navigate to
   */
  async navigateToFile(filePath) {
    var _a;
    const resultsEl = this.containerEl.querySelector(".knowledge-ark-results");
    if (!resultsEl)
      return;
    const issues = ((_a = this.plugin.settings.savedDiagnosisResults) == null ? void 0 : _a.issues) || [];
    const fileIssues = issues.filter((issue) => issue.filePath === filePath && !issue.isIgnored);
    if (fileIssues.length > 0) {
      const firstIssue = fileIssues[0];
      const ruleCard = resultsEl.querySelector(`[data-rule-id="${firstIssue.ruleId}"]`);
      if (ruleCard) {
        const cardHeader = ruleCard.querySelector(".knowledge-ark-card-header");
        const cardContent = ruleCard.querySelector(".knowledge-ark-card-content");
        if (cardHeader && cardContent && cardContent.style.display === "none") {
          cardHeader.click();
        }
        setTimeout(() => {
          ruleCard.scrollIntoView({ behavior: "smooth", block: "center" });
          const issueElements = ruleCard.querySelectorAll(".diagnostic-issue");
          for (let i = 0; i < issueElements.length; i++) {
            const issueEl = issueElements[i];
            const issueFilePath = issueEl.getAttribute("data-file-path");
            if (issueFilePath === filePath) {
              issueEl.style.backgroundColor = "var(--background-modifier-active)";
              issueEl.style.borderLeft = "3px solid var(--interactive-accent)";
              setTimeout(() => {
                issueEl.style.backgroundColor = "";
                issueEl.style.borderLeft = "";
              }, 3e3);
              break;
            }
          }
        }, 100);
      }
    }
  }
};

// src/diagnostic-rules.ts
var MetadataIntegrityRule = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.id = "metadata-integrity";
    this.name = "\u5143\u6570\u636E\u5B8C\u6574\u6027\u68C0\u67E5";
    this.description = "\u68C0\u67E5\u7B14\u8BB0\u6587\u4EF6\u662F\u5426\u5305\u542B\u89C4\u8303\u7684YAML Frontmatter";
  }
  async check() {
    const issues = [];
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder))) {
        continue;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
          continue;
        }
      }
      if (!cache || !cache.frontmatter) {
        issues.push({
          id: `${this.id}-${file.path}`,
          ruleId: this.id,
          filePath: file.path,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? "Missing YAML Frontmatter" : "\u7F3A\u5C11YAML Frontmatter",
          position: { start: 0, end: 0 },
          severity: "high",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${file.path}`)
        });
        continue;
      }
      const missingFields = [];
      for (const field of this.plugin.settings.requiredMetadataFields) {
        if (!(field in cache.frontmatter)) {
          missingFields.push(field);
        }
      }
      if (missingFields.length > 0) {
        issues.push({
          id: `${this.id}-${file.path}`,
          ruleId: this.id,
          filePath: file.path,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? `Missing required fields: ${missingFields.join(", ")}` : `\u7F3A\u5C11\u5FC5\u586B\u5B57\u6BB5: ${missingFields.join(", ")}`,
          position: { start: 0, end: 0 },
          severity: "medium",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${file.path}`)
        });
      }
    }
    return issues;
  }
};
var NoteAtomicityRule = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.id = "note-atomicity";
    this.name = "\u7B14\u8BB0\u539F\u5B50\u5316\u7A0B\u5EA6\u68C0\u67E5";
    this.description = "\u68C0\u67E5\u7B14\u8BB0\u662F\u5426\u8FC7\u4E8E\u5197\u957F\u6216\u4E3B\u9898\u5206\u6563";
  }
  async check() {
    const issues = [];
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder))) {
        continue;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
          continue;
        }
      }
      const content = await this.app.vault.read(file);
      if (content.length > this.plugin.settings.maxNoteLength) {
        issues.push({
          id: `${this.id}-${file.path}`,
          ruleId: this.id,
          filePath: file.path,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? `Note length (${content.length}) exceeds threshold (${this.plugin.settings.maxNoteLength})` : `\u7B14\u8BB0\u957F\u5EA6 (${content.length}) \u8D85\u8FC7\u9608\u503C (${this.plugin.settings.maxNoteLength})`,
          position: { start: 0, end: 0 },
          severity: "medium",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${file.path}`)
        });
      }
      let processedContent = content.replace(/```[\s\S]*?```/g, "").replace(/```[\s\S]*$/g, "");
      processedContent = processedContent.replace(/`[^`]*`/g, "");
      processedContent = processedContent.replace(/---[\s\S]*?---/, "");
      const h1Count = (processedContent.match(/^#\s/gm) || []).length;
      const h2Count = (processedContent.match(/^##\s/gm) || []).length;
      if (h1Count > 1) {
        issues.push({
          id: `${this.id}-${file.path}-h1`,
          ruleId: this.id,
          filePath: file.path,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? `Found ${h1Count} H1 headers and ${h2Count} H2 headers` : `\u53D1\u73B0 ${h1Count} \u4E2AH1\u6807\u9898\uFF0C${h2Count} \u4E2AH2\u6807\u9898`,
          position: { start: 0, end: 0 },
          severity: "medium",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${file.path}-h1`)
        });
      } else if (h2Count >= 5) {
        issues.push({
          id: `${this.id}-${file.path}-h2`,
          ruleId: this.id,
          filePath: file.path,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? `Found ${h2Count} H2 headers, consider splitting the note` : `\u53D1\u73B0 ${h2Count} \u4E2AH2\u6807\u9898\uFF0C\u5EFA\u8BAE\u8003\u8651\u62C6\u5206\u7B14\u8BB0`,
          position: { start: 0, end: 0 },
          severity: "low",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${file.path}-h2`)
        });
      }
    }
    return issues;
  }
};
var NakedLinksRule = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.id = "naked-links";
    this.name = "\u88F8\u94FE\u63A5\u68C0\u67E5";
    this.description = "\u68C0\u67E5\u5185\u90E8\u94FE\u63A5\u662F\u5426\u7F3A\u5C11\u8DB3\u591F\u7684\u4E0A\u4E0B\u6587";
  }
  async check() {
    const issues = [];
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder))) {
        continue;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
          continue;
        }
      }
      const content = await this.app.vault.read(file);
      const cache2 = this.app.metadataCache.getFileCache(file);
      if (!cache2 || !cache2.links) {
        continue;
      }
      for (const link of cache2.links) {
        if (link.link.startsWith("http")) {
          continue;
        }
        const linkStart = link.position.start.offset;
        const linkEnd = link.position.end.offset;
        const contextStart = Math.max(0, linkStart - this.plugin.settings.minContextLength);
        const contextEnd = Math.min(content.length, linkEnd + this.plugin.settings.minContextLength);
        const context = content.substring(contextStart, contextEnd);
        const linkText = link.displayText || link.link;
        const hasMeaningfulLinkText = /[\u4e00-\u9fa5a-zA-Z0-9]{2,}/.test(linkText);
        const hasVerbInContext = /[\u4e00-\u9fa5]/.test(context);
        const contextKeywords = /(总结|说明|参考|详见|见|关于|介绍|讨论|分析|描述|解释|定义|提供|展示|记录|表示|指出|强调|认为|觉得|发现|::|关联|连接|影响|导致|促进|抑制|包含|组成|构成|体现|代表|象征|反映|支持|反对|依赖|源于|归因于|属于|作用于|适用于|应用于|产生|形成|达成|实现|发展|演变|转化|转变|影响|引发|基于|遵循|符合|符合于|来源于|揭示|证明|阐述|涉及|涵盖|包括|意味着|预示|对比|承载|运用|构建|分类于|区别于|平行于|解决|处理|整合|优化|简化|relate|connect|affect|cause|promote|inhibit|contain|compose|constitute|embody|represent|symbolize|reflect|support|oppose|depend|derive|attribute|belong|act|apply|produce|form|develop|evolve|transform|trigger|base|follow|comply|source|reveal|prove|explain|involve|cover|include|mean|predict|contrast|carry|use|build|classify|distinguish|parallel|solve|handle|integrate|optimize|simplify)/;
        const beforeLink = content.substring(contextStart, linkStart);
        const afterLink = content.substring(linkEnd, contextEnd);
        const contextWithoutLink = beforeLink + afterLink;
        const hasContextKeyword = contextKeywords.test(contextWithoutLink);
        const isProperlyFormatted = /\[\[[^\]]+\|[^\]]+\]\]/.test(content.substring(linkStart - 10, linkEnd + 10)) || /\[[^\]]+\]\([^)]+\)/.test(content.substring(linkStart - 10, linkEnd + 10));
        if (!hasContextKeyword && !isProperlyFormatted) {
          issues.push({
            id: `${this.id}-${file.path}-${linkStart}`,
            ruleId: this.id,
            filePath: file.path,
            fileName: file.name,
            contextPreview: this.plugin.settings.language === "en" ? context : context,
            position: { start: linkStart, end: linkEnd },
            severity: "low",
            isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${file.path}-${linkStart}`)
          });
        }
      }
    }
    return issues;
  }
};
var GraphConnectivityRule = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.id = "graph-connectivity";
    this.name = "\u77E5\u8BC6\u56FE\u8C31\u8FDE\u63A5\u6027\u68C0\u67E5";
    this.description = '\u68C0\u67E5\u662F\u5426\u5B58\u5728\u672A\u88AB\u8FDE\u63A5\u7684"\u4FE1\u606F\u5B64\u5C9B"';
  }
  async check() {
    const issues = [];
    const files = this.app.vault.getMarkdownFiles();
    const linkMap = /* @__PURE__ */ new Map();
    for (const file of files) {
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder))) {
        continue;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
          continue;
        }
      }
      if (!linkMap.has(file.path)) {
        linkMap.set(file.path, { inbound: 0, outbound: 0 });
      }
      if (cache && cache.links) {
        linkMap.get(file.path).outbound += cache.links.length;
        for (const link of cache.links) {
          if (!link.link.startsWith("http")) {
            const linkedFilePath = this.resolveLinkPath(file.path, link.link);
            if (linkedFilePath) {
              if (!linkMap.has(linkedFilePath)) {
                linkMap.set(linkedFilePath, { inbound: 0, outbound: 0 });
              }
              linkMap.get(linkedFilePath).inbound += 1;
            }
          }
        }
      }
    }
    for (const [filePath, links] of linkMap.entries()) {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file)
        continue;
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder))) {
        continue;
      }
      if (links.inbound === 0 && links.outbound === 0) {
        issues.push({
          id: `${this.id}-${filePath}-isolated`,
          ruleId: this.id,
          filePath,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? "Isolated node (inbound=0 and outbound=0)" : "\u4FE1\u606F\u5B64\u5C9B\u8282\u70B9 (\u5165\u94FE=0 \u4E14 \u51FA\u94FE=0)",
          position: { start: 0, end: 0 },
          severity: "medium",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${filePath}-isolated`)
        });
      }
      if (links.outbound === 0 && links.inbound > 0) {
        issues.push({
          id: `${this.id}-${filePath}-leaf`,
          ruleId: this.id,
          filePath,
          fileName: file.name,
          contextPreview: this.plugin.settings.language === "en" ? "Leaf node (outbound=0 but inbound>0)" : "\u7EC8\u70B9\u8282\u70B9 (\u51FA\u94FE=0 \u4F46 \u5165\u94FE>0)",
          position: { start: 0, end: 0 },
          severity: "low",
          isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${filePath}-leaf`)
        });
      }
    }
    return issues;
  }
  resolveLinkPath(currentFilePath, link) {
    const dir = currentFilePath.substring(0, currentFilePath.lastIndexOf("/"));
    return `${dir}/${link}.md`;
  }
};
var PredicateConsistencyRule = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.id = "predicate-consistency";
    this.name = "\u5173\u7CFB\u8C13\u8BED\u4E00\u81F4\u6027\u68C0\u67E5";
    this.description = "\u9F13\u52B1`key:: [[Link]]`\u7684\u89C4\u8303\u4F7F\u7528";
  }
  async check() {
    const issues = [];
    const files = this.app.vault.getMarkdownFiles();
    const predicateMap = /* @__PURE__ */ new Map();
    for (const file of files) {
      if (this.plugin.settings.excludedFolders.some((folder) => file.path.startsWith(folder))) {
        continue;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.plugin.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.plugin.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
          continue;
        }
      }
      const content = await this.app.vault.read(file);
      const predicateRegex = /([\u4e00-\u9fa5\w-]+)::/g;
      let match;
      while ((match = predicateRegex.exec(content)) !== null) {
        const predicate = match[1];
        const position = { start: match.index, end: match.index + match[0].length };
        const start = Math.max(0, position.start - 50);
        const end = Math.min(content.length, position.end + 50);
        const contextPreview = content.substring(start, end);
        if (!predicateMap.has(predicate)) {
          predicateMap.set(predicate, { count: 0, locations: [] });
        }
        const predicateInfo = predicateMap.get(predicate);
        predicateInfo.count++;
        predicateInfo.locations.push({
          filePath: file.path,
          fileName: file.name,
          position,
          contextPreview
        });
      }
    }
    for (const [predicate, info] of predicateMap.entries()) {
      const threshold = this.plugin.settings.predicateUsageThreshold || 1;
      if (info.count < threshold) {
        for (const location of info.locations) {
          issues.push({
            id: `${this.id}-${predicate}-${location.filePath}-${location.position.start}`,
            ruleId: this.id,
            filePath: location.filePath,
            fileName: location.fileName,
            contextPreview: this.plugin.settings.language === "en" ? `Predicate "${predicate}" has low usage (${info.count} times): ${location.contextPreview}` : `\u8C13\u8BED "${predicate}" \u4F7F\u7528\u9891\u7387\u8FC7\u4F4E (${info.count} \u6B21): ${location.contextPreview}`,
            position: location.position,
            severity: "low",
            isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${predicate}-${location.filePath}-${location.position.start}`)
          });
        }
      }
      const checkedPairs = /* @__PURE__ */ new Set();
      for (const [otherPredicate, otherInfo] of predicateMap.entries()) {
        if (predicate !== otherPredicate && this.isSimilar(predicate, otherPredicate)) {
          const pairKey = [predicate, otherPredicate].sort().join("|");
          if (!checkedPairs.has(pairKey)) {
            checkedPairs.add(pairKey);
            if (info.locations.length > 0) {
              const firstLocation = info.locations[0];
              issues.push({
                id: `${this.id}-${predicate}-${otherPredicate}`,
                ruleId: this.id,
                filePath: firstLocation.filePath,
                fileName: firstLocation.fileName,
                contextPreview: this.plugin.settings.language === "en" ? `Predicate "${predicate}" and "${otherPredicate}" may have spelling similarity` : `\u8C13\u8BED "${predicate}" \u4E0E "${otherPredicate}" \u53EF\u80FD\u5B58\u5728\u62FC\u5199\u76F8\u4F3C\u6027`,
                position: firstLocation.position,
                severity: "low",
                isIgnored: this.plugin.settings.ignoredIssues.includes(`${this.id}-${predicate}-${otherPredicate}`)
              });
            }
          }
        }
      }
    }
    return issues;
  }
  isSimilar(str1, str2) {
    const distance = this.levenshteinDistance(str1, str2);
    const maxLength = Math.max(str1.length, str2.length);
    if (maxLength === 0)
      return true;
    const similarity = 1 - distance / maxLength;
    return similarity >= 0.7;
  }
  /**
   * 计算两个字符串之间的Levenshtein距离
   * 支持中英文字符
   * @param str1 第一个字符串
   * @param str2 第二个字符串
   * @returns 两个字符串之间的编辑距离
   */
  levenshteinDistance(str1, str2) {
    const m = str1.length;
    const n = str2.length;
    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));
    for (let i = 0; i <= m; i++) {
      dp[i][0] = i;
    }
    for (let j = 0; j <= n; j++) {
      dp[0][j] = j;
    }
    for (let i = 1; i <= m; i++) {
      for (let j = 1; j <= n; j++) {
        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;
        dp[i][j] = Math.min(
          dp[i - 1][j] + 1,
          // 删除
          dp[i][j - 1] + 1,
          // 插入
          dp[i - 1][j - 1] + cost
          // 替换
        );
      }
    }
    return dp[m][n];
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  requiredMetadataFields: ["type", "status", "domain"],
  maxNoteLength: 1500,
  minContextLength: 50,
  excludedFolders: [],
  excludedTags: [],
  ignoredIssues: [],
  exportTemplate: '{"instruction": "\u8BF7\u6839\u636E\u4EE5\u4E0B\u5185\u5BB9\u751F\u6210\u77E5\u8BC6\u56FE\u8C31\u8282\u70B9\u548C\u5173\u7CFB", "input": {"content": {{content}}, "fileName": {{fileName}}, "filePath": {{filePath}}, "frontmatter": {{frontmatter}}}, "output": {"tags": {{tags}}, "type": {{type}}, "links": {{links}}, "headings": {{headings}}}}',
  knowledgeAtomTypes: ["atom", "concept", "entity"],
  language: "zh",
  ruleWeights: {
    "metadata-integrity": 5,
    "naked-links": 2,
    "graph-connectivity": 1,
    "note-atomicity": 0.8,
    "predicate-consistency": 0.5,
    "word-count-exceed": 0.1
  },
  predicateUsageThreshold: 1,
  lastDiagnosisTime: 0
};
var RuleRegistry = class {
  constructor() {
    this.rules = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (!RuleRegistry.instance) {
      RuleRegistry.instance = new RuleRegistry();
    }
    return RuleRegistry.instance;
  }
  registerRule(id, ruleClass) {
    this.rules.set(id, ruleClass);
  }
  getRules(plugin, app) {
    return Array.from(this.rules.values()).map((RuleClass) => new RuleClass(plugin, app));
  }
  getRuleIds() {
    return Array.from(this.rules.keys());
  }
};
var KnowledgeArkPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = null;
  }
  async onload() {
    await this.loadSettings();
    const ruleRegistry = RuleRegistry.getInstance();
    ruleRegistry.registerRule("metadata-integrity", MetadataIntegrityRule);
    ruleRegistry.registerRule("note-atomicity", NoteAtomicityRule);
    ruleRegistry.registerRule("naked-links", NakedLinksRule);
    ruleRegistry.registerRule("graph-connectivity", GraphConnectivityRule);
    ruleRegistry.registerRule("predicate-consistency", PredicateConsistencyRule);
    const ribbonIconTitle = this.settings.language === "en" ? "Knowledge Ark Diagnostic Center" : "\u77E5\u8BC6\u65B9\u821F\u8BCA\u65AD\u4E2D\u5FC3";
    const ribbonIconEl = this.addRibbonIcon("lucide-compass", ribbonIconTitle, (evt) => {
      this.activateView();
    });
    ribbonIconEl.addClass("knowledge-ark-ribbon-class");
    this.registerView(
      VIEW_TYPE,
      (leaf) => new KnowledgeArkView(leaf, this)
    );
    this.addSettingTab(new KnowledgeArkSettingTab(this.app, this));
    this.addCommand({
      id: "open-knowledge-ark-view",
      name: this.settings.language === "en" ? "Open Knowledge Ark Diagnostic Center" : "\u6253\u5F00\u77E5\u8BC6\u65B9\u821F\u8BCA\u65AD\u4E2D\u5FC3",
      callback: () => {
        this.activateView();
      }
    });
    this.createStatusBarItem();
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.updateStatusBarItem();
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", () => {
        this.updateStatusBarItem();
      })
    );
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE);
    if (this.statusBarItem) {
      this.statusBarItem.remove();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const existingLeaves = this.app.workspace.getLeavesOfType(VIEW_TYPE);
    if (existingLeaves.length > 0) {
      const existingLeaf = existingLeaves[0];
      this.app.workspace.revealLeaf(existingLeaf);
      return;
    }
    const leaf = this.app.workspace.getRightLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: VIEW_TYPE,
        active: true
      });
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async runDiagnostics(incremental = false) {
    const ruleRegistry = RuleRegistry.getInstance();
    const rules = ruleRegistry.getRules(this, this.app);
    const lastDiagnosisTime = this.settings.lastDiagnosisTime || 0;
    const allFiles = this.app.vault.getMarkdownFiles();
    let filesToCheck = allFiles;
    if (incremental) {
      filesToCheck = allFiles.filter((file) => {
        return file instanceof import_obsidian4.TFile && file.stat.mtime > lastDiagnosisTime;
      });
    }
    const rulePromises = rules.map(async (rule) => {
      try {
        const issues = await rule.check();
        if (incremental) {
          return issues.filter(
            (issue) => filesToCheck.some((file) => file.path === issue.filePath)
          );
        }
        return issues;
      } catch (error) {
        console.error(`Error running diagnostic rule ${rule.name}:`, error);
        return [];
      }
    });
    const results = await Promise.all(rulePromises);
    const allIssues = results.flat();
    if (incremental) {
      this.settings.lastDiagnosisTime = Date.now();
      await this.saveSettings();
    }
    return allIssues;
  }
  async exportHealthyNotes(issues) {
    const exporter = new DataExporter(this, this.app);
    await exporter.exportHealthyNotes(issues);
  }
  createStatusBarItem() {
    var _a;
    this.statusBarItem = super.addStatusBarItem();
    (_a = this.statusBarItem) == null ? void 0 : _a.addClass("knowledge-ark-status-bar");
    this.updateStatusBarItem();
  }
  async updateStatusBarItem() {
    if (!this.statusBarItem)
      return;
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || activeFile.extension !== "md") {
      this.statusBarItem.style.display = "none";
      return;
    }
    this.statusBarItem.style.display = "block";
    this.statusBarItem.textContent = this.settings.language === "en" ? "Diagnosing..." : "\u8BCA\u65AD\u4E2D...";
    try {
      const isExcludedByFolder = this.settings.excludedFolders.some(
        (folder) => activeFile.path.startsWith(folder + "/") || activeFile.path === folder
      );
      let isExcludedByTag = false;
      const cache = this.app.metadataCache.getFileCache(activeFile);
      if (cache && cache.frontmatter && cache.frontmatter.tags && this.settings.excludedTags.length > 0) {
        const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
        const normalizedExcludedTags = this.settings.excludedTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        const normalizedFileTags = fileTags.map(
          (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
        );
        isExcludedByTag = normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag));
      }
      if (isExcludedByFolder || isExcludedByTag) {
        this.statusBarItem.textContent = this.settings.language === "en" ? "\u2B55 Excluded Note" : "\u2B55 \u6392\u9664\u7B14\u8BB0";
        this.statusBarItem.title = this.settings.language === "en" ? "This note is excluded from diagnostics" : "\u8BE5\u7B14\u8BB0\u5DF2\u4ECE\u8BCA\u65AD\u4E2D\u6392\u9664";
        this.statusBarItem.style.color = "#6c757d";
        this.statusBarItem.onclick = () => {
          console.log(`Note ${activeFile.path} is excluded from diagnostics`);
        };
        return;
      }
      const issues = await this.getFileIssues(activeFile.path);
      if (issues.length === 0) {
        this.statusBarItem.textContent = this.settings.language === "en" ? "\u2705 Healthy Note" : "\u2705 \u5065\u5EB7\u7B14\u8BB0";
        this.statusBarItem.title = this.settings.language === "en" ? "This note has no issues" : "\u8BE5\u7B14\u8BB0\u6CA1\u6709\u53D1\u73B0\u95EE\u9898";
        this.statusBarItem.style.color = "#28a745";
      } else {
        const firstIssue = issues[0];
        const ruleName = this.getRuleDisplayName(firstIssue.ruleId);
        const severityIcon = this.getSeverityIcon(firstIssue.severity);
        this.statusBarItem.textContent = `${severityIcon} ${ruleName}`;
        this.statusBarItem.title = firstIssue.contextPreview;
        this.statusBarItem.style.color = this.getSeverityColor(firstIssue.severity);
      }
      this.statusBarItem.onclick = () => {
        this.activateViewAndNavigateToFile(activeFile.path);
      };
    } catch (error) {
      console.error("Error updating status bar:", error);
      this.statusBarItem.textContent = this.settings.language === "en" ? "\u274C Error" : "\u274C \u9519\u8BEF";
    }
  }
  async getFileIssues(filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (!file || !(file instanceof import_obsidian4.TFile)) {
      return [];
    }
    const isExcludedByFolder = this.settings.excludedFolders.some(
      (folder) => filePath.startsWith(folder + "/") || filePath === folder
    );
    if (isExcludedByFolder) {
      return [];
    }
    const cache = this.app.metadataCache.getFileCache(file);
    if (cache && cache.frontmatter && cache.frontmatter.tags && this.settings.excludedTags.length > 0) {
      const fileTags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : cache.frontmatter.tags.split(",").map((tag) => tag.trim());
      const normalizedExcludedTags = this.settings.excludedTags.map(
        (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
      );
      const normalizedFileTags = fileTags.map(
        (tag) => tag.startsWith("#") ? tag.substring(1).toLowerCase() : tag.toLowerCase()
      );
      if (normalizedFileTags.some((fileTag) => normalizedExcludedTags.includes(fileTag))) {
        return [];
      }
    }
    const savedResults = this.settings.savedDiagnosisResults;
    if (savedResults && savedResults.issues) {
      return savedResults.issues.filter((issue) => issue.filePath === filePath && !issue.isIgnored);
    }
    const ruleRegistry = RuleRegistry.getInstance();
    const rules = ruleRegistry.getRules(this, this.app);
    const fileIssues = [];
    for (const rule of rules) {
      try {
        const issues = await rule.check();
        fileIssues.push(...issues.filter((issue) => issue.filePath === filePath && !issue.isIgnored));
      } catch (error) {
        console.error(`Error running rule ${rule.id}:`, error);
      }
    }
    return fileIssues;
  }
  getRuleDisplayName(ruleId) {
    const ruleNames = {
      "metadata-integrity": this.settings.language === "en" ? "Metadata Issue" : "\u5143\u6570\u636E\u95EE\u9898",
      "note-atomicity": this.settings.language === "en" ? "Atomicity Issue" : "\u539F\u5B50\u5316\u95EE\u9898",
      "naked-links": this.settings.language === "en" ? "Link Issue" : "\u94FE\u63A5\u95EE\u9898",
      "graph-connectivity": this.settings.language === "en" ? "Connectivity Issue" : "\u8FDE\u63A5\u95EE\u9898",
      "predicate-consistency": this.settings.language === "en" ? "Predicate Issue" : "\u8C13\u8BCD\u95EE\u9898"
    };
    return ruleNames[ruleId] || ruleId;
  }
  getSeverityIcon(severity) {
    switch (severity) {
      case "high":
        return "\u{1F534}";
      case "medium":
        return "\u{1F7E1}";
      case "low":
        return "\u{1F535}";
      default:
        return "\u26AA";
    }
  }
  getSeverityColor(severity) {
    switch (severity) {
      case "high":
        return "#dc3545";
      case "medium":
        return "#ffc107";
      case "low":
        return "#17a2b8";
      default:
        return "#6c757d";
    }
  }
  async activateViewAndNavigateToFile(filePath) {
    await this.activateView();
    setTimeout(() => {
      const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE);
      if (leaves.length > 0) {
        const view = leaves[0].view;
        view.navigateToFile(filePath);
      }
    }, 100);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy92aWV3LnRzIiwgInNyYy9leHBvcnQudHMiLCAic3JjL2RpYWdub3N0aWMtcnVsZXMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEtub3dsZWRnZUFya1NldHRpbmdUYWIgfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0IHsgS25vd2xlZGdlQXJrVmlldywgVklFV19UWVBFIH0gZnJvbSAnLi92aWV3JztcclxuaW1wb3J0IHsgRGlhZ25vc3RpY1J1bGUsIERpYWdub3N0aWNJc3N1ZSwgS25vd2xlZGdlQXJrU2V0dGluZ3MgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgTWV0YWRhdGFJbnRlZ3JpdHlSdWxlLCBOb3RlQXRvbWljaXR5UnVsZSwgTmFrZWRMaW5rc1J1bGUsIEdyYXBoQ29ubmVjdGl2aXR5UnVsZSwgUHJlZGljYXRlQ29uc2lzdGVuY3lSdWxlIH0gZnJvbSAnLi9kaWFnbm9zdGljLXJ1bGVzJztcclxuaW1wb3J0IHsgRGF0YUV4cG9ydGVyIH0gZnJvbSAnLi9leHBvcnQnO1xyXG5cclxuLy8gRGVmYXVsdCBzZXR0aW5nc1xyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBLbm93bGVkZ2VBcmtTZXR0aW5ncyA9IHtcclxuXHRyZXF1aXJlZE1ldGFkYXRhRmllbGRzOiBbJ3R5cGUnLCAnc3RhdHVzJywgJ2RvbWFpbiddLFxyXG5cdG1heE5vdGVMZW5ndGg6IDE1MDAsXHJcblx0bWluQ29udGV4dExlbmd0aDogNTAsXHJcblx0ZXhjbHVkZWRGb2xkZXJzOiBbXSxcclxuXHRleGNsdWRlZFRhZ3M6IFtdLFxyXG5cdGlnbm9yZWRJc3N1ZXM6IFtdLFxyXG5cdGV4cG9ydFRlbXBsYXRlOiAne1wiaW5zdHJ1Y3Rpb25cIjogXCJcdThCRjdcdTY4MzlcdTYzNkVcdTRFRTVcdTRFMEJcdTUxODVcdTVCQjlcdTc1MUZcdTYyMTBcdTc3RTVcdThCQzZcdTU2RkVcdThDMzFcdTgyODJcdTcwQjlcdTU0OENcdTUxNzNcdTdDRkJcIiwgXCJpbnB1dFwiOiB7XCJjb250ZW50XCI6IHt7Y29udGVudH19LCBcImZpbGVOYW1lXCI6IHt7ZmlsZU5hbWV9fSwgXCJmaWxlUGF0aFwiOiB7e2ZpbGVQYXRofX0sIFwiZnJvbnRtYXR0ZXJcIjoge3tmcm9udG1hdHRlcn19fSwgXCJvdXRwdXRcIjoge1widGFnc1wiOiB7e3RhZ3N9fSwgXCJ0eXBlXCI6IHt7dHlwZX19LCBcImxpbmtzXCI6IHt7bGlua3N9fSwgXCJoZWFkaW5nc1wiOiB7e2hlYWRpbmdzfX19fScsXHJcblx0a25vd2xlZGdlQXRvbVR5cGVzOiBbJ2F0b20nLCAnY29uY2VwdCcsICdlbnRpdHknXSxcclxuXHRsYW5ndWFnZTogJ3poJyxcclxuXHRydWxlV2VpZ2h0czoge1xyXG5cdFx0J21ldGFkYXRhLWludGVncml0eSc6IDUuMCxcclxuXHRcdCduYWtlZC1saW5rcyc6IDIuMCxcclxuXHRcdCdncmFwaC1jb25uZWN0aXZpdHknOiAxLjAsXHJcblx0XHQnbm90ZS1hdG9taWNpdHknOiAwLjgsXHJcblx0XHQncHJlZGljYXRlLWNvbnNpc3RlbmN5JzogMC41LFxyXG5cdFx0J3dvcmQtY291bnQtZXhjZWVkJzogMC4xXHJcblx0fSxcclxuXHRwcmVkaWNhdGVVc2FnZVRocmVzaG9sZDogMSxcclxuXHRsYXN0RGlhZ25vc2lzVGltZTogMFxyXG59XHJcblxyXG4vLyBSdWxlIFJlZ2lzdHJ5XHJcbmV4cG9ydCBjbGFzcyBSdWxlUmVnaXN0cnkge1xyXG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBSdWxlUmVnaXN0cnk7XHJcbiAgcHJpdmF0ZSBydWxlczogTWFwPHN0cmluZywgbmV3IChwbHVnaW46IEtub3dsZWRnZUFya1BsdWdpbiwgYXBwOiBBcHApID0+IERpYWdub3N0aWNSdWxlPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBSdWxlUmVnaXN0cnkge1xyXG4gICAgaWYgKCFSdWxlUmVnaXN0cnkuaW5zdGFuY2UpIHtcclxuICAgICAgUnVsZVJlZ2lzdHJ5Lmluc3RhbmNlID0gbmV3IFJ1bGVSZWdpc3RyeSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJ1bGVSZWdpc3RyeS5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyUnVsZShpZDogc3RyaW5nLCBydWxlQ2xhc3M6IG5ldyAocGx1Z2luOiBLbm93bGVkZ2VBcmtQbHVnaW4sIGFwcDogQXBwKSA9PiBEaWFnbm9zdGljUnVsZSkge1xyXG4gICAgdGhpcy5ydWxlcy5zZXQoaWQsIHJ1bGVDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBnZXRSdWxlcyhwbHVnaW46IEtub3dsZWRnZUFya1BsdWdpbiwgYXBwOiBBcHApOiBEaWFnbm9zdGljUnVsZVtdIHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucnVsZXMudmFsdWVzKCkpLm1hcChSdWxlQ2xhc3MgPT4gbmV3IFJ1bGVDbGFzcyhwbHVnaW4sIGFwcCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UnVsZUlkcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnJ1bGVzLmtleXMoKSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLbm93bGVkZ2VBcmtQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBLbm93bGVkZ2VBcmtTZXR0aW5ncztcclxuXHRzdGF0dXNCYXJJdGVtOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuXHRcdC8vIFJlZ2lzdGVyIGRpYWdub3N0aWMgcnVsZXNcclxuXHRcdGNvbnN0IHJ1bGVSZWdpc3RyeSA9IFJ1bGVSZWdpc3RyeS5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0cnVsZVJlZ2lzdHJ5LnJlZ2lzdGVyUnVsZSgnbWV0YWRhdGEtaW50ZWdyaXR5JywgTWV0YWRhdGFJbnRlZ3JpdHlSdWxlKTtcclxuXHRcdHJ1bGVSZWdpc3RyeS5yZWdpc3RlclJ1bGUoJ25vdGUtYXRvbWljaXR5JywgTm90ZUF0b21pY2l0eVJ1bGUpO1xyXG5cdFx0cnVsZVJlZ2lzdHJ5LnJlZ2lzdGVyUnVsZSgnbmFrZWQtbGlua3MnLCBOYWtlZExpbmtzUnVsZSk7XHJcblx0XHRydWxlUmVnaXN0cnkucmVnaXN0ZXJSdWxlKCdncmFwaC1jb25uZWN0aXZpdHknLCBHcmFwaENvbm5lY3Rpdml0eVJ1bGUpO1xyXG5cdFx0cnVsZVJlZ2lzdHJ5LnJlZ2lzdGVyUnVsZSgncHJlZGljYXRlLWNvbnNpc3RlbmN5JywgUHJlZGljYXRlQ29uc2lzdGVuY3lSdWxlKTtcclxuXHJcblx0XHQvLyBDcmVhdGUgcmliYm9uIGljb25cclxuXHRcdGNvbnN0IHJpYmJvbkljb25UaXRsZSA9IHRoaXMuc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyAnS25vd2xlZGdlIEFyayBEaWFnbm9zdGljIENlbnRlcicgOiAnXHU3N0U1XHU4QkM2XHU2NUI5XHU4MjFGXHU4QkNBXHU2NUFEXHU0RTJEXHU1RkMzJztcclxuXHRcdGNvbnN0IHJpYmJvbkljb25FbCA9IHRoaXMuYWRkUmliYm9uSWNvbignbHVjaWRlLWNvbXBhc3MnLCByaWJib25JY29uVGl0bGUsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoKTtcclxuXHRcdH0pO1xyXG5cdFx0cmliYm9uSWNvbkVsLmFkZENsYXNzKCdrbm93bGVkZ2UtYXJrLXJpYmJvbi1jbGFzcycpO1xyXG5cclxuXHRcdC8vIFJlZ2lzdGVyIHZpZXdcclxuXHRcdHRoaXMucmVnaXN0ZXJWaWV3KFxyXG5cdFx0XHRWSUVXX1RZUEUsXHJcblx0XHRcdChsZWFmKSA9PiBuZXcgS25vd2xlZGdlQXJrVmlldyhsZWFmLCB0aGlzKVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyBBZGQgc2V0dGluZ3MgdGFiXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEtub3dsZWRnZUFya1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0XHQvLyBBZGQgY29tbWFuZCB0byBvcGVuIHRoZSB2aWV3XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ29wZW4ta25vd2xlZGdlLWFyay12aWV3JyxcclxuXHRcdFx0bmFtZTogdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdPcGVuIEtub3dsZWRnZSBBcmsgRGlhZ25vc3RpYyBDZW50ZXInIDogJ1x1NjI1M1x1NUYwMFx1NzdFNVx1OEJDNlx1NjVCOVx1ODIxRlx1OEJDQVx1NjVBRFx1NEUyRFx1NUZDMycsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gQWRkIHN0YXR1cyBiYXIgaXRlbSBmb3IgY3VycmVudCBub3RlIGRpYWdub3N0aWNzXHJcblx0XHR0aGlzLmNyZWF0ZVN0YXR1c0Jhckl0ZW0oKTtcclxuXHRcdFxyXG5cdFx0Ly8gTGlzdGVuIGZvciBhY3RpdmUgZmlsZSBjaGFuZ2VzXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMudXBkYXRlU3RhdHVzQmFySXRlbSgpO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHRcdFxyXG5cdFx0Ly8gTGlzdGVuIGZvciBmaWxlIG1vZGlmaWNhdGlvbnNcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAudmF1bHQub24oJ21vZGlmeScsICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVN0YXR1c0Jhckl0ZW0oKTtcclxuXHRcdFx0fSlcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBvbnVubG9hZCgpIHtcclxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoVklFV19UWVBFKTtcclxuXHRcdFxyXG5cdFx0Ly8gQ2xlYW4gdXAgc3RhdHVzIGJhciBpdGVtXHJcblx0XHRpZiAodGhpcy5zdGF0dXNCYXJJdGVtKSB7XHJcblx0XHRcdHRoaXMuc3RhdHVzQmFySXRlbS5yZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGFjdGl2YXRlVmlldygpIHtcclxuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGFscmVhZHkgb3BlblxyXG5cdFx0Y29uc3QgZXhpc3RpbmdMZWF2ZXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRSk7XHJcblx0XHRpZiAoZXhpc3RpbmdMZWF2ZXMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHQvLyBJZiB2aWV3IGV4aXN0cywganVzdCBhY3RpdmF0ZSBpdCBpbnN0ZWFkIG9mIHJlb3BlbmluZ1xyXG5cdFx0XHRjb25zdCBleGlzdGluZ0xlYWYgPSBleGlzdGluZ0xlYXZlc1swXTtcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYoZXhpc3RpbmdMZWFmKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHZpZXcgZG9lc24ndCBleGlzdCwgY3JlYXRlIGEgbmV3IG9uZVxyXG5cdFx0Y29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xyXG5cdFx0aWYgKGxlYWYpIHtcclxuXHRcdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG5cdFx0XHRcdHR5cGU6IFZJRVdfVFlQRSxcclxuXHRcdFx0XHRhY3RpdmU6IHRydWUsXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBydW5EaWFnbm9zdGljcyhpbmNyZW1lbnRhbDogYm9vbGVhbiA9IGZhbHNlKTogUHJvbWlzZTxEaWFnbm9zdGljSXNzdWVbXT4ge1xyXG5cdFx0Ly8gR2V0IHJ1bGVzIGZyb20gcmVnaXN0cnlcclxuXHRcdGNvbnN0IHJ1bGVSZWdpc3RyeSA9IFJ1bGVSZWdpc3RyeS5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0Y29uc3QgcnVsZXM6IERpYWdub3N0aWNSdWxlW10gPSBydWxlUmVnaXN0cnkuZ2V0UnVsZXModGhpcywgdGhpcy5hcHApO1xyXG5cclxuXHRcdC8vIEdldCB0aGUgbGFzdCBkaWFnbm9zaXMgdGltZSBmcm9tIHNldHRpbmdzXHJcblx0XHRjb25zdCBsYXN0RGlhZ25vc2lzVGltZSA9IHRoaXMuc2V0dGluZ3MubGFzdERpYWdub3Npc1RpbWUgfHwgMDtcclxuXHJcblx0XHQvLyBHZXQgYWxsIG1hcmtkb3duIGZpbGVzXHJcblx0XHRjb25zdCBhbGxGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuXHJcblx0XHQvLyBGaWx0ZXIgZmlsZXMgZm9yIGluY3JlbWVudGFsIGRpYWdub3Npc1xyXG5cdFx0bGV0IGZpbGVzVG9DaGVjayA9IGFsbEZpbGVzO1xyXG5cdFx0aWYgKGluY3JlbWVudGFsKSB7XHJcblx0XHRcdGZpbGVzVG9DaGVjayA9IGFsbEZpbGVzLmZpbHRlcihmaWxlID0+IHtcclxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGZpbGUgaXMgYSBURmlsZSBhbmQgY2hlY2sgaXRzIG1vZGlmaWNhdGlvbiB0aW1lXHJcblx0XHRcdFx0cmV0dXJuIGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBmaWxlLnN0YXQubXRpbWUgPiBsYXN0RGlhZ25vc2lzVGltZTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUnVuIGFsbCBkaWFnbm9zdGljIHJ1bGVzIGluIHBhcmFsbGVsXHJcblx0XHRjb25zdCBydWxlUHJvbWlzZXMgPSBydWxlcy5tYXAoYXN5bmMgKHJ1bGUpID0+IHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjb25zdCBpc3N1ZXMgPSBhd2FpdCBydWxlLmNoZWNrKCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gRmlsdGVyIGlzc3VlcyBmb3IgaW5jcmVtZW50YWwgZGlhZ25vc2lzXHJcblx0XHRcdFx0aWYgKGluY3JlbWVudGFsKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gaXNzdWVzLmZpbHRlcihpc3N1ZSA9PiBcclxuXHRcdFx0XHRcdFx0ZmlsZXNUb0NoZWNrLnNvbWUoZmlsZSA9PiBmaWxlLnBhdGggPT09IGlzc3VlLmZpbGVQYXRoKVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0cmV0dXJuIGlzc3VlcztcclxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBydW5uaW5nIGRpYWdub3N0aWMgcnVsZSAke3J1bGUubmFtZX06YCwgZXJyb3IpO1xyXG5cdFx0XHRcdHJldHVybiBbXTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gV2FpdCBmb3IgYWxsIHJ1bGVzIHRvIGNvbXBsZXRlXHJcblx0XHRjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocnVsZVByb21pc2VzKTtcclxuXHRcdFxyXG5cdFx0Ly8gRmxhdHRlbiB0aGUgcmVzdWx0cyBpbnRvIGEgc2luZ2xlIGFycmF5XHJcblx0XHRjb25zdCBhbGxJc3N1ZXMgPSByZXN1bHRzLmZsYXQoKTtcclxuXHJcblx0XHQvLyBVcGRhdGUgbGFzdCBkaWFnbm9zaXMgdGltZVxyXG5cdFx0aWYgKGluY3JlbWVudGFsKSB7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3MubGFzdERpYWdub3Npc1RpbWUgPSBEYXRlLm5vdygpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhbGxJc3N1ZXM7XHJcblx0fVxyXG5cclxuXHRhc3luYyBleHBvcnRIZWFsdGh5Tm90ZXMoaXNzdWVzOiBEaWFnbm9zdGljSXNzdWVbXSk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0Y29uc3QgZXhwb3J0ZXIgPSBuZXcgRGF0YUV4cG9ydGVyKHRoaXMsIHRoaXMuYXBwKTtcclxuXHRcdGF3YWl0IGV4cG9ydGVyLmV4cG9ydEhlYWx0aHlOb3Rlcyhpc3N1ZXMpO1xyXG5cdH1cclxuXHJcblx0Y3JlYXRlU3RhdHVzQmFySXRlbSgpIHtcclxuXHRcdHRoaXMuc3RhdHVzQmFySXRlbSA9IHN1cGVyLmFkZFN0YXR1c0Jhckl0ZW0oKTtcclxuXHRcdHRoaXMuc3RhdHVzQmFySXRlbT8uYWRkQ2xhc3MoJ2tub3dsZWRnZS1hcmstc3RhdHVzLWJhcicpO1xyXG5cdFx0dGhpcy51cGRhdGVTdGF0dXNCYXJJdGVtKCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyB1cGRhdGVTdGF0dXNCYXJJdGVtKCkge1xyXG5cdFx0aWYgKCF0aGlzLnN0YXR1c0Jhckl0ZW0pIHJldHVybjtcclxuXHJcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdGlmICghYWN0aXZlRmlsZSB8fCBhY3RpdmVGaWxlLmV4dGVuc2lvbiAhPT0gJ21kJykge1xyXG5cdFx0XHR0aGlzLnN0YXR1c0Jhckl0ZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3RhdHVzQmFySXRlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHRcdHRoaXMuc3RhdHVzQmFySXRlbS50ZXh0Q29udGVudCA9IHRoaXMuc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyAnRGlhZ25vc2luZy4uLicgOiAnXHU4QkNBXHU2NUFEXHU0RTJELi4uJztcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBDaGVjayBpZiBmaWxlIHNob3VsZCBiZSBleGNsdWRlZFxyXG5cdFx0XHRjb25zdCBpc0V4Y2x1ZGVkQnlGb2xkZXIgPSB0aGlzLnNldHRpbmdzLmV4Y2x1ZGVkRm9sZGVycy5zb21lKGZvbGRlciA9PiBcclxuXHRcdFx0XHRhY3RpdmVGaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIgKyAnLycpIHx8IGFjdGl2ZUZpbGUucGF0aCA9PT0gZm9sZGVyXHJcblx0XHRcdCk7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgaXNFeGNsdWRlZEJ5VGFnID0gZmFsc2U7XHJcblx0XHRcdGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZlRmlsZSk7XHJcblx0XHRcdGlmIChjYWNoZSAmJiBjYWNoZS5mcm9udG1hdHRlciAmJiBjYWNoZS5mcm9udG1hdHRlci50YWdzICYmIHRoaXMuc2V0dGluZ3MuZXhjbHVkZWRUYWdzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRjb25zdCBmaWxlVGFncyA9IEFycmF5LmlzQXJyYXkoY2FjaGUuZnJvbnRtYXR0ZXIudGFncykgXHJcblx0XHRcdFx0XHQ/IGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgXHJcblx0XHRcdFx0XHQ6IGNhY2hlLmZyb250bWF0dGVyLnRhZ3Muc3BsaXQoJywnKS5tYXAoKHRhZzogc3RyaW5nKSA9PiB0YWcudHJpbSgpKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjb25zdCBub3JtYWxpemVkRXhjbHVkZWRUYWdzID0gdGhpcy5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubWFwKCh0YWc6IHN0cmluZykgPT4gXHJcblx0XHRcdFx0XHR0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRGaWxlVGFncyA9IGZpbGVUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxyXG5cdFx0XHRcdFx0dGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpc0V4Y2x1ZGVkQnlUYWcgPSBub3JtYWxpemVkRmlsZVRhZ3Muc29tZSgoZmlsZVRhZzogc3RyaW5nKSA9PiBub3JtYWxpemVkRXhjbHVkZWRUYWdzLmluY2x1ZGVzKGZpbGVUYWcpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSGFuZGxlIGV4Y2x1ZGVkIGZpbGVzXHJcblx0XHRcdGlmIChpc0V4Y2x1ZGVkQnlGb2xkZXIgfHwgaXNFeGNsdWRlZEJ5VGFnKSB7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnRleHRDb250ZW50ID0gdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdcdTJCNTUgRXhjbHVkZWQgTm90ZScgOiAnXHUyQjU1IFx1NjM5Mlx1OTY2NFx1N0IxNFx1OEJCMCc7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnRpdGxlID0gdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyBcclxuXHRcdFx0XHRcdD8gJ1RoaXMgbm90ZSBpcyBleGNsdWRlZCBmcm9tIGRpYWdub3N0aWNzJyBcclxuXHRcdFx0XHRcdDogJ1x1OEJFNVx1N0IxNFx1OEJCMFx1NURGMlx1NEVDRVx1OEJDQVx1NjVBRFx1NEUyRFx1NjM5Mlx1OTY2NCc7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnN0eWxlLmNvbG9yID0gJyM2Yzc1N2QnOyAvLyBcdTcwNzBcdTgyNzJcclxuXHRcdFx0XHR0aGlzLnN0YXR1c0Jhckl0ZW0ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0XHRcdC8vIFx1ODhBQlx1NjM5Mlx1OTY2NFx1NzY4NFx1NjU4N1x1NEVGNlx1NEUwRFx1OERGM1x1OEY2Q1x1NTIzMFx1OEJDQVx1NjVBRFx1ODlDNlx1NTZGRVxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYE5vdGUgJHthY3RpdmVGaWxlLnBhdGh9IGlzIGV4Y2x1ZGVkIGZyb20gZGlhZ25vc3RpY3NgKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gR2V0IGlzc3VlcyBmb3IgdGhlIGN1cnJlbnQgZmlsZVxyXG5cdFx0XHRjb25zdCBpc3N1ZXMgPSBhd2FpdCB0aGlzLmdldEZpbGVJc3N1ZXMoYWN0aXZlRmlsZS5wYXRoKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChpc3N1ZXMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnRleHRDb250ZW50ID0gdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdcdTI3MDUgSGVhbHRoeSBOb3RlJyA6ICdcdTI3MDUgXHU1MDY1XHU1RUI3XHU3QjE0XHU4QkIwJztcclxuXHRcdFx0XHR0aGlzLnN0YXR1c0Jhckl0ZW0udGl0bGUgPSB0aGlzLnNldHRpbmdzLmxhbmd1YWdlID09PSAnZW4nID8gJ1RoaXMgbm90ZSBoYXMgbm8gaXNzdWVzJyA6ICdcdThCRTVcdTdCMTRcdThCQjBcdTZDQTFcdTY3MDlcdTUzRDFcdTczQjBcdTk1RUVcdTk4OTgnO1xyXG5cdFx0XHRcdHRoaXMuc3RhdHVzQmFySXRlbS5zdHlsZS5jb2xvciA9ICcjMjhhNzQ1JztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBTaG93IHRoZSBmaXJzdCBpc3N1ZVxyXG5cdFx0XHRcdGNvbnN0IGZpcnN0SXNzdWUgPSBpc3N1ZXNbMF07XHJcblx0XHRcdFx0Y29uc3QgcnVsZU5hbWUgPSB0aGlzLmdldFJ1bGVEaXNwbGF5TmFtZShmaXJzdElzc3VlLnJ1bGVJZCk7XHJcblx0XHRcdFx0Y29uc3Qgc2V2ZXJpdHlJY29uID0gdGhpcy5nZXRTZXZlcml0eUljb24oZmlyc3RJc3N1ZS5zZXZlcml0eSk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnRleHRDb250ZW50ID0gYCR7c2V2ZXJpdHlJY29ufSAke3J1bGVOYW1lfWA7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnRpdGxlID0gZmlyc3RJc3N1ZS5jb250ZXh0UHJldmlldztcclxuXHRcdFx0XHR0aGlzLnN0YXR1c0Jhckl0ZW0uc3R5bGUuY29sb3IgPSB0aGlzLmdldFNldmVyaXR5Q29sb3IoZmlyc3RJc3N1ZS5zZXZlcml0eSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBjbGljayBoYW5kbGVyIHRvIG5hdmlnYXRlIHRvIHRoZSBpc3N1ZVxyXG5cdFx0XHR0aGlzLnN0YXR1c0Jhckl0ZW0ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLmFjdGl2YXRlVmlld0FuZE5hdmlnYXRlVG9GaWxlKGFjdGl2ZUZpbGUucGF0aCk7XHJcblx0XHRcdH07XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBzdGF0dXMgYmFyOicsIGVycm9yKTtcclxuXHRcdFx0dGhpcy5zdGF0dXNCYXJJdGVtLnRleHRDb250ZW50ID0gdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdcdTI3NEMgRXJyb3InIDogJ1x1Mjc0QyBcdTk1MTlcdThCRUYnO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgZ2V0RmlsZUlzc3VlcyhmaWxlUGF0aDogc3RyaW5nKTogUHJvbWlzZTxEaWFnbm9zdGljSXNzdWVbXT4ge1xyXG5cdFx0Ly8gQ2hlY2sgaWYgZmlsZSBzaG91bGQgYmUgZXhjbHVkZWRcclxuXHRcdGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xyXG5cdFx0aWYgKCFmaWxlIHx8ICEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgZmlsZSBpcyBpbiBleGNsdWRlZCBmb2xkZXJcclxuXHRcdGNvbnN0IGlzRXhjbHVkZWRCeUZvbGRlciA9IHRoaXMuc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoZm9sZGVyID0+IFxyXG5cdFx0XHRmaWxlUGF0aC5zdGFydHNXaXRoKGZvbGRlciArICcvJykgfHwgZmlsZVBhdGggPT09IGZvbGRlclxyXG5cdFx0KTtcclxuXHRcdGlmIChpc0V4Y2x1ZGVkQnlGb2xkZXIpIHtcclxuXHRcdFx0cmV0dXJuIFtdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGlmIGZpbGUgaGFzIGV4Y2x1ZGVkIHRhZ3NcclxuXHRcdGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcblx0XHRpZiAoY2FjaGUgJiYgY2FjaGUuZnJvbnRtYXR0ZXIgJiYgY2FjaGUuZnJvbnRtYXR0ZXIudGFncyAmJiB0aGlzLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdGNvbnN0IGZpbGVUYWdzID0gQXJyYXkuaXNBcnJheShjYWNoZS5mcm9udG1hdHRlci50YWdzKSBcclxuXHRcdFx0XHQ/IGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgXHJcblx0XHRcdFx0OiBjYWNoZS5mcm9udG1hdHRlci50YWdzLnNwbGl0KCcsJykubWFwKCh0YWc6IHN0cmluZykgPT4gdGFnLnRyaW0oKSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTY1MkZcdTYzMDFcdTVFMjYjXHU1NDhDXHU0RTBEXHU1RTI2I1x1NzY4NFx1NjgwN1x1N0I3RVx1NjgzQ1x1NUYwRlx1RkYwQ1x1NEUwRFx1NTMzQVx1NTIwNlx1NTkyN1x1NUMwRlx1NTE5OVxyXG5cdFx0XHRjb25zdCBub3JtYWxpemVkRXhjbHVkZWRUYWdzID0gdGhpcy5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubWFwKCh0YWc6IHN0cmluZykgPT4gXHJcblx0XHRcdFx0dGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXHJcblx0XHRcdCk7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBub3JtYWxpemVkRmlsZVRhZ3MgPSBmaWxlVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcclxuXHRcdFx0XHR0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChub3JtYWxpemVkRmlsZVRhZ3Muc29tZSgoZmlsZVRhZzogc3RyaW5nKSA9PiBub3JtYWxpemVkRXhjbHVkZWRUYWdzLmluY2x1ZGVzKGZpbGVUYWcpKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFtdO1xyXG5cdFx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBVc2UgY2FjaGVkIHJlc3VsdHMgaWYgYXZhaWxhYmxlIGFuZCByZWNlbnRcclxuXHRcdGNvbnN0IHNhdmVkUmVzdWx0cyA9IHRoaXMuc2V0dGluZ3Muc2F2ZWREaWFnbm9zaXNSZXN1bHRzO1xyXG5cdFx0aWYgKHNhdmVkUmVzdWx0cyAmJiBzYXZlZFJlc3VsdHMuaXNzdWVzKSB7XHJcblx0XHRcdHJldHVybiBzYXZlZFJlc3VsdHMuaXNzdWVzLmZpbHRlcihpc3N1ZSA9PiBpc3N1ZS5maWxlUGF0aCA9PT0gZmlsZVBhdGggJiYgIWlzc3VlLmlzSWdub3JlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIHJ1biBhIHF1aWNrIGRpYWdub3NpcyBmb3IgdGhpcyBmaWxlXHJcblx0XHRjb25zdCBydWxlUmVnaXN0cnkgPSBSdWxlUmVnaXN0cnkuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGNvbnN0IHJ1bGVzID0gcnVsZVJlZ2lzdHJ5LmdldFJ1bGVzKHRoaXMsIHRoaXMuYXBwKTtcclxuXHRcdGNvbnN0IGZpbGVJc3N1ZXM6IERpYWdub3N0aWNJc3N1ZVtdID0gW107XHJcblxyXG5cdFx0Zm9yIChjb25zdCBydWxlIG9mIHJ1bGVzKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0Y29uc3QgaXNzdWVzID0gYXdhaXQgcnVsZS5jaGVjaygpO1xyXG5cdFx0XHRcdGZpbGVJc3N1ZXMucHVzaCguLi5pc3N1ZXMuZmlsdGVyKGlzc3VlID0+IGlzc3VlLmZpbGVQYXRoID09PSBmaWxlUGF0aCAmJiAhaXNzdWUuaXNJZ25vcmVkKSk7XHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgcnVubmluZyBydWxlICR7cnVsZS5pZH06YCwgZXJyb3IpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZpbGVJc3N1ZXM7XHJcblx0fVxyXG5cclxuXHRnZXRSdWxlRGlzcGxheU5hbWUocnVsZUlkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdFx0Y29uc3QgcnVsZU5hbWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xyXG5cdFx0XHQnbWV0YWRhdGEtaW50ZWdyaXR5JzogdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdNZXRhZGF0YSBJc3N1ZScgOiAnXHU1MTQzXHU2NTcwXHU2MzZFXHU5NUVFXHU5ODk4JyxcclxuXHRcdFx0J25vdGUtYXRvbWljaXR5JzogdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdBdG9taWNpdHkgSXNzdWUnIDogJ1x1NTM5Rlx1NUI1MFx1NTMxNlx1OTVFRVx1OTg5OCcsXHJcblx0XHRcdCduYWtlZC1saW5rcyc6IHRoaXMuc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyAnTGluayBJc3N1ZScgOiAnXHU5NEZFXHU2M0E1XHU5NUVFXHU5ODk4JyxcclxuXHRcdFx0J2dyYXBoLWNvbm5lY3Rpdml0eSc6IHRoaXMuc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyAnQ29ubmVjdGl2aXR5IElzc3VlJyA6ICdcdThGREVcdTYzQTVcdTk1RUVcdTk4OTgnLFxyXG5cdFx0XHQncHJlZGljYXRlLWNvbnNpc3RlbmN5JzogdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdQcmVkaWNhdGUgSXNzdWUnIDogJ1x1OEMxM1x1OEJDRFx1OTVFRVx1OTg5OCdcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gcnVsZU5hbWVzW3J1bGVJZF0gfHwgcnVsZUlkO1xyXG5cdH1cclxuXHJcblx0Z2V0U2V2ZXJpdHlJY29uKHNldmVyaXR5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdFx0c3dpdGNoIChzZXZlcml0eSkge1xyXG5cdFx0XHRjYXNlICdoaWdoJzogcmV0dXJuICdcdUQ4M0RcdUREMzQnO1xyXG5cdFx0XHRjYXNlICdtZWRpdW0nOiByZXR1cm4gJ1x1RDgzRFx1REZFMSc7XHJcblx0XHRcdGNhc2UgJ2xvdyc6IHJldHVybiAnXHVEODNEXHVERDM1JztcclxuXHRcdFx0ZGVmYXVsdDogcmV0dXJuICdcdTI2QUEnO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0U2V2ZXJpdHlDb2xvcihzZXZlcml0eTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHRcdHN3aXRjaCAoc2V2ZXJpdHkpIHtcclxuXHRcdFx0Y2FzZSAnaGlnaCc6IHJldHVybiAnI2RjMzU0NSc7XHJcblx0XHRcdGNhc2UgJ21lZGl1bSc6IHJldHVybiAnI2ZmYzEwNyc7XHJcblx0XHRcdGNhc2UgJ2xvdyc6IHJldHVybiAnIzE3YTJiOCc7XHJcblx0XHRcdGRlZmF1bHQ6IHJldHVybiAnIzZjNzU3ZCc7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBhY3RpdmF0ZVZpZXdBbmROYXZpZ2F0ZVRvRmlsZShmaWxlUGF0aDogc3RyaW5nKSB7XHJcblx0XHRhd2FpdCB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG5cdFx0XHJcblx0XHQvLyBXYWl0IGEgYml0IGZvciB0aGUgdmlldyB0byBiZSByZWFkeVxyXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFKTtcclxuXHRcdFx0aWYgKGxlYXZlcy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0Y29uc3QgdmlldyA9IGxlYXZlc1swXS52aWV3IGFzIEtub3dsZWRnZUFya1ZpZXc7XHJcblx0XHRcdFx0dmlldy5uYXZpZ2F0ZVRvRmlsZShmaWxlUGF0aCk7XHJcblx0XHRcdH1cclxuXHRcdH0sIDEwMCk7XHJcblx0fVxyXG59IiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBLbm93bGVkZ2VBcmtQbHVnaW4gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IEtub3dsZWRnZUFya1NldHRpbmdzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBLbm93bGVkZ2VBcmtTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogS25vd2xlZGdlQXJrUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEtub3dsZWRnZUFya1BsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Ly8gTGFuZ3VhZ2UgdG9nZ2xlXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnXHU4QkVEXHU4QTAwIC8gTGFuZ3VhZ2UnKVxuXHRcdFx0LmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG5cdFx0XHRcdC5hZGRPcHRpb24oJ3poJywgJ1x1NEUyRFx1NjU4NycpXG5cdFx0XHRcdC5hZGRPcHRpb24oJ2VuJywgJ0VuZ2xpc2gnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgfHwgJ3poJylcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxhbmd1YWdlID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdGNvbnN0IGlzRW5nbGlzaCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmxhbmd1YWdlID09PSAnZW4nO1xuXHRcdGNvbnN0IHRpdGxlVGV4dCA9IGlzRW5nbGlzaCA/ICdLbm93bGVkZ2UgQXJrIERpYWdub3N0aWMgQ2VudGVyIFNldHRpbmdzJyA6ICdcdTc3RTVcdThCQzZcdTY1QjlcdTgyMUZcdThCQ0FcdTY1QURcdTRFMkRcdTVGQzNcdThCQkVcdTdGNkUnO1xuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHt0ZXh0OiB0aXRsZVRleHR9KTtcblxuXHRcdGNvbnN0IGdldExvY2FsaXplZFRleHQgPSAoemhUZXh0OiBzdHJpbmcsIGVuVGV4dDogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdHJldHVybiBpc0VuZ2xpc2ggPyBlblRleHQgOiB6aFRleHQ7XG5cdFx0XHR9O1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShnZXRMb2NhbGl6ZWRUZXh0KCdcdTVGQzVcdTU4NkJcdTUxNDNcdTY1NzBcdTYzNkVcdTVCNTdcdTZCQjUnLCAnUmVxdWlyZWQgTWV0YWRhdGEgRmllbGRzJykpXG5cdFx0XHQuc2V0RGVzYyhnZXRMb2NhbGl6ZWRUZXh0KCdcdThCRjdcdThGOTNcdTUxNjVcdTVGQzVcdTU4NkJcdTc2ODRcdTUxNDNcdTY1NzBcdTYzNkVcdTVCNTdcdTZCQjVcdUZGMENcdTc1MjhcdTkwMTdcdTUzRjdcdTUyMDZcdTk2OTQnLCAnUGxlYXNlIGVudGVyIHRoZSByZXF1aXJlZCBtZXRhZGF0YSBmaWVsZHMsIHNlcGFyYXRlZCBieSBjb21tYXMnKSlcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ3R5cGUsc3RhdHVzLGRvbWFpbicpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZXF1aXJlZE1ldGFkYXRhRmllbGRzLmpvaW4oJywnKSlcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlcXVpcmVkTWV0YWRhdGFGaWVsZHMgPSB2YWx1ZS5zcGxpdCgnLCcpLm1hcChzID0+IHMudHJpbSgpKS5maWx0ZXIocyA9PiBzLmxlbmd0aCA+IDApO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKGdldExvY2FsaXplZFRleHQoJ1x1NjcwMFx1NTkyN1x1N0IxNFx1OEJCMFx1OTU3Rlx1NUVBNicsICdNYXhpbXVtIE5vdGUgTGVuZ3RoJykpXG5cdFx0XHQuc2V0RGVzYyhnZXRMb2NhbGl6ZWRUZXh0KCdcdThEODVcdThGQzdcdTZCNjRcdTk1N0ZcdTVFQTZcdTc2ODRcdTdCMTRcdThCQjBcdTVDMDZcdTg4QUJcdTY4MDdcdThCQjBcdTRFM0FcdTk1RUVcdTk4OTgnLCAnTm90ZXMgZXhjZWVkaW5nIHRoaXMgbGVuZ3RoIHdpbGwgYmUgZmxhZ2dlZCBhcyBpc3N1ZXMnKSlcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJzE1MDAnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4Tm90ZUxlbmd0aC50b1N0cmluZygpKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgbnVtID0gcGFyc2VJbnQodmFsdWUpO1xuXHRcdFx0XHRcdGlmICghaXNOYU4obnVtKSkge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4Tm90ZUxlbmd0aCA9IG51bTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShnZXRMb2NhbGl6ZWRUZXh0KCdcdTY3MDBcdTVDMEZcdTRFMEFcdTRFMEJcdTY1ODdcdTk1N0ZcdTVFQTYnLCAnTWluaW11bSBDb250ZXh0IExlbmd0aCcpKVxuXHRcdFx0LnNldERlc2MoZ2V0TG9jYWxpemVkVGV4dCgnXHU2OEMwXHU2N0U1XHU4OEY4XHU5NEZFXHU2M0E1XHU2NUY2XHU3Njg0XHU0RTBBXHU0RTBCXHU2NTg3XHU5NTdGXHU1RUE2JywgJ0NvbnRleHQgbGVuZ3RoIHdoZW4gY2hlY2tpbmcgbmFrZWQgbGlua3MnKSlcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJzMwJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkNvbnRleHRMZW5ndGgudG9TdHJpbmcoKSlcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IG51bSA9IHBhcnNlSW50KHZhbHVlKTtcblx0XHRcdFx0XHRpZiAoIWlzTmFOKG51bSkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkNvbnRleHRMZW5ndGggPSBudW07XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoZ2V0TG9jYWxpemVkVGV4dCgnXHU2MzkyXHU5NjY0XHU2NTg3XHU0RUY2XHU1OTM5JywgJ0V4Y2x1ZGVkIEZvbGRlcnMnKSlcblx0XHRcdC5zZXREZXNjKGdldExvY2FsaXplZFRleHQoJ1x1OEJGN1x1OEY5M1x1NTE2NVx1ODk4MVx1NjM5Mlx1OTY2NFx1NzY4NFx1NjU4N1x1NEVGNlx1NTkzOVx1OERFRlx1NUY4NFx1RkYwQ1x1NzUyOFx1OTAxN1x1NTNGN1x1NTIwNlx1OTY5NCcsICdQbGVhc2UgZW50ZXIgdGhlIGZvbGRlciBwYXRocyB0byBleGNsdWRlLCBzZXBhcmF0ZWQgYnkgY29tbWFzJykpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCd0ZW1wbGF0ZXMsYXJjaGl2ZScpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZvbGRlcnMuam9pbignLCcpKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzID0gdmFsdWUuc3BsaXQoJywnKS5tYXAocyA9PiBzLnRyaW0oKSkuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwKTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShnZXRMb2NhbGl6ZWRUZXh0KCdcdTYzOTJcdTk2NjRcdTY4MDdcdTdCN0UnLCAnRXhjbHVkZWQgVGFncycpKVxuXHRcdFx0LnNldERlc2MoZ2V0TG9jYWxpemVkVGV4dCgnXHU4QkY3XHU4RjkzXHU1MTY1XHU4OTgxXHU2MzkyXHU5NjY0XHU3Njg0XHU2ODA3XHU3QjdFKHRhZ3MpXHVGRjBDXHU3NTI4XHU5MDE3XHU1M0Y3XHU1MjA2XHU5Njk0JywgJ1BsZWFzZSBlbnRlciB0aGUgdGFncyB0byBleGNsdWRlLCBzZXBhcmF0ZWQgYnkgY29tbWFzJykpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdkcmFmdCx0ZW1wbGF0ZScpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3Muam9pbignLCcpKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzID0gdmFsdWUuc3BsaXQoJywnKS5tYXAocyA9PiBzLnRyaW0oKSkuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwKTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShnZXRMb2NhbGl6ZWRUZXh0KCdcdTc3RTVcdThCQzZcdTUzOUZcdTVCNTBcdTdDN0JcdTU3OEInLCAnS25vd2xlZGdlIEF0b20gVHlwZXMnKSlcblx0XHRcdC5zZXREZXNjKGdldExvY2FsaXplZFRleHQoJ1x1OEJGN1x1OEY5M1x1NTE2NVx1ODhBQlx1ODlDNlx1NEUzQVx1NzdFNVx1OEJDNlx1NTM5Rlx1NUI1MFx1NzY4NFx1N0IxNFx1OEJCMFx1N0M3Qlx1NTc4Qih0eXBlKVx1RkYwQ1x1NzUyOFx1OTAxN1x1NTNGN1x1NTIwNlx1OTY5NCcsICdQbGVhc2UgZW50ZXIgdGhlIG5vdGUgdHlwZXMgKHR5cGUpIGNvbnNpZGVyZWQgYXMga25vd2xlZGdlIGF0b21zLCBzZXBhcmF0ZWQgYnkgY29tbWFzJykpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdhdG9tLGNvbmNlcHQsZW50aXR5Jylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmtub3dsZWRnZUF0b21UeXBlcy5qb2luKCcsJykpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5rbm93bGVkZ2VBdG9tVHlwZXMgPSB2YWx1ZS5zcGxpdCgnLCcpLm1hcChzID0+IHMudHJpbSgpKS5maWx0ZXIocyA9PiBzLmxlbmd0aCA+IDApO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKGdldExvY2FsaXplZFRleHQoJ1x1OEMxM1x1OEJFRFx1NEY3Rlx1NzUyOFx1OTg5MVx1NzM4N1x1OTYwOFx1NTAzQycsICdQcmVkaWNhdGUgVXNhZ2UgVGhyZXNob2xkJykpXG5cdFx0XHQuc2V0RGVzYyhnZXRMb2NhbGl6ZWRUZXh0KCdcdTRGNEVcdTRFOEVcdTZCNjRcdTRGN0ZcdTc1MjhcdTZCMjFcdTY1NzBcdTc2ODRcdThDMTNcdThCRURcdTVDMDZcdTg4QUJcdTY4MDdcdThCQjBcdTRFM0FcdTRGN0ZcdTc1MjhcdTk4OTFcdTczODdcdThGQzdcdTRGNEVcdUZGMDhcdThCQkVcdTRFM0EwXHU1M0VGXHU3OTgxXHU3NTI4XHU2QjY0XHU2OEMwXHU2N0U1XHVGRjA5JywgJ1ByZWRpY2F0ZXMgd2l0aCB1c2FnZSBjb3VudCBiZWxvdyB0aGlzIHRocmVzaG9sZCB3aWxsIGJlIGZsYWdnZWQgYXMgbG93IHVzYWdlIChzZXQgdG8gMCB0byBkaXNhYmxlIHRoaXMgY2hlY2spJykpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCcxJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWRpY2F0ZVVzYWdlVGhyZXNob2xkLnRvU3RyaW5nKCkpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRjb25zdCBudW0gPSBwYXJzZUludCh2YWx1ZSk7XG5cdFx0XHRcdFx0aWYgKCFpc05hTihudW0pICYmIG51bSA+PSAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVkaWNhdGVVc2FnZVRocmVzaG9sZCA9IG51bTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShnZXRMb2NhbGl6ZWRUZXh0KCdcdTVCRkNcdTUxRkFcdTZBMjFcdTY3N0YnLCAnRXhwb3J0IFRlbXBsYXRlJykpXG5cdFx0XHQuc2V0RGVzYyhnZXRMb2NhbGl6ZWRUZXh0KCdcdThCQkVcdTdGNkVcdTVCRkNcdTUxRkFKU09OTFx1NzY4NFx1NkEyMVx1Njc3RicsICdTZXQgdGhlIHRlbXBsYXRlIGZvciBleHBvcnRpbmcgSlNPTkwnKSlcblx0XHRcdC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHtcblx0XHRcdFx0dGV4dFxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcigne1wiY29udGVudFwiOiBcInt7Y29udGVudH19XCIsIFwidGFnc1wiOiBcInt7dGFnc319XCIsIFwidHlwZVwiOiBcInt7dHlwZX19XCJ9Jylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhwb3J0VGVtcGxhdGUpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhwb3J0VGVtcGxhdGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR0ZXh0LmlucHV0RWwucm93cyA9IDQ7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5jb2xzID0gNTA7XG5cdFx0XHR9KTtcblxuXHRcdC8vIEFkZCBzZWN0aW9uIGZvciBtYW5hZ2luZyBpZ25vcmVkIGlzc3Vlc1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoZ2V0TG9jYWxpemVkVGV4dCgnXHU3NjdEXHU1NDBEXHU1MzU1XHU3QkExXHU3NDA2JywgJ1doaXRlbGlzdCBNYW5hZ2VtZW50JykpXG5cdFx0XHQuc2V0RGVzYyhnZXRMb2NhbGl6ZWRUZXh0KCdcdTRFRTVcdTRFMEJcdTk1RUVcdTk4OThcdTVERjJcdTg4QUJcdTZERkJcdTUyQTBcdTUyMzBcdTc2N0RcdTU0MERcdTUzNTVcdTRFMkRcdUZGMENcdTRFMERcdTRGMUFcdTU3MjhcdThCQ0FcdTY1QURcdTRFMkRcdTY2M0VcdTc5M0FcdTMwMDInLCAnVGhlIGZvbGxvd2luZyBpc3N1ZXMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSB3aGl0ZWxpc3QgYW5kIHdpbGwgbm90IGJlIGRpc3BsYXllZCBpbiB0aGUgZGlhZ25vc2lzLicpKTtcblxuXHRcdC8vIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgaWdub3JlZCBpc3N1ZXNcblx0XHRjb25zdCBpZ25vcmVkSXNzdWVzQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAna25vd2xlZGdlLWFyay1pZ25vcmVkLWlzc3VlcycgfSk7XG5cblx0XHQvLyBGdW5jdGlvbiB0byByZW5kZXIgaWdub3JlZCBpc3N1ZXNcblx0XHRjb25zdCByZW5kZXJJZ25vcmVkSXNzdWVzID0gKCkgPT4ge1xuXHRcdFx0aWdub3JlZElzc3Vlc0NvbnRhaW5lci5lbXB0eSgpO1xuXG5cdFx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0aWdub3JlZElzc3Vlc0NvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogZ2V0TG9jYWxpemVkVGV4dCgnXHU2NjgyXHU2NUUwXHU4OEFCXHU1RkZEXHU3NTY1XHU3Njg0XHU5NUVFXHU5ODk4XHUzMDAyJywgJ05vIGlnbm9yZWQgaXNzdWVzLicpIH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBcIlJlbW92ZSBBbGxcIiBidXR0b25cblx0XHRcdGNvbnN0IHJlbW92ZUFsbEJ1dHRvbiA9IGlnbm9yZWRJc3N1ZXNDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHtcblx0XHRcdFx0dGV4dDogZ2V0TG9jYWxpemVkVGV4dCgnXHU1MTY4XHU5MEU4XHU3OUZCXHU5NjY0JywgJ1JlbW92ZSBBbGwnKSxcblx0XHRcdFx0Y2xzOiAna25vd2xlZGdlLWFyay1pZ25vcmVkLWlzc3VlLWJ1dHRvbidcblx0XHRcdH0pO1xuXHRcdFx0cmVtb3ZlQWxsQnV0dG9uLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxMHB4JztcblxuXHRcdFx0cmVtb3ZlQWxsQnV0dG9uLm9uQ2xpY2tFdmVudChhc3luYyAoKSA9PiB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMgPSBbXTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdHJlbmRlcklnbm9yZWRJc3N1ZXMoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRjb25zdCBsaXN0RWwgPSBpZ25vcmVkSXNzdWVzQ29udGFpbmVyLmNyZWF0ZUVsKCd1bCcpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmVkSXNzdWVzLmZvckVhY2goKGlzc3VlSWQsIGluZGV4KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGl0ZW1FbCA9IGxpc3RFbC5jcmVhdGVFbCgnbGknLCB7IGNsczogJ2tub3dsZWRnZS1hcmstaWdub3JlZC1pc3N1ZS1pdGVtJyB9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IGlzc3VlVGV4dEVsID0gaXRlbUVsLmNyZWF0ZUVsKCdzcGFuJywgeyBcblx0XHRcdFx0XHR0ZXh0OiBpc3N1ZUlkLFxuXHRcdFx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstaWdub3JlZC1pc3N1ZS10ZXh0JyBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zdCB1bmlnbm9yZUJ1dHRvbkVsID0gaXRlbUVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuXHRcdFx0XHRcdFx0dGV4dDogZ2V0TG9jYWxpemVkVGV4dCgnXHU3OUZCXHU5NjY0JywgJ1JlbW92ZScpLFxuXHRcdFx0XHRcdFx0Y2xzOiAna25vd2xlZGdlLWFyay1pZ25vcmVkLWlzc3VlLWJ1dHRvbicgXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR1bmlnbm9yZUJ1dHRvbkVsLm9uQ2xpY2tFdmVudChhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGlzc3VlIGZyb20gaWdub3JlZElzc3Vlc1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBSZS1yZW5kZXIgdGhlIGxpc3Rcblx0XHRcdFx0XHRyZW5kZXJJZ25vcmVkSXNzdWVzKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdC8vIEluaXRpYWwgcmVuZGVyXG5cdFx0cmVuZGVySWdub3JlZElzc3VlcygpO1xuXG5cdFx0Ly8gQWRkIHNlY3Rpb24gZm9yIHJ1bGUgd2VpZ2h0cyBjb25maWd1cmF0aW9uXG5cdFx0Y29uc3Qgd2VpZ2h0c1RpdGxlID0gZ2V0TG9jYWxpemVkVGV4dCgnXHU4QkNBXHU2NUFEXHU4OUM0XHU1MjE5XHU2NzQzXHU5MUNEXHU5MTREXHU3RjZFJywgJ0RpYWdub3N0aWMgUnVsZSBXZWlnaHRzIENvbmZpZ3VyYXRpb24nKTtcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6IHdlaWdodHNUaXRsZSB9KTtcblxuXHRcdGNvbnN0IHdlaWdodHNEZXNjcmlwdGlvbiA9IGdldExvY2FsaXplZFRleHQoXG5cdFx0XHQnXHU0RTNBXHU2QkNGXHU0RTJBXHU4QkNBXHU2NUFEXHU4OUM0XHU1MjE5XHU4QkJFXHU3RjZFXHU1MzU1XHU5ODc5XHU2MjYzXHU1MjA2XHU1MDNDXHUzMDAyXHU2MjYzXHU1MjA2XHU1MDNDXHU4RDhBXHU5QUQ4XHVGRjBDXHU4QkU1XHU5NUVFXHU5ODk4XHU1QkY5XHU1MDY1XHU1RUI3XHU1RUE2XHU2MDNCXHU1MjA2XHU3Njg0XHU1RjcxXHU1NENEXHU4RDhBXHU1OTI3XHUzMDAyJyxcblx0XHRcdCdTZXQgdGhlIHBlbmFsdHkgcG9pbnRzIGZvciBlYWNoIGRpYWdub3N0aWMgcnVsZS4gSGlnaGVyIHBlbmFsdHkgcG9pbnRzIG1lYW4gdGhlIGlzc3VlIHdpbGwgaGF2ZSBhIGdyZWF0ZXIgaW1wYWN0IG9uIHRoZSBoZWFsdGggc2NvcmUuJ1xuXHRcdCk7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IHdlaWdodHNEZXNjcmlwdGlvbiB9KTtcblxuXHRcdC8vIERlZmluZSB0aGUgcnVsZSB3ZWlnaHRzIHdpdGggdGhlaXIgZGVmYXVsdCB2YWx1ZXMgYW5kIGRlc2NyaXB0aW9uc1xuXHRcdGNvbnN0IHJ1bGVXZWlnaHRzQ29uZmlnID0gW1xuXHRcdFx0eyBpZDogJ21ldGFkYXRhLWludGVncml0eScsIG5hbWU6IGdldExvY2FsaXplZFRleHQoJ1x1NTE0M1x1NjU3MFx1NjM2RVx1NUI4Q1x1NjU3NFx1NjAyN1x1NjhDMFx1NjdFNScsICdNZXRhZGF0YSBJbnRlZ3JpdHkgQ2hlY2snKSwgZGVmYXVsdDogNS4wIH0sXG5cdFx0XHR7IGlkOiAnbmFrZWQtbGlua3MnLCBuYW1lOiBnZXRMb2NhbGl6ZWRUZXh0KCdcdTg4RjhcdTk0RkVcdTYzQTVcdTY4QzBcdTY3RTUnLCAnTmFrZWQgTGlua3MgQ2hlY2snKSwgZGVmYXVsdDogMi4wIH0sXG5cdFx0XHR7IGlkOiAnZ3JhcGgtY29ubmVjdGl2aXR5JywgbmFtZTogZ2V0TG9jYWxpemVkVGV4dCgnXHU3N0U1XHU4QkM2XHU1NkZFXHU4QzMxXHU4RkRFXHU2M0E1XHU2MDI3XHU2OEMwXHU2N0U1JywgJ0tub3dsZWRnZSBHcmFwaCBDb25uZWN0aXZpdHkgQ2hlY2snKSwgZGVmYXVsdDogMS4wIH0sXG5cdFx0XHR7IGlkOiAnbm90ZS1hdG9taWNpdHknLCBuYW1lOiBnZXRMb2NhbGl6ZWRUZXh0KCdcdTdCMTRcdThCQjBcdTUzOUZcdTVCNTBcdTUzMTZcdTdBMEJcdTVFQTZcdTY4QzBcdTY3RTUnLCAnTm90ZSBBdG9taWNpdHkgQ2hlY2snKSwgZGVmYXVsdDogMC44IH0sXG5cdFx0XHR7IGlkOiAncHJlZGljYXRlLWNvbnNpc3RlbmN5JywgbmFtZTogZ2V0TG9jYWxpemVkVGV4dCgnXHU1MTczXHU3Q0ZCXHU4QzEzXHU4QkVEXHU0RTAwXHU4MUY0XHU2MDI3XHU2OEMwXHU2N0U1JywgJ1ByZWRpY2F0ZSBDb25zaXN0ZW5jeSBDaGVjaycpLCBkZWZhdWx0OiAwLjUgfSxcblx0XHRcdHsgaWQ6ICd3b3JkLWNvdW50LWV4Y2VlZCcsIG5hbWU6IGdldExvY2FsaXplZFRleHQoJ1x1N0IxNFx1OEJCMFx1OTU3Rlx1NUVBNlx1OEQ4NVx1OTY1MCcsICdXb3JkIENvdW50IEV4Y2VlZCcpLCBkZWZhdWx0OiAwLjEgfVxuXHRcdF07XG5cblx0XHQvLyBDcmVhdGUgc2V0dGluZ3MgZm9yIGVhY2ggcnVsZSB3ZWlnaHRcblx0XHRmb3IgKGNvbnN0IHJ1bGUgb2YgcnVsZVdlaWdodHNDb25maWcpIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnJ1bGVXZWlnaHRzW3J1bGUuaWRdICE9PSB1bmRlZmluZWQgPyBcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucnVsZVdlaWdodHNbcnVsZS5pZF0gOiBydWxlLmRlZmF1bHQ7XG5cblx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0XHQuc2V0TmFtZShydWxlLm5hbWUpXG5cdFx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihydWxlLmRlZmF1bHQudG9TdHJpbmcoKSlcblx0XHRcdFx0XHQuc2V0VmFsdWUoY3VycmVudFZhbHVlLnRvU3RyaW5nKCkpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgbnVtID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRpZiAoIWlzTmFOKG51bSkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucnVsZVdlaWdodHNbcnVsZS5pZF0gPSBudW07XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pKTtcblx0XHR9XG5cdH1cbn0iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBNYXJrZG93blZpZXcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgS25vd2xlZGdlQXJrUGx1Z2luIGZyb20gJy4vbWFpbic7XG5pbXBvcnQgeyBEaWFnbm9zdGljSXNzdWUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IERhdGFFeHBvcnRlciB9IGZyb20gJy4vZXhwb3J0JztcbmltcG9ydCB7IFJ1bGVSZWdpc3RyeSB9IGZyb20gJy4vbWFpbic7XG5pbXBvcnQgeyBEaWFnbm9zdGljUnVsZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBBZGQgQ1NTIHN0eWxlcyBmb3IgaGVhbHRoIHNjb3JlIGNvbG9yc1xuY29uc3QgYWRkSGVhbHRoU2NvcmVTdHlsZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHN0eWxlSWQgPSAna25vd2xlZGdlLWFyay1oZWFsdGgtc2NvcmUtc3R5bGVzJztcbiAgXG4gIC8vIENoZWNrIGlmIHN0eWxlcyBhbHJlYWR5IGV4aXN0XG4gIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdHlsZUlkKSkgcmV0dXJuO1xuICBcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS5pZCA9IHN0eWxlSWQ7XG4gIHN0eWxlLnRleHRDb250ZW50ID0gYFxuICAgIC5rbm93bGVkZ2UtYXJrLXNjb3JlLnNjb3JlLWhlYWx0aHkge1xuICAgICAgY29sb3I6ICMyOGE3NDUgIWltcG9ydGFudDsgLyogR3JlZW4gKi9cbiAgICAgIGZvbnQtc2l6ZTogMS4yZW0gIWltcG9ydGFudDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XG4gICAgfVxuICAgIFxuICAgIC5rbm93bGVkZ2UtYXJrLXNjb3JlLnNjb3JlLXdhcm5pbmcge1xuICAgICAgY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDsgLyogWWVsbG93ICovXG4gICAgICBmb250LXNpemU6IDEuMmVtICFpbXBvcnRhbnQ7XG4gICAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xuICAgIH1cbiAgICBcbiAgICAua25vd2xlZGdlLWFyay1zY29yZS5zY29yZS1jcml0aWNhbCB7XG4gICAgICBjb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50OyAvKiBSZWQgKi9cbiAgICAgIGZvbnQtc2l6ZTogMS4yZW0gIWltcG9ydGFudDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XG4gICAgfVxuICBgO1xuICBcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG59O1xuXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBhZGQgc3R5bGVzIHdoZW4gdGhlIG1vZHVsZSBsb2Fkc1xuYWRkSGVhbHRoU2NvcmVTdHlsZXMoKTtcblxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRSA9ICdrbm93bGVkZ2UtYXJrLXZpZXcnO1xuXG5leHBvcnQgY2xhc3MgS25vd2xlZGdlQXJrVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcblx0cGx1Z2luOiBLbm93bGVkZ2VBcmtQbHVnaW47XG5cblx0Y29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luOiBLbm93bGVkZ2VBcmtQbHVnaW4pIHtcblx0XHRzdXBlcihsZWFmKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGdldFZpZXdUeXBlKCkge1xuXHRcdHJldHVybiBWSUVXX1RZUEU7XG5cdH1cblxuXHRnZXREaXNwbGF5VGV4dCgpIHtcblx0XHRjb25zdCBpc0VuZ2xpc2ggPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJztcblx0XHRyZXR1cm4gaXNFbmdsaXNoID8gJ0tub3dsZWRnZSBBcmsgRGlhZ25vc3RpYyBDZW50ZXInIDogJ1x1NzdFNVx1OEJDNlx1NjVCOVx1ODIxRlx1OEJDQVx1NjVBRFx1NEUyRFx1NUZDMyc7XG5cdH1cblxuXHRnZXRJY29uKCkge1xuXHRcdHJldHVybiAnbHVjaWRlLWNvbXBhc3MnO1xuXHR9XG5cblx0YXN5bmMgb25PcGVuKCkge1xuXHRcdGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV07XG5cdFx0Y29uc3QgaXNFbmdsaXNoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbic7XG5cdFx0XG5cdFx0Y29udGFpbmVyLmVtcHR5KCk7XG5cdFx0Y29udGFpbmVyLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogaXNFbmdsaXNoID8gJ0tub3dsZWRnZSBBcmsgRGlhZ25vc3RpYyBDZW50ZXInIDogJ1x1NzdFNVx1OEJDNlx1NjVCOVx1ODIxRlx1OEJDQVx1NjVBRFx1NEUyRFx1NUZDMycgfSk7XG5cblx0XHQvLyBDcmVhdGUgZGFzaGJvYXJkIGhlYWRlclxuXHRcdGNvbnN0IGhlYWRlckVsID0gY29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2tub3dsZWRnZS1hcmstaGVhZGVyJyB9KTtcblx0XHRcblx0XHQvLyBTdGFydCBkaWFnbm9zaXMgYnV0dG9uXG5cdFx0Y29uc3QgZGlhZ25vc2VCdXR0b24gPSBoZWFkZXJFbC5jcmVhdGVFbCgnYnV0dG9uJywgeyBcblx0XHRcdHRleHQ6IGlzRW5nbGlzaCA/ICdTdGFydCBGdWxsIERpYWdub3NpcycgOiAnXHU1RjAwXHU1OUNCXHU1MTY4XHU5NzYyXHU4QkNBXHU2NUFEJywgXG5cdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWJ1dHRvbiBwcmltYXJ5JyBcblx0XHR9KTtcblx0XHRcblx0XHQvLyBTdGFydCBpbmNyZW1lbnRhbCBkaWFnbm9zaXMgYnV0dG9uXG5cdFx0Y29uc3QgaW5jcmVtZW50YWxEaWFnbm9zZUJ1dHRvbiA9IGhlYWRlckVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuXHRcdFx0dGV4dDogaXNFbmdsaXNoID8gJ1N0YXJ0IEluY3JlbWVudGFsIERpYWdub3NpcycgOiAnXHU2NUIwXHU1ODlFXHU3QjE0XHU4QkIwXHU4QkNBXHU2NUFEJywgXG5cdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWJ1dHRvbiBwcmltYXJ5JyBcblx0XHR9KTtcblx0XHRcblx0XHQvLyBFeHBvcnQgYnV0dG9uXG5cdFx0Y29uc3QgZXhwb3J0QnV0dG9uID0gaGVhZGVyRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgXG5cdFx0XHR0ZXh0OiBpc0VuZ2xpc2ggPyAnRXhwb3J0IEhlYWx0aHkgTm90ZXMnIDogJ1x1NUJGQ1x1NTFGQVx1NTA2NVx1NUVCN1x1N0IxNFx1OEJCMCcsIFxuXHRcdFx0Y2xzOiAna25vd2xlZGdlLWFyay1idXR0b24gc2Vjb25kYXJ5JyBcblx0XHR9KTtcblx0XHRcblx0XHQvLyBNZXRyaWNzIGRpc3BsYXlcblx0XHRjb25zdCBtZXRyaWNzRWwgPSBoZWFkZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLW1ldHJpY3MnIH0pO1xuXHRcdGNvbnN0IHNjb3JlRWwgPSBtZXRyaWNzRWwuY3JlYXRlRWwoJ2RpdicsIHsgXG5cdFx0XHR0ZXh0OiBpc0VuZ2xpc2ggPyAnSGVhbHRoIFNjb3JlOiAtLSUnIDogJ1x1NTA2NVx1NUVCN1x1NUVBNlx1NjAzQlx1NTIwNjogLS0lJywgXG5cdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLXNjb3JlJyBcblx0XHR9KTtcblx0XHRjb25zdCBhdG9tQ291bnRFbCA9IG1ldHJpY3NFbC5jcmVhdGVFbCgnZGl2JywgeyBcblx0XHRcdHRleHQ6IGlzRW5nbGlzaCA/ICdLbm93bGVkZ2UgQXRvbSBTdGF0czogLS0nIDogJ1x1NzdFNVx1OEJDNlx1NTM5Rlx1NUI1MFx1N0VERlx1OEJBMTogLS0nLCBcblx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstYXRvbS1jb3VudCcgXG5cdFx0fSk7XG5cdFx0Y29uc3QgY29ubmVjdGlvbkRlbnNpdHlFbCA9IG1ldHJpY3NFbC5jcmVhdGVFbCgnZGl2JywgeyBcblx0XHRcdHRleHQ6IGlzRW5nbGlzaCA/ICdDb25uZWN0aW9uIERlbnNpdHk6IC0tJyA6ICdcdThGREVcdTYzQTVcdTVCQzZcdTVFQTY6IC0tJywgXG5cdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWNvbm5lY3Rpb24tZGVuc2l0eScgXG5cdFx0fSk7XG5cdFx0XG5cdFx0Ly8gRGlhZ25vc3RpYyByZXN1bHRzIGFyZWFcblx0XHRjb25zdCByZXN1bHRzRWwgPSBjb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAna25vd2xlZGdlLWFyay1yZXN1bHRzJyB9KTtcblx0XHRcblx0XHQvLyBDaGVjayBpZiB0aGVyZSBhcmUgc2F2ZWQgZGlhZ25vc2lzIHJlc3VsdHNcblx0XHRjb25zdCBzYXZlZFJlc3VsdHMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHM7XG5cdFx0aWYgKHNhdmVkUmVzdWx0cykge1xuXHRcdFx0Ly8gVXBkYXRlIG1ldHJpY3Mgd2l0aCBzYXZlZCByZXN1bHRzXG5cdFx0XHRzY29yZUVsLnNldFRleHQoaXNFbmdsaXNoID8gYEhlYWx0aCBTY29yZTogJHtzYXZlZFJlc3VsdHMuaGVhbHRoU2NvcmV9JWAgOiBgXHU1MDY1XHU1RUI3XHU1RUE2XHU2MDNCXHU1MjA2OiAke3NhdmVkUmVzdWx0cy5oZWFsdGhTY29yZX0lYCk7XG5cdFx0XHRzY29yZUVsLmNsYXNzTmFtZSA9IGBrbm93bGVkZ2UtYXJrLXNjb3JlICR7dGhpcy5nZXRTY29yZUNsYXNzKHNhdmVkUmVzdWx0cy5oZWFsdGhTY29yZSl9YDtcblx0XHRcdFxuXHRcdFx0YXRvbUNvdW50RWwuc2V0VGV4dChpc0VuZ2xpc2ggPyBgS25vd2xlZGdlIEF0b20gU3RhdHM6ICR7c2F2ZWRSZXN1bHRzLmF0b21Db3VudH1gIDogYFx1NzdFNVx1OEJDNlx1NTM5Rlx1NUI1MFx1N0VERlx1OEJBMTogJHtzYXZlZFJlc3VsdHMuYXRvbUNvdW50fWApO1xuXHRcdFx0Y29ubmVjdGlvbkRlbnNpdHlFbC5zZXRUZXh0KGlzRW5nbGlzaCA/IGBDb25uZWN0aW9uIERlbnNpdHk6ICR7c2F2ZWRSZXN1bHRzLmNvbm5lY3Rpb25EZW5zaXR5fWAgOiBgXHU4RkRFXHU2M0E1XHU1QkM2XHU1RUE2OiAke3NhdmVkUmVzdWx0cy5jb25uZWN0aW9uRGVuc2l0eX1gKTtcblx0XHRcdFxuXHRcdFx0Ly8gVXBkYXRlIHJlc3VsdHMgd2l0aCBzYXZlZCBpc3N1ZXNcblx0XHRcdHJlc3VsdHNFbC5lbXB0eSgpO1xuXHRcdFx0aWYgKHNhdmVkUmVzdWx0cy5pc3N1ZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHJlc3VsdHNFbC5jcmVhdGVFbCgncCcsIHsgXG5cdFx0XHRcdFx0dGV4dDogaXNFbmdsaXNoID8gJ0NvbmdyYXR1bGF0aW9ucyEgWW91ciBrbm93bGVkZ2UgYmFzZSBpcyB2ZXJ5IGhlYWx0aHkuJyA6ICdcdTYwNkRcdTU1OUNcdUZGMDFcdTYwQThcdTc2ODRcdTc3RTVcdThCQzZcdTVFOTNcdTk3NUVcdTVFMzhcdTUwNjVcdTVFQjdcdTMwMDInLCBcblx0XHRcdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLXBsYWNlaG9sZGVyJyBcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlbmRlckRpYWdub3N0aWNDYXJkcyhyZXN1bHRzRWwsIHNhdmVkUmVzdWx0cy5pc3N1ZXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gUmVuZGVyIGhlYWx0aHkgbm90ZXNcblx0XHRcdFx0YXdhaXQgdGhpcy5yZW5kZXJIZWFsdGh5Tm90ZXMocmVzdWx0c0VsKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gU2hvdyBwbGFjZWhvbGRlciBpZiBubyBzYXZlZCByZXN1bHRzXG5cdFx0XHRjb25zdCBwbGFjZWhvbGRlckVsID0gcmVzdWx0c0VsLmNyZWF0ZUVsKCdwJywgeyBcblx0XHRcdFx0dGV4dDogaXNFbmdsaXNoID8gJ0NsaWNrIFwiU3RhcnQgRnVsbCBEaWFnbm9zaXNcIiB0byBhbmFseXplIHlvdXIga25vd2xlZGdlIGFyaycgOiAnXHU3MEI5XHU1MUZCXCJcdTVGMDBcdTU5Q0JcdTUxNjhcdTk3NjJcdThCQ0FcdTY1QURcIlx1NEVFNVx1NTIwNlx1Njc5MFx1NjBBOFx1NzY4NFx1NzdFNVx1OEJDNlx1NjVCOVx1ODIxRicsIFxuXHRcdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLXBsYWNlaG9sZGVyJyBcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHQvLyBBZGQgdG9vbHRpcCBmb3IgY29ubmVjdGlvbiBkZW5zaXR5XG5cdFx0Y29ubmVjdGlvbkRlbnNpdHlFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGV2ZW50KSA9PiB7XG5cdFx0XHQvLyBDYWxjdWxhdGUgYWN0dWFsIGNvbm5lY3Rpb24gZGVuc2l0eSB2YWx1ZXNcblx0XHRcdGNvbnN0IGRlbnNpdHlUZXh0ID0gdGhpcy5jYWxjdWxhdGVDb25uZWN0aW9uRGVuc2l0eSgpO1xuXHRcdFx0Y29uc3QgbWF0Y2hlcyA9IGRlbnNpdHlUZXh0Lm1hdGNoKC9cXFtcdTIxOTEgKFswLTkuXSspXFxdIFxcW1x1MjE5MyAoWzAtOS5dKylcXF0vKTtcblx0XHRcdGxldCBpbmJvdW5kQXZnID0gJzAnO1xuXHRcdFx0bGV0IG91dGJvdW5kQXZnID0gJzAnO1xuXHRcdFx0XG5cdFx0XHRpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRpbmJvdW5kQXZnID0gbWF0Y2hlc1sxXTtcblx0XHRcdFx0b3V0Ym91bmRBdmcgPSBtYXRjaGVzWzJdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBDcmVhdGUgdG9vbHRpcCBlbGVtZW50XG5cdFx0XHRjb25zdCB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHR0b29sdGlwLmNsYXNzTmFtZSA9ICdrbm93bGVkZ2UtYXJrLXRvb2x0aXAnO1xuXHRcdFx0dG9vbHRpcC50ZXh0Q29udGVudCA9IGlzRW5nbGlzaCA/IFxuXHRcdFx0XHRgRWFjaCBub3RlIGlzIHJlZmVyZW5jZWQgYnkgYW4gYXZlcmFnZSBvZiAke2luYm91bmRBdmd9IG90aGVyIG5vdGVzIC8gRWFjaCBub3RlIHJlZmVyZW5jZXMgYW4gYXZlcmFnZSBvZiAke291dGJvdW5kQXZnfSBvdGhlciBub3Rlc2AgOlxuXHRcdFx0XHRgXHU1RTczXHU1NzQ3XHU2QkNGXHU0RTJBXHU3QjE0XHU4QkIwXHU4OEFCJHtpbmJvdW5kQXZnfVx1NEUyQVx1NTE3Nlx1NEVENlx1N0IxNFx1OEJCMFx1NjI0MFx1NUYxNVx1NzUyOCAvIFx1NUU3M1x1NTc0N1x1NkJDRlx1NEUyQVx1N0IxNFx1OEJCMFx1NUYxNVx1NzUyOFx1NEU4NiR7b3V0Ym91bmRBdmd9XHU0RTJBXHU1MTc2XHU0RUQ2XHU3QjE0XHU4QkIwYDtcblx0XHRcdFxuXHRcdFx0Ly8gUG9zaXRpb24gdG9vbHRpcFxuXHRcdFx0dG9vbHRpcC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHR0b29sdGlwLnN0eWxlLmxlZnQgPSBgJHtldmVudC5wYWdlWH1weGA7XG5cdFx0XHR0b29sdGlwLnN0eWxlLnRvcCA9IGAke2V2ZW50LnBhZ2VZIC0gMzB9cHhgO1xuXHRcdFx0XG5cdFx0XHQvLyBBZGQgdG8gZG9jdW1lbnRcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Y29ubmVjdGlvbkRlbnNpdHlFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuXHRcdFx0Ly8gUmVtb3ZlIHRvb2x0aXBcblx0XHRcdGNvbnN0IHRvb2x0aXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmtub3dsZWRnZS1hcmstdG9vbHRpcCcpO1xuXHRcdFx0dG9vbHRpcHMuZm9yRWFjaCh0b29sdGlwID0+IHRvb2x0aXAucmVtb3ZlKCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGRpYWdub3NlQnV0dG9uLm9uQ2xpY2tFdmVudChhc3luYyAoKSA9PiB7XG5cdFx0XHQvLyBVcGRhdGUgYnV0dG9uIHN0YXRlXG5cdFx0XHRkaWFnbm9zZUJ1dHRvbi5zZXRUZXh0KGlzRW5nbGlzaCA/ICdEaWFnbm9zaW5nLi4uJyA6ICdcdThCQ0FcdTY1QURcdTRFMkQuLi4nKTtcblx0XHRcdGRpYWdub3NlQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0Ly8gUnVuIGRpYWdub3N0aWNzXG5cdFx0XHRjb25zdCBpc3N1ZXMgPSBhd2FpdCB0aGlzLnBsdWdpbi5ydW5EaWFnbm9zdGljcygpO1xuXHRcdFx0XG5cdFx0XHQvLyBVcGRhdGUgbWV0cmljc1xuXHRcdFx0Y29uc3QgaGVhbHRoU2NvcmUgPSB0aGlzLmNhbGN1bGF0ZUhlYWx0aFNjb3JlKGlzc3Vlcyk7XG5cdFx0XHRzY29yZUVsLnNldFRleHQoaXNFbmdsaXNoID8gYEhlYWx0aCBTY29yZTogJHtoZWFsdGhTY29yZX0lYCA6IGBcdTUwNjVcdTVFQjdcdTVFQTZcdTYwM0JcdTUyMDY6ICR7aGVhbHRoU2NvcmV9JWApO1xuXHRcdFx0c2NvcmVFbC5jbGFzc05hbWUgPSBga25vd2xlZGdlLWFyay1zY29yZSAke3RoaXMuZ2V0U2NvcmVDbGFzcyhoZWFsdGhTY29yZSl9YDtcblx0XHRcdFxuXHRcdFx0Ly8gQ2FsY3VsYXRlIGFuZCB1cGRhdGUgYXRvbSBjb3VudFxuXHRcdFx0Y29uc3QgYXRvbUNvdW50ID0gdGhpcy5jYWxjdWxhdGVBdG9tQ291bnQoKTtcblx0XHRcdGF0b21Db3VudEVsLnNldFRleHQoaXNFbmdsaXNoID8gYEtub3dsZWRnZSBBdG9tIFN0YXRzOiAke2F0b21Db3VudH1gIDogYFx1NzdFNVx1OEJDNlx1NTM5Rlx1NUI1MFx1N0VERlx1OEJBMTogJHthdG9tQ291bnR9YCk7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBhbmQgdXBkYXRlIGNvbm5lY3Rpb24gZGVuc2l0eVxuXHRcdFx0Y29uc3QgY29ubmVjdGlvbkRlbnNpdHkgPSB0aGlzLmNhbGN1bGF0ZUNvbm5lY3Rpb25EZW5zaXR5KCk7XG5cdFx0XHRjb25uZWN0aW9uRGVuc2l0eUVsLnNldFRleHQoaXNFbmdsaXNoID8gYENvbm5lY3Rpb24gRGVuc2l0eTogJHtjb25uZWN0aW9uRGVuc2l0eX1gIDogYFx1OEZERVx1NjNBNVx1NUJDNlx1NUVBNjogJHtjb25uZWN0aW9uRGVuc2l0eX1gKTtcblx0XHRcdFxuXHRcdFx0Ly8gU2F2ZSBkaWFnbm9zaXMgcmVzdWx0cyB0byBwbHVnaW4gc2V0dGluZ3MgZm9yIHBlcnNpc3RlbmNlXG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHMgPSB7XG5cdFx0XHRcdGlzc3VlczogaXNzdWVzLFxuXHRcdFx0XHRoZWFsdGhTY29yZTogaGVhbHRoU2NvcmUsXG5cdFx0XHRcdGF0b21Db3VudDogYXRvbUNvdW50LFxuXHRcdFx0XHRjb25uZWN0aW9uRGVuc2l0eTogY29ubmVjdGlvbkRlbnNpdHksXG5cdFx0XHRcdGRpYWdub3Npc1RpbWU6IERhdGUubm93KClcblx0XHRcdH07XG5cdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFxuXHRcdFx0Ly8gVXBkYXRlIHJlc3VsdHNcblx0XHRcdHJlc3VsdHNFbC5lbXB0eSgpO1xuXHRcdFx0aWYgKGlzc3Vlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0cmVzdWx0c0VsLmNyZWF0ZUVsKCdwJywgeyBcblx0XHRcdFx0XHR0ZXh0OiBpc0VuZ2xpc2ggPyAnQ29uZ3JhdHVsYXRpb25zISBZb3VyIGtub3dsZWRnZSBiYXNlIGlzIHZlcnkgaGVhbHRoeS4nIDogJ1x1NjA2RFx1NTU5Q1x1RkYwMVx1NjBBOFx1NzY4NFx1NzdFNVx1OEJDNlx1NUU5M1x1OTc1RVx1NUUzOFx1NTA2NVx1NUVCN1x1MzAwMicsIFxuXHRcdFx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstcGxhY2Vob2xkZXInIFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVuZGVyRGlhZ25vc3RpY0NhcmRzKHJlc3VsdHNFbCwgaXNzdWVzKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFJlbmRlciBoZWFsdGh5IG5vdGVzXG5cdFx0XHRcdGF3YWl0IHRoaXMucmVuZGVySGVhbHRoeU5vdGVzKHJlc3VsdHNFbCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFJlc2V0IGJ1dHRvbiBzdGF0ZVxuXHRcdFx0ZGlhZ25vc2VCdXR0b24uc2V0VGV4dChpc0VuZ2xpc2ggPyAnU3RhcnQgRnVsbCBEaWFnbm9zaXMnIDogJ1x1NUYwMFx1NTlDQlx1NTE2OFx1OTc2Mlx1OEJDQVx1NjVBRCcpO1xuXHRcdFx0ZGlhZ25vc2VCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9KTtcblx0XHRcblx0XHRpbmNyZW1lbnRhbERpYWdub3NlQnV0dG9uLm9uQ2xpY2tFdmVudChhc3luYyAoKSA9PiB7XG5cdFx0XHQvLyBVcGRhdGUgYnV0dG9uIHN0YXRlXG5cdFx0XHRpbmNyZW1lbnRhbERpYWdub3NlQnV0dG9uLnNldFRleHQoaXNFbmdsaXNoID8gJ0RpYWdub3NpbmcuLi4nIDogJ1x1OEJDQVx1NjVBRFx1NEUyRC4uLicpO1xuXHRcdFx0aW5jcmVtZW50YWxEaWFnbm9zZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdC8vIFJ1biBpbmNyZW1lbnRhbCBkaWFnbm9zdGljc1xuXHRcdFx0Y29uc3QgbmV3SXNzdWVzID0gYXdhaXQgdGhpcy5wbHVnaW4ucnVuRGlhZ25vc3RpY3ModHJ1ZSk7XG5cdFx0XHRcblx0XHRcdC8vIEdldCBleGlzdGluZyBpc3N1ZXMgZnJvbSBzYXZlZCByZXN1bHRzXG5cdFx0XHRsZXQgYWxsSXNzdWVzID0gbmV3SXNzdWVzO1xuXHRcdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVkRGlhZ25vc2lzUmVzdWx0cykge1xuXHRcdFx0XHQvLyBHZXQgYWxsIGN1cnJlbnQgZmlsZXMgdG8gY2hlY2sgZm9yIGRlbGV0ZWQgZmlsZXNcblx0XHRcdFx0Y29uc3QgY3VycmVudEZpbGVzID0gbmV3IFNldCh0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkubWFwKGZpbGUgPT4gZmlsZS5wYXRoKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBGaWx0ZXIgb3V0IGlzc3VlcyBmcm9tIGRlbGV0ZWQgZmlsZXMgYW5kIGlzc3VlcyB0aGF0IGFyZSBhbHJlYWR5IGluIHRoZSBzYXZlZCByZXN1bHRzXG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nSXNzdWVzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZWREaWFnbm9zaXNSZXN1bHRzLmlzc3Vlcy5maWx0ZXIoaXNzdWUgPT4gY3VycmVudEZpbGVzLmhhcyhpc3N1ZS5maWxlUGF0aCkpO1xuXHRcdFx0XHRjb25zdCBleGlzdGluZ0lzc3VlSWRzID0gbmV3IFNldChleGlzdGluZ0lzc3Vlcy5tYXAoaXNzdWUgPT4gaXNzdWUuaWQpKTtcblx0XHRcdFx0Y29uc3QgdW5pcXVlTmV3SXNzdWVzID0gbmV3SXNzdWVzLmZpbHRlcihpc3N1ZSA9PiAhZXhpc3RpbmdJc3N1ZUlkcy5oYXMoaXNzdWUuaWQpKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIENvbWJpbmUgZXhpc3RpbmcgaXNzdWVzIHdpdGggbmV3IHVuaXF1ZSBpc3N1ZXNcblx0XHRcdFx0YWxsSXNzdWVzID0gWy4uLmV4aXN0aW5nSXNzdWVzLCAuLi51bmlxdWVOZXdJc3N1ZXNdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBVcGRhdGUgbWV0cmljc1xuXHRcdFx0Y29uc3QgaGVhbHRoU2NvcmUgPSB0aGlzLmNhbGN1bGF0ZUhlYWx0aFNjb3JlKGFsbElzc3Vlcyk7XG5cdFx0XHRzY29yZUVsLnNldFRleHQoaXNFbmdsaXNoID8gYEhlYWx0aCBTY29yZTogJHtoZWFsdGhTY29yZX0lYCA6IGBcdTUwNjVcdTVFQjdcdTVFQTZcdTYwM0JcdTUyMDY6ICR7aGVhbHRoU2NvcmV9JWApO1xuXHRcdFx0c2NvcmVFbC5jbGFzc05hbWUgPSBga25vd2xlZGdlLWFyay1zY29yZSAke3RoaXMuZ2V0U2NvcmVDbGFzcyhoZWFsdGhTY29yZSl9YDtcblx0XHRcdFxuXHRcdFx0Ly8gQ2FsY3VsYXRlIGFuZCB1cGRhdGUgYXRvbSBjb3VudFxuXHRcdFx0Y29uc3QgYXRvbUNvdW50ID0gdGhpcy5jYWxjdWxhdGVBdG9tQ291bnQoKTtcblx0XHRcdGF0b21Db3VudEVsLnNldFRleHQoaXNFbmdsaXNoID8gYEtub3dsZWRnZSBBdG9tIFN0YXRzOiAke2F0b21Db3VudH1gIDogYFx1NzdFNVx1OEJDNlx1NTM5Rlx1NUI1MFx1N0VERlx1OEJBMTogJHthdG9tQ291bnR9YCk7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBhbmQgdXBkYXRlIGNvbm5lY3Rpb24gZGVuc2l0eVxuXHRcdFx0Y29uc3QgY29ubmVjdGlvbkRlbnNpdHkgPSB0aGlzLmNhbGN1bGF0ZUNvbm5lY3Rpb25EZW5zaXR5KCk7XG5cdFx0XHRjb25uZWN0aW9uRGVuc2l0eUVsLnNldFRleHQoaXNFbmdsaXNoID8gYENvbm5lY3Rpb24gRGVuc2l0eTogJHtjb25uZWN0aW9uRGVuc2l0eX1gIDogYFx1OEZERVx1NjNBNVx1NUJDNlx1NUVBNjogJHtjb25uZWN0aW9uRGVuc2l0eX1gKTtcblx0XHRcdFxuXHRcdFx0Ly8gU2F2ZSBkaWFnbm9zaXMgcmVzdWx0cyB0byBwbHVnaW4gc2V0dGluZ3MgZm9yIHBlcnNpc3RlbmNlXG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHMgPSB7XG5cdFx0XHRcdGlzc3VlczogYWxsSXNzdWVzLFxuXHRcdFx0XHRoZWFsdGhTY29yZTogaGVhbHRoU2NvcmUsXG5cdFx0XHRcdGF0b21Db3VudDogYXRvbUNvdW50LFxuXHRcdFx0XHRjb25uZWN0aW9uRGVuc2l0eTogY29ubmVjdGlvbkRlbnNpdHksXG5cdFx0XHRcdGRpYWdub3Npc1RpbWU6IERhdGUubm93KClcblx0XHRcdH07XG5cdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFxuXHRcdFx0Ly8gVXBkYXRlIHJlc3VsdHNcblx0XHRcdHJlc3VsdHNFbC5lbXB0eSgpO1xuXHRcdFx0aWYgKGFsbElzc3Vlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0cmVzdWx0c0VsLmNyZWF0ZUVsKCdwJywgeyBcblx0XHRcdFx0XHR0ZXh0OiBpc0VuZ2xpc2ggPyAnQ29uZ3JhdHVsYXRpb25zISBZb3VyIGtub3dsZWRnZSBiYXNlIGlzIHZlcnkgaGVhbHRoeS4nIDogJ1x1NjA2RFx1NTU5Q1x1RkYwMVx1NjBBOFx1NzY4NFx1NzdFNVx1OEJDNlx1NUU5M1x1OTc1RVx1NUUzOFx1NTA2NVx1NUVCN1x1MzAwMicsIFxuXHRcdFx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstcGxhY2Vob2xkZXInIFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVuZGVyRGlhZ25vc3RpY0NhcmRzKHJlc3VsdHNFbCwgYWxsSXNzdWVzKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFJlbmRlciBoZWFsdGh5IG5vdGVzXG5cdFx0XHRcdGF3YWl0IHRoaXMucmVuZGVySGVhbHRoeU5vdGVzKHJlc3VsdHNFbCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFJlc2V0IGJ1dHRvbiBzdGF0ZVxuXHRcdFx0aW5jcmVtZW50YWxEaWFnbm9zZUJ1dHRvbi5zZXRUZXh0KGlzRW5nbGlzaCA/ICdTdGFydCBJbmNyZW1lbnRhbCBEaWFnbm9zaXMnIDogJ1x1NjVCMFx1NTg5RVx1N0IxNFx1OEJCMFx1OEJDQVx1NjVBRCcpO1xuXHRcdFx0aW5jcmVtZW50YWxEaWFnbm9zZUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGV4cG9ydEJ1dHRvbi5vbkNsaWNrRXZlbnQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0Ly8gVXBkYXRlIGJ1dHRvbiBzdGF0ZVxuXHRcdFx0ZXhwb3J0QnV0dG9uLnNldFRleHQoaXNFbmdsaXNoID8gJ0V4cG9ydGluZy4uLicgOiAnXHU1QkZDXHU1MUZBXHU0RTJELi4uJyk7XG5cdFx0XHRleHBvcnRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHQvLyBSdW4gZGlhZ25vc3RpY3MgdG8gZ2V0IGlzc3Vlc1xuXHRcdFx0Y29uc3QgaXNzdWVzID0gYXdhaXQgdGhpcy5wbHVnaW4ucnVuRGlhZ25vc3RpY3MoKTtcblx0XHRcdFxuXHRcdFx0Ly8gRXhwb3J0IGhlYWx0aHkgbm90ZXNcblx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmV4cG9ydEhlYWx0aHlOb3Rlcyhpc3N1ZXMpO1xuXHRcdFx0XG5cdFx0XHQvLyBSZXNldCBidXR0b24gc3RhdGVcblx0XHRcdGV4cG9ydEJ1dHRvbi5zZXRUZXh0KGlzRW5nbGlzaCA/ICdFeHBvcnQgSGVhbHRoeSBOb3RlcycgOiAnXHU1QkZDXHU1MUZBXHU1MDY1XHU1RUI3XHU3QjE0XHU4QkIwJyk7XG5cdFx0XHRleHBvcnRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9KTtcblx0fVxuXG5cdFx0Y2FsY3VsYXRlSGVhbHRoU2NvcmUoaXNzdWVzOiBEaWFnbm9zdGljSXNzdWVbXSk6IG51bWJlciB7XG5cdFx0Ly8gRmlsdGVyIG91dCBpZ25vcmVkIGlzc3Vlc1xuXHRcdGNvbnN0IGZpbHRlcmVkSXNzdWVzID0gaXNzdWVzLmZpbHRlcihpc3N1ZSA9PiAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5pbmNsdWRlcyhpc3N1ZS5pZCkpO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRvdGFsIHBlbmFsdHkgYmFzZWQgb24gcnVsZSB3ZWlnaHRzXG5cdFx0bGV0IHRvdGFsUGVuYWx0eSA9IDA7XG5cdFx0Y29uc3QgaXNzdWVzQnlSdWxlOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG5cblx0XHQvLyBDb3VudCBpc3N1ZXMgYnkgcnVsZVxuXHRcdGZvciAoY29uc3QgaXNzdWUgb2YgZmlsdGVyZWRJc3N1ZXMpIHtcblx0XHRcdGlmICghaXNzdWVzQnlSdWxlW2lzc3VlLnJ1bGVJZF0pIHtcblx0XHRcdFx0aXNzdWVzQnlSdWxlW2lzc3VlLnJ1bGVJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdFx0aXNzdWVzQnlSdWxlW2lzc3VlLnJ1bGVJZF0rKztcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcGVuYWx0eSBmb3IgZWFjaCBydWxlXG5cdFx0Zm9yIChjb25zdCBbcnVsZUlkLCBjb3VudF0gb2YgT2JqZWN0LmVudHJpZXMoaXNzdWVzQnlSdWxlKSkge1xuXHRcdFx0Y29uc3Qgd2VpZ2h0ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucnVsZVdlaWdodHNbcnVsZUlkXSB8fCAwO1xuXHRcdFx0dG90YWxQZW5hbHR5ICs9IGNvdW50ICogd2VpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBmaW5hbCBzY29yZVxuXHRcdGNvbnN0IGZpbmFsU2NvcmUgPSBNYXRoLm1heCgwLCAxMDAgLSB0b3RhbFBlbmFsdHkpO1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKGZpbmFsU2NvcmUpO1xuXHR9XG5cdFxuXHRnZXRTY29yZUNsYXNzKHNjb3JlOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGlmIChzY29yZSA+PSA5MCkgcmV0dXJuICdzY29yZS1oZWFsdGh5Jztcblx0XHRpZiAoc2NvcmUgPj0gNzApIHJldHVybiAnc2NvcmUtd2FybmluZyc7XG5cdFx0cmV0dXJuICdzY29yZS1jcml0aWNhbCc7XG5cdH1cblx0XG5cdHJlbmRlckRpYWdub3N0aWNDYXJkcyhjb250YWluZXI6IEhUTUxFbGVtZW50LCBpc3N1ZXM6IERpYWdub3N0aWNJc3N1ZVtdKSB7XG5cdFx0Y29uc3QgaXNFbmdsaXNoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbic7XG5cdFx0XG5cdFx0Ly8gRmlsdGVyIG91dCBpZ25vcmVkIGlzc3Vlc1xuXHRcdGNvbnN0IGZpbHRlcmVkSXNzdWVzID0gaXNzdWVzLmZpbHRlcihpc3N1ZSA9PiAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5pbmNsdWRlcyhpc3N1ZS5pZCkpO1xuXG5cdFx0Ly8gR3JvdXAgaXNzdWVzIGJ5IHJ1bGVcblx0XHRjb25zdCBpc3N1ZXNCeVJ1bGU6IFJlY29yZDxzdHJpbmcsIERpYWdub3N0aWNJc3N1ZVtdPiA9IHt9O1xuXHRcdFxuXHRcdGZvciAoY29uc3QgaXNzdWUgb2YgZmlsdGVyZWRJc3N1ZXMpIHtcblx0XHRcdGlmICghaXNzdWVzQnlSdWxlW2lzc3VlLnJ1bGVJZF0pIHtcblx0XHRcdFx0aXNzdWVzQnlSdWxlW2lzc3VlLnJ1bGVJZF0gPSBbXTtcblx0XHRcdH1cblx0XHRcdGlzc3Vlc0J5UnVsZVtpc3N1ZS5ydWxlSWRdLnB1c2goaXNzdWUpO1xuXHRcdH1cblx0XHRcblx0XHQvLyBSZW5kZXIgYSBjYXJkIGZvciBlYWNoIHJ1bGVcblx0XHRcdGZvciAoY29uc3QgW3J1bGVJZCwgcnVsZUlzc3Vlc10gb2YgT2JqZWN0LmVudHJpZXMoaXNzdWVzQnlSdWxlKSkge1xuXHRcdFx0XHRjb25zdCBjYXJkRWwgPSBjb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgXG5cdFx0XHRcdFx0Y2xzOiAna25vd2xlZGdlLWFyay1jYXJkJyxcblx0XHRcdFx0XHRhdHRyOiB7ICdkYXRhLXJ1bGUtaWQnOiBydWxlSWQgfVxuXHRcdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly8gQ2FyZCBoZWFkZXJcblx0XHRcdGNvbnN0IGhlYWRlckVsID0gY2FyZEVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2tub3dsZWRnZS1hcmstY2FyZC1oZWFkZXInIH0pO1xuXHRcdFx0Y29uc3QgdGl0bGVDb250YWluZXJFbCA9IGhlYWRlckVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2tub3dsZWRnZS1hcmstY2FyZC10aXRsZS1jb250YWluZXInIH0pO1xuXHRcdFx0Y29uc3QgdGl0bGVFbCA9IHRpdGxlQ29udGFpbmVyRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAna25vd2xlZGdlLWFyay1jYXJkLXRpdGxlJyB9KTtcblx0XHRcdFxuXHRcdFx0Ly8gR2V0IHJ1bGUgbmFtZSBhbmQgZGVzY3JpcHRpb25cblx0XHRcdGxldCBydWxlTmFtZSA9IHJ1bGVJc3N1ZXNbMF0ucnVsZUlkO1xuXHRcdFx0bGV0IHJ1bGVEZXNjcmlwdGlvbiA9IGlzRW5nbGlzaCA/ICdJc3N1ZSBEZXNjcmlwdGlvbicgOiAnXHU5NUVFXHU5ODk4XHU2M0NGXHU4RkYwJztcblx0XHRcdFxuXHRcdFx0Ly8gTWFwIHJ1bGUgSURzIHRvIHRoZWlyIG5hbWVzIGFuZCBkZXNjcmlwdGlvbnNcblx0XHRcdGNvbnN0IHJ1bGVJbmZvTWFwOiBSZWNvcmQ8c3RyaW5nLCB7IG5hbWU6IHN0cmluZzsgZGVzY3JpcHRpb246IHN0cmluZyB9PiA9IGlzRW5nbGlzaCA/IHtcblx0XHRcdCAgJ21ldGFkYXRhLWludGVncml0eSc6IHsgXG5cdFx0XHRcdG5hbWU6ICdNZXRhZGF0YSBJbnRlZ3JpdHkgQ2hlY2snLCBcblx0XHRcdFx0ZGVzY3JpcHRpb246ICdDaGVjayBpZiBub3RlIGZpbGVzIGNvbnRhaW4gc3RhbmRhcmQgWUFNTCBGcm9udG1hdHRlcicgXG5cdFx0XHQgIH0sXG5cdFx0XHQgICdub3RlLWF0b21pY2l0eSc6IHsgXG5cdFx0XHRcdG5hbWU6ICdOb3RlIEF0b21pY2l0eSBDaGVjaycsIFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ0NoZWNrIGlmIG5vdGVzIGFyZSB0b28gbGVuZ3RoeSBvciBoYXZlIHNjYXR0ZXJlZCB0b3BpY3MnIFxuXHRcdFx0ICB9LFxuXHRcdFx0ICAnbmFrZWQtbGlua3MnOiB7IFxuXHRcdFx0XHRuYW1lOiAnTmFrZWQgTGlua3MgQ2hlY2snLCBcblx0XHRcdFx0ZGVzY3JpcHRpb246ICdDaGVjayBpZiBpbnRlcm5hbCBsaW5rcyBsYWNrIHN1ZmZpY2llbnQgY29udGV4dCcgXG5cdFx0XHQgIH0sXG5cdFx0XHQgICdncmFwaC1jb25uZWN0aXZpdHknOiB7IFxuXHRcdFx0XHRuYW1lOiAnS25vd2xlZGdlIEdyYXBoIENvbm5lY3Rpdml0eSBDaGVjaycsIFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ0NoZWNrIGZvciB1bmNvbm5lY3RlZCBcImluZm9ybWF0aW9uIGlzbGFuZHNcIicgXG5cdFx0XHQgIH0sXG5cdFx0XHQgICdwcmVkaWNhdGUtY29uc2lzdGVuY3knOiB7IFxuXHRcdFx0XHRuYW1lOiAnUHJlZGljYXRlIENvbnNpc3RlbmN5IENoZWNrJywgXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiAnRW5jb3VyYWdlIHRoZSBzdGFuZGFyZCB1c2Ugb2YgYGtleTo6IFtbTGlua11dYCcgXG5cdFx0XHQgIH1cblx0XHRcdH0gOiB7XG5cdFx0XHQgICdtZXRhZGF0YS1pbnRlZ3JpdHknOiB7IFxuXHRcdFx0XHRuYW1lOiAnXHU1MTQzXHU2NTcwXHU2MzZFXHU1QjhDXHU2NTc0XHU2MDI3XHU2OEMwXHU2N0U1JywgXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiAnXHU2OEMwXHU2N0U1XHU3QjE0XHU4QkIwXHU2NTg3XHU0RUY2XHU2NjJGXHU1NDI2XHU1MzA1XHU1NDJCXHU4OUM0XHU4MzAzXHU3Njg0WUFNTCBGcm9udG1hdHRlcicgXG5cdFx0XHQgIH0sXG5cdFx0XHQgICdub3RlLWF0b21pY2l0eSc6IHsgXG5cdFx0XHRcdG5hbWU6ICdcdTdCMTRcdThCQjBcdTUzOUZcdTVCNTBcdTUzMTZcdTdBMEJcdTVFQTZcdTY4QzBcdTY3RTUnLCBcblx0XHRcdFx0ZGVzY3JpcHRpb246ICdcdTY4QzBcdTY3RTVcdTdCMTRcdThCQjBcdTY2MkZcdTU0MjZcdThGQzdcdTRFOEVcdTUxOTdcdTk1N0ZcdTYyMTZcdTRFM0JcdTk4OThcdTUyMDZcdTY1NjMnIFxuXHRcdFx0ICB9LFxuXHRcdFx0ICAnbmFrZWQtbGlua3MnOiB7IFxuXHRcdFx0XHRuYW1lOiAnXHU4OEY4XHU5NEZFXHU2M0E1XHU2OEMwXHU2N0U1JywgXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiAnXHU2OEMwXHU2N0U1XHU1MTg1XHU5MEU4XHU5NEZFXHU2M0E1XHU2NjJGXHU1NDI2XHU3RjNBXHU1QzExXHU4REIzXHU1OTFGXHU3Njg0XHU0RTBBXHU0RTBCXHU2NTg3JyBcblx0XHRcdCAgfSxcblx0XHRcdCAgJ2dyYXBoLWNvbm5lY3Rpdml0eSc6IHsgXG5cdFx0XHRcdG5hbWU6ICdcdTc3RTVcdThCQzZcdTU2RkVcdThDMzFcdThGREVcdTYzQTVcdTYwMjdcdTY4QzBcdTY3RTUnLCBcblx0XHRcdFx0ZGVzY3JpcHRpb246ICdcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTVCNThcdTU3MjhcdTY3MkFcdTg4QUJcdThGREVcdTYzQTVcdTc2ODRcIlx1NEZFMVx1NjA2Rlx1NUI2NFx1NUM5QlwiJyBcblx0XHRcdCAgfSxcblx0XHRcdCAgJ3ByZWRpY2F0ZS1jb25zaXN0ZW5jeSc6IHsgXG5cdFx0XHRcdG5hbWU6ICdcdTUxNzNcdTdDRkJcdThDMTNcdThCRURcdTRFMDBcdTgxRjRcdTYwMjdcdTY4QzBcdTY3RTUnLCBcblx0XHRcdFx0ZGVzY3JpcHRpb246ICdcdTlGMTNcdTUyQjFga2V5OjogW1tMaW5rXV1gXHU3Njg0XHU4OUM0XHU4MzAzXHU0RjdGXHU3NTI4JyBcblx0XHRcdCAgfVxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0aWYgKHJ1bGVJbmZvTWFwW3J1bGVJZF0pIHtcblx0XHRcdCAgcnVsZU5hbWUgPSBydWxlSW5mb01hcFtydWxlSWRdLm5hbWU7XG5cdFx0XHQgIHJ1bGVEZXNjcmlwdGlvbiA9IHJ1bGVJbmZvTWFwW3J1bGVJZF0uZGVzY3JpcHRpb247XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRpdGxlRWwuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6IGBcdTI2QTBcdUZFMEYgJHtydWxlTmFtZX1gIH0pO1xuXHRcdFx0dGl0bGVDb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBcblx0XHRcdFx0dGV4dDogcnVsZURlc2NyaXB0aW9uLFxuXHRcdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtZGVzY3JpcHRpb24nIFxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdC8vIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgYmFkZ2UgYW5kIHRvZ2dsZSBidXR0b25cblx0XHRcdGNvbnN0IGJhZGdlVG9nZ2xlQ29udGFpbmVyRWwgPSBoZWFkZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLWJhZGdlLXRvZ2dsZS1jb250YWluZXInIH0pO1xuXHRcdFx0XG5cdFx0XHQvLyBDcmVhdGUgYmFkZ2UgZWxlbWVudFxuXHRcdFx0YmFkZ2VUb2dnbGVDb250YWluZXJFbC5jcmVhdGVFbCgnc3BhbicsIHsgXG5cdFx0XHRcdHRleHQ6IHJ1bGVJc3N1ZXMubGVuZ3RoLnRvU3RyaW5nKCksIFxuXHRcdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtYmFkZ2UnIFxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdC8vIENyZWF0ZSB0b2dnbGUgYnV0dG9uIHdpdGggU1ZHIGljb25cblx0XHRcdGNvbnN0IHRvZ2dsZUVsID0gYmFkZ2VUb2dnbGVDb250YWluZXJFbC5jcmVhdGVFbCgnYnV0dG9uJywgeyBcblx0XHRcdFx0Y2xzOiAna25vd2xlZGdlLWFyay1jYXJkLXRvZ2dsZScgXG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly8gU1ZHIGljb25zIGZvciBleHBhbmQvY29sbGFwc2Vcblx0XHRcdGNvbnN0IGV4cGFuZEljb24gPSBgPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCI+PHBvbHlsaW5lIHBvaW50cz1cIjYgOSAxMiAxNSAxOCA5XCI+PC9wb2x5bGluZT48L3N2Zz5gO1xuXHRcdFx0Y29uc3QgY29sbGFwc2VJY29uID0gYDxzdmcgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPjxwb2x5bGluZSBwb2ludHM9XCIxOCAxNSAxMiA5IDYgMTVcIj48L3BvbHlsaW5lPjwvc3ZnPmA7XG5cdFx0XHRcblx0XHRcdHRvZ2dsZUVsLmlubmVySFRNTCA9IGV4cGFuZEljb247XG5cdFx0XHRcblx0XHRcdC8vIENhcmQgY29udGVudCAoaW5pdGlhbGx5IGhpZGRlbilcblx0XHRcdGNvbnN0IGNvbnRlbnRFbCA9IGNhcmRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtY29udGVudCcgfSk7XG5cdFx0XHRjb250ZW50RWwuaGlkZSgpO1xuXHRcdFx0XG5cdFx0XHQvLyBDcmVhdGUgaXNzdWVzIHRhYmxlXG5cdFx0XHRjb25zdCB0YWJsZUVsID0gY29udGVudEVsLmNyZWF0ZUVsKCd0YWJsZScsIHsgY2xzOiAna25vd2xlZGdlLWFyay1pc3N1ZS10YWJsZScgfSk7XG5cdFx0XHRjb25zdCB0aGVhZEVsID0gdGFibGVFbC5jcmVhdGVFbCgndGhlYWQnKTtcblx0XHRcdGNvbnN0IGhlYWRlclJvd0VsID0gdGhlYWRFbC5jcmVhdGVFbCgndHInKTtcblx0XHRcdGhlYWRlclJvd0VsLmNyZWF0ZUVsKCd0aCcsIHsgdGV4dDogaXNFbmdsaXNoID8gJ0ZpbGUgTmFtZScgOiAnXHU2NTg3XHU0RUY2XHU1NDBEJyB9KTtcblx0XHRcdGhlYWRlclJvd0VsLmNyZWF0ZUVsKCd0aCcsIHsgdGV4dDogaXNFbmdsaXNoID8gJ0NvbnRleHQgUHJldmlldycgOiAnXHU0RTBBXHU0RTBCXHU2NTg3XHU5ODg0XHU4OUM4JyB9KTtcblx0XHRcdGhlYWRlclJvd0VsLmNyZWF0ZUVsKCd0aCcsIHsgdGV4dDogaXNFbmdsaXNoID8gJ0FjdGlvbnMnIDogJ1x1NjRDRFx1NEY1QycgfSk7XG5cdFx0XHRcblx0XHRcdGNvbnN0IHRib2R5RWwgPSB0YWJsZUVsLmNyZWF0ZUVsKCd0Ym9keScpO1xuXHRcdFx0XG5cdFx0XHRmb3IgKGNvbnN0IGlzc3VlIG9mIHJ1bGVJc3N1ZXMpIHtcblx0XHRcdFx0Y29uc3Qgcm93RWwgPSB0Ym9keUVsLmNyZWF0ZUVsKCd0cicpO1xuXHRcdFx0XHRyb3dFbC5hZGRDbGFzcygnZGlhZ25vc3RpYy1pc3N1ZScpO1xuXHRcdFx0XHRyb3dFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZS1wYXRoJywgaXNzdWUuZmlsZVBhdGgpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gRmlsZSBuYW1lXG5cdFx0XHRcdGNvbnN0IGZpbGVDZWxsRWwgPSByb3dFbC5jcmVhdGVFbCgndGQnKTtcblx0XHRcdFx0Y29uc3QgZmlsZUxpbmtFbCA9IGZpbGVDZWxsRWwuY3JlYXRlRWwoJ2EnLCB7IFxuXHRcdFx0XHRcdHRleHQ6IGlzc3VlLmZpbGVOYW1lLFxuXHRcdFx0XHRcdGhyZWY6ICcjJyBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZpbGVMaW5rRWwub25DbGlja0V2ZW50KChldnQpID0+IHtcblx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR0aGlzLm5hdmlnYXRlVG9Jc3N1ZShpc3N1ZS5maWxlUGF0aCwgaXNzdWUucG9zaXRpb24pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIENvbnRleHQgcHJldmlld1xuXHRcdFx0XHRyb3dFbC5jcmVhdGVFbCgndGQnLCB7IFxuXHRcdFx0XHRcdHRleHQ6IGlzc3VlLmNvbnRleHRQcmV2aWV3LFxuXHRcdFx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstaXNzdWUtY29udGV4dCcgXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQWN0aW9uc1xuXHRcdFx0XHRjb25zdCBhY3Rpb25zQ2VsbEVsID0gcm93RWwuY3JlYXRlRWwoJ3RkJywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLWlzc3VlLWFjdGlvbnMnIH0pO1xuXHRcdFx0XHRjb25zdCByZWNoZWNrQnV0dG9uRWwgPSBhY3Rpb25zQ2VsbEVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuXHRcdFx0XHRcdHRleHQ6IGlzRW5nbGlzaCA/ICdSZWNoZWNrJyA6ICdcdTkxQ0RcdTY4QzAnLFxuXHRcdFx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstaXNzdWUtYnV0dG9uJyBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJlY2hlY2tCdXR0b25FbC5vbkNsaWNrRXZlbnQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucmVjaGVja0ZpbGVJc3N1ZXMoaXNzdWUuZmlsZVBhdGgsIGlzc3VlLnJ1bGVJZCwgcm93RWwpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IGlnbm9yZUJ1dHRvbkVsID0gYWN0aW9uc0NlbGxFbC5jcmVhdGVFbCgnYnV0dG9uJywgeyBcblx0XHRcdFx0XHR0ZXh0OiBpc0VuZ2xpc2ggPyAnSWdub3JlJyA6ICdcdTVGRkRcdTc1NjUnLFxuXHRcdFx0XHRcdGNsczogJ2tub3dsZWRnZS1hcmstaXNzdWUtYnV0dG9uJyBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlnbm9yZUJ1dHRvbkVsLm9uQ2xpY2tFdmVudCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5pZ25vcmVJc3N1ZShpc3N1ZS5pZCk7XG5cdFx0XHRcdFx0cm93RWwucmVtb3ZlKCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIEFkZCB1bmlnbm9yZSBidXR0b24gZm9yIGlnbm9yZWQgaXNzdWVzXG5cdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmVkSXNzdWVzLmluY2x1ZGVzKGlzc3VlLmlkKSkge1xuXHRcdFx0XHRcdGNvbnN0IHVuaWdub3JlQnV0dG9uRWwgPSBhY3Rpb25zQ2VsbEVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuXHRcdFx0XHRcdFx0dGV4dDogaXNFbmdsaXNoID8gJ1VuaWdub3JlJyA6ICdcdTUzRDZcdTZEODhcdTVGRkRcdTc1NjUnLFxuXHRcdFx0XHRcdFx0Y2xzOiAna25vd2xlZGdlLWFyay1pc3N1ZS1idXR0b24nIFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHVuaWdub3JlQnV0dG9uRWwub25DbGlja0V2ZW50KCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMudW5pZ25vcmVJc3N1ZShpc3N1ZS5pZCk7XG5cdFx0XHRcdFx0XHQvLyBVcGRhdGUgYnV0dG9uIHRleHQgdG8gJ1x1NUZGRFx1NzU2NSdcblx0XHRcdFx0XHRcdGlnbm9yZUJ1dHRvbkVsLnNldFRleHQoJ1x1NUZGRFx1NzU2NScpO1xuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSB1bmlnbm9yZSBidXR0b25cblx0XHRcdFx0XHRcdHVuaWdub3JlQnV0dG9uRWwucmVtb3ZlKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gVG9nZ2xlIGNhcmQgY29udGVudFxuXHRcdFx0Y29uc3QgdG9nZ2xlQ29udGVudCA9ICgpID0+IHtcblx0XHRcdFx0aWYgKGNvbnRlbnRFbC5pc1Nob3duKCkpIHtcblx0XHRcdFx0XHRjb250ZW50RWwuaGlkZSgpO1xuXHRcdFx0XHRcdHRvZ2dsZUVsLmlubmVySFRNTCA9IGV4cGFuZEljb247XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGVudEVsLnNob3coKTtcblx0XHRcdFx0XHR0b2dnbGVFbC5pbm5lckhUTUwgPSBjb2xsYXBzZUljb247XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdHRvZ2dsZUVsLm9uQ2xpY2tFdmVudCgoZXZ0KSA9PiB7XG5cdFx0XHRcdC8vIFN0b3AgcHJvcGFnYXRpb24gdG8gcHJldmVudCBoZWFkZXIgY2xpY2sgZXZlbnRcblx0XHRcdFx0ZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR0b2dnbGVDb250ZW50KCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aGVhZGVyRWwub25DbGlja0V2ZW50KHRvZ2dsZUNvbnRlbnQpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgcmVuZGVySGVhbHRoeU5vdGVzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcblx0XHRjb25zdCBpc0VuZ2xpc2ggPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJztcblx0XHQvLyBDcmVhdGUgYSBzZWN0aW9uIGZvciBoZWFsdGh5IG5vdGVzXG5cdFx0Y29uc3Qgc2VjdGlvbkVsID0gY29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2tub3dsZWRnZS1hcmstaGVhbHRoeS1ub3Rlcy1zZWN0aW9uJyB9KTtcblx0XHRcblx0XHQvLyBTZWN0aW9uIGhlYWRlclxuXHRcdGNvbnN0IGhlYWRlckVsID0gc2VjdGlvbkVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2tub3dsZWRnZS1hcmstY2FyZC1oZWFkZXInIH0pO1xuXHRcdFxuXHRcdGNvbnN0IHRpdGxlQ29udGFpbmVyRWwgPSBoZWFkZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtdGl0bGUtY29udGFpbmVyJyB9KTtcblx0XHRjb25zdCB0aXRsZUVsID0gdGl0bGVDb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtdGl0bGUnIH0pO1xuXHRcdFxuXHRcdC8vIEFkZCBhIGNoZWNrbWFyayBpY29uIGJlZm9yZSB0aGUgdGl0bGVcblx0XHR0aXRsZUVsLmNyZWF0ZUVsKCdzcGFuJywgeyB0ZXh0OiAnXHUyNzA1ICcgfSk7XG5cdFx0dGl0bGVFbC5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogaXNFbmdsaXNoID8gJ0hlYWx0aHkgTm90ZXMgTGlzdCcgOiAnXHU1MDY1XHU1RUI3XHU3QjE0XHU4QkIwXHU1MjE3XHU4ODY4JyB9KTtcblx0XHRcblx0XHQvLyBHZXQgaGVhbHRoeSBub3Rlc1xuXHRcdGNvbnN0IGFsbElzc3VlcyA9IGF3YWl0IHRoaXMucGx1Z2luLnJ1bkRpYWdub3N0aWNzKCk7XG5cdFx0Y29uc3QgZXhwb3J0ZXIgPSBuZXcgRGF0YUV4cG9ydGVyKHRoaXMucGx1Z2luLCB0aGlzLmFwcCk7XG5cdFx0Y29uc3QgYWxsRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdFx0XG5cdFx0Ly8gRmlsdGVyIG91dCBleGNsdWRlZCBmb2xkZXJzIGFuZCBmaWxlcyB3aXRoIGV4Y2x1ZGVkIHRhZ3Ncblx0XHRjb25zdCBmaWxlcyA9IGFsbEZpbGVzLmZpbHRlcihmaWxlID0+IHtcblx0XHRcdC8vIENoZWNrIGlmIGZpbGUgaXMgaW4gZXhjbHVkZWQgZm9sZGVyc1xuXHRcdFx0Y29uc3QgaXNJbkV4Y2x1ZGVkRm9sZGVyID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoZm9sZGVyID0+IFxuXHRcdFx0XHRmaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIgKyAnLycpXG5cdFx0XHQpO1xuXHRcdFx0XG5cdFx0XHQvLyBHZXQgZmlsZSBjYWNoZSB0byBjaGVjayB0YWdzXG5cdFx0XHRjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdFx0XG5cdFx0XHQvLyBDaGVjayB0YWdzIGZyb20gZnJvbnRtYXR0ZXIgKGNvbnNpc3RlbnQgd2l0aCBkaWFnbm9zdGljIHJ1bGVzKVxuXHRcdFx0bGV0IGZpbGVUYWdzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFx0aWYgKGNhY2hlICYmIGNhY2hlLmZyb250bWF0dGVyICYmIGNhY2hlLmZyb250bWF0dGVyLnRhZ3MpIHtcblx0XHRcdFx0ZmlsZVRhZ3MgPSBBcnJheS5pc0FycmF5KGNhY2hlLmZyb250bWF0dGVyLnRhZ3MpIFxuXHRcdFx0XHRcdD8gY2FjaGUuZnJvbnRtYXR0ZXIudGFncyBcblx0XHRcdFx0XHQ6IGNhY2hlLmZyb250bWF0dGVyLnRhZ3Muc3BsaXQoJywnKS5tYXAoKHRhZzogc3RyaW5nKSA9PiB0YWcudHJpbSgpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gXHU2NTJGXHU2MzAxXHU1RTI2I1x1NTQ4Q1x1NEUwRFx1NUUyNiNcdTc2ODRcdTY4MDdcdTdCN0VcdTY4M0NcdTVGMEZcdUZGMENcdTRFMERcdTUzM0FcdTUyMDZcdTU5MjdcdTVDMEZcdTUxOTlcblx0XHRcdGNvbnN0IGhhc0V4Y2x1ZGVkVGFnID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzLmxlbmd0aCA+IDAgJiYgKCgpID0+IHtcblx0XHRcdFx0Y29uc3Qgbm9ybWFsaXplZEV4Y2x1ZGVkVGFncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcblx0XHRcdFx0XHR0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0KTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRGaWxlVGFncyA9IGZpbGVUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuXHRcdFx0XHRcdHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIG5vcm1hbGl6ZWRGaWxlVGFncy5zb21lKChmaWxlVGFnOiBzdHJpbmcpID0+IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MuaW5jbHVkZXMoZmlsZVRhZykpO1xuXHRcdFx0fSkoKTtcblx0XHRcdFxuXHRcdFx0Ly8gSW5jbHVkZSBmaWxlIG9ubHkgaWYgaXQncyBub3QgaW4gZXhjbHVkZWQgZm9sZGVyIGFuZCBkb2Vzbid0IGhhdmUgZXhjbHVkZWQgdGFnc1xuXHRcdFx0cmV0dXJuICFpc0luRXhjbHVkZWRGb2xkZXIgJiYgIWhhc0V4Y2x1ZGVkVGFnO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGNvbnN0IGhlYWx0aHlGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IFxuXHRcdCAgIWFsbElzc3Vlcy5zb21lKGlzc3VlID0+IGlzc3VlLmZpbGVQYXRoID09PSBmaWxlLnBhdGgpXG5cdFx0KTtcblx0XHRcblx0XHQvLyBDcmVhdGUgYSBjb250YWluZXIgZm9yIGJhZGdlIGFuZCB0b2dnbGUgYnV0dG9uXG5cdFx0Y29uc3QgYmFkZ2VUb2dnbGVDb250YWluZXJFbCA9IGhlYWRlckVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2tub3dsZWRnZS1hcmstYmFkZ2UtdG9nZ2xlLWNvbnRhaW5lcicgfSk7XG5cdFx0XG5cdFx0Ly8gVXBkYXRlIGJhZGdlIHdpdGggY291bnRcblx0XHRiYWRnZVRvZ2dsZUNvbnRhaW5lckVsLmNyZWF0ZUVsKCdzcGFuJywgeyBcblx0XHRcdHRleHQ6IGhlYWx0aHlGaWxlcy5sZW5ndGgudG9TdHJpbmcoKSwgXG5cdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtYmFkZ2UnIFxuXHRcdH0pO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSB0b2dnbGUgYnV0dG9uIHdpdGggU1ZHIGljb25cblx0XHRjb25zdCB0b2dnbGVFbCA9IGJhZGdlVG9nZ2xlQ29udGFpbmVyRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgXG5cdFx0XHRjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtdG9nZ2xlJyBcblx0XHR9KTtcblx0XHRcblx0XHQvLyBTVkcgaWNvbnMgZm9yIGV4cGFuZC9jb2xsYXBzZVxuXHRcdGNvbnN0IGV4cGFuZEljb24gPSBgPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCI+PHBvbHlsaW5lIHBvaW50cz1cIjYgOSAxMiAxNSAxOCA5XCI+PC9wb2x5bGluZT48L3N2Zz5gO1xuXHRcdGNvbnN0IGNvbGxhcHNlSWNvbiA9IGA8c3ZnIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIj48cG9seWxpbmUgcG9pbnRzPVwiMTggMTUgMTIgOSA2IDE1XCI+PC9wb2x5bGluZT48L3N2Zz5gO1xuXHRcdFxuXHRcdHRvZ2dsZUVsLmlubmVySFRNTCA9IGV4cGFuZEljb247XG5cdFx0XG5cdFx0Ly8gQ2FyZCBjb250ZW50IChpbml0aWFsbHkgaGlkZGVuKVxuXHRcdGNvbnN0IGNvbnRlbnRFbCA9IHNlY3Rpb25FbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdrbm93bGVkZ2UtYXJrLWNhcmQtY29udGVudCcgfSk7XG5cdFx0Y29udGVudEVsLmhpZGUoKTtcblx0XHRcblx0XHQvLyBBZGQgYSBjaGVja21hcmsgaWNvbiBiZWZvcmUgdGhlIHRpdGxlXG5cdFx0dGl0bGVFbC5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogJ1x1MjcwNSAnIH0pO1xuXHRcdHRpdGxlRWwuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6IGlzRW5nbGlzaCA/ICdIZWFsdGh5IE5vdGVzIExpc3QnIDogJ1x1NTA2NVx1NUVCN1x1N0IxNFx1OEJCMFx1NTIxN1x1ODg2OCcgfSk7XG5cdFx0XG5cdFx0Ly8gQ3JlYXRlIHRhYmxlIGZvciBoZWFsdGh5IG5vdGVzXG5cdFx0XHRjb25zdCB0YWJsZUVsID0gY29udGVudEVsLmNyZWF0ZUVsKCd0YWJsZScsIHsgY2xzOiAna25vd2xlZGdlLWFyay1pc3N1ZS10YWJsZScgfSk7XG5cdFx0XHRjb25zdCB0aGVhZEVsID0gdGFibGVFbC5jcmVhdGVFbCgndGhlYWQnKTtcblx0XHRcdGNvbnN0IGhlYWRlclJvd0VsID0gdGhlYWRFbC5jcmVhdGVFbCgndHInKTtcblx0XHRcdFxuXHRcdFx0Ly8gQ3JlYXRlIHNvcnRhYmxlIGhlYWRlcnNcblx0XHRcdGNvbnN0IGZpbGVOYW1lSGVhZGVyID0gaGVhZGVyUm93RWwuY3JlYXRlRWwoJ3RoJywgeyB0ZXh0OiBpc0VuZ2xpc2ggPyAnRmlsZSBOYW1lJyA6ICdcdTY1ODdcdTRFRjZcdTU0MEQnLCBjbHM6ICdzb3J0YWJsZS1oZWFkZXInIH0pO1xuXHRcdFx0Y29uc3QgZG9tYWluSGVhZGVyID0gaGVhZGVyUm93RWwuY3JlYXRlRWwoJ3RoJywgeyB0ZXh0OiBpc0VuZ2xpc2ggPyAnRG9tYWluJyA6ICdcdTk4ODZcdTU3REYnLCBjbHM6ICdzb3J0YWJsZS1oZWFkZXInIH0pO1xuXHRcdFx0Y29uc3QgdHlwZUhlYWRlciA9IGhlYWRlclJvd0VsLmNyZWF0ZUVsKCd0aCcsIHsgdGV4dDogaXNFbmdsaXNoID8gJ1R5cGUnIDogJ1x1N0M3Qlx1NTc4QicsIGNsczogJ3NvcnRhYmxlLWhlYWRlcicgfSk7XG5cdFx0XHRcblx0XHRcdGNvbnN0IHRib2R5RWwgPSB0YWJsZUVsLmNyZWF0ZUVsKCd0Ym9keScpO1xuXHRcdFx0XG5cdFx0XHQvLyBQcmVwYXJlIGRhdGEgZm9yIHNvcnRpbmdcblx0XHRcdGNvbnN0IGhlYWx0aHlOb3Rlc0RhdGEgPSBoZWFsdGh5RmlsZXMubWFwKGZpbGUgPT4ge1xuXHRcdFx0XHRjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdFx0XHRjb25zdCBkb21haW4gPSBjYWNoZT8uZnJvbnRtYXR0ZXI/LmRvbWFpbiB8fCAnJztcblx0XHRcdFx0Y29uc3QgdHlwZSA9IGNhY2hlPy5mcm9udG1hdHRlcj8udHlwZSB8fCAnJztcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZmlsZSxcblx0XHRcdFx0XHRmaWxlTmFtZTogZmlsZS5uYW1lLFxuXHRcdFx0XHRcdGRvbWFpbixcblx0XHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRcdHBpbnlpbjogdGhpcy5nZXRQaW55aW4oZmlsZS5uYW1lKVxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGxldCBjdXJyZW50U29ydEZpZWxkID0gJyc7XG5cdFx0XHRsZXQgY3VycmVudFNvcnREaXJlY3Rpb24gPSAnYXNjJztcblx0XHRcdFxuXHRcdFx0Y29uc3QgcmVuZGVyVGFibGUgPSAoZGF0YTogYW55W10sIHNvcnRGaWVsZDogc3RyaW5nLCBkaXJlY3Rpb246IHN0cmluZykgPT4ge1xuXHRcdFx0XHR0Ym9keUVsLmVtcHR5KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBTb3J0IGRhdGFcblx0XHRcdFx0Y29uc3Qgc29ydGVkRGF0YSA9IFsuLi5kYXRhXS5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRcdFx0bGV0IHZhbHVlQSA9IGFbc29ydEZpZWxkXTtcblx0XHRcdFx0XHRsZXQgdmFsdWVCID0gYltzb3J0RmllbGRdO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEhhbmRsZSBlbXB0eSB2YWx1ZXNcblx0XHRcdFx0XHRpZiAoIXZhbHVlQSkgdmFsdWVBID0gJyc7XG5cdFx0XHRcdFx0aWYgKCF2YWx1ZUIpIHZhbHVlQiA9ICcnO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENvbnZlcnQgdG8gc3RyaW5nIGZvciBjb21wYXJpc29uXG5cdFx0XHRcdFx0Y29uc3Qgc3RyQSA9IFN0cmluZyh2YWx1ZUEpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0Y29uc3Qgc3RyQiA9IFN0cmluZyh2YWx1ZUIpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0bGV0IHJlc3VsdCA9IDA7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gU3BlY2lhbCBoYW5kbGluZyBmb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzIGFuZCBwaW55aW5cblx0XHRcdFx0XHRpZiAoc29ydEZpZWxkID09PSAnZmlsZU5hbWUnKSB7XG5cdFx0XHRcdFx0XHQvLyBUcnkgcGlueWluIGZpcnN0LCB0aGVuIGZhbGxiYWNrIHRvIHN0cmluZyBjb21wYXJpc29uXG5cdFx0XHRcdFx0XHRjb25zdCBwaW55aW5BID0gYS5waW55aW4gfHwgc3RyQTtcblx0XHRcdFx0XHRcdGNvbnN0IHBpbnlpbkIgPSBiLnBpbnlpbiB8fCBzdHJCO1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gcGlueWluQS5sb2NhbGVDb21wYXJlKHBpbnlpbkIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBzdHJBLmxvY2FsZUNvbXBhcmUoc3RyQik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiBkaXJlY3Rpb24gPT09ICdhc2MnID8gcmVzdWx0IDogLXJlc3VsdDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBSZW5kZXIgcm93c1xuXHRcdFx0XHRmb3IgKGNvbnN0IG5vdGUgb2Ygc29ydGVkRGF0YSkge1xuXHRcdFx0XHRcdGNvbnN0IHJvd0VsID0gdGJvZHlFbC5jcmVhdGVFbCgndHInKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBGaWxlIG5hbWVcblx0XHRcdFx0XHRjb25zdCBmaWxlQ2VsbEVsID0gcm93RWwuY3JlYXRlRWwoJ3RkJyk7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZUxpbmtFbCA9IGZpbGVDZWxsRWwuY3JlYXRlRWwoJ2EnLCB7IFxuXHRcdFx0XHRcdFx0dGV4dDogbm90ZS5maWxlTmFtZSxcblx0XHRcdFx0XHRcdGhyZWY6ICcjJyBcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRmaWxlTGlua0VsLm9uQ2xpY2tFdmVudCgoZXZ0KSA9PiB7XG5cdFx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKG5vdGUuZmlsZSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gRG9tYWluXG5cdFx0XHRcdFx0cm93RWwuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiBub3RlLmRvbWFpbiB9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBUeXBlXG5cdFx0XHRcdFx0cm93RWwuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiBub3RlLnR5cGUgfSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdC8vIEFkZCBjbGljayBoYW5kbGVycyBmb3Igc29ydGluZ1xuXHRcdFx0Y29uc3QgYWRkU29ydEhhbmRsZXIgPSAoaGVhZGVyOiBIVE1MRWxlbWVudCwgZmllbGQ6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRoZWFkZXIuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuXHRcdFx0XHRoZWFkZXIuc3R5bGUudXNlclNlbGVjdCA9ICdub25lJztcblx0XHRcdFx0XG5cdFx0XHRcdGhlYWRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0XHRpZiAoY3VycmVudFNvcnRGaWVsZCA9PT0gZmllbGQpIHtcblx0XHRcdFx0XHRcdGN1cnJlbnRTb3J0RGlyZWN0aW9uID0gY3VycmVudFNvcnREaXJlY3Rpb24gPT09ICdhc2MnID8gJ2Rlc2MnIDogJ2FzYyc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGN1cnJlbnRTb3J0RmllbGQgPSBmaWVsZDtcblx0XHRcdFx0XHRcdGN1cnJlbnRTb3J0RGlyZWN0aW9uID0gJ2FzYyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFVwZGF0ZSBoZWFkZXIgaW5kaWNhdG9yc1xuXHRcdFx0XHRcdGNvbnN0IGFsbEhlYWRlcnMgPSB0aGVhZEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zb3J0YWJsZS1oZWFkZXInKTtcblx0XHRcdFx0XHRhbGxIZWFkZXJzLmZvckVhY2goaCA9PiBoLmNsYXNzTGlzdC5yZW1vdmUoJ3NvcnRlZC1hc2MnLCAnc29ydGVkLWRlc2MnKSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29uc3QgZGlyZWN0aW9uQ2xhc3MgPSBjdXJyZW50U29ydERpcmVjdGlvbiA9PT0gJ2FzYycgPyAnc29ydGVkLWFzYycgOiAnc29ydGVkLWRlc2MnO1xuXHRcdFx0XHRcdGhlYWRlci5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbkNsYXNzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZW5kZXJUYWJsZShoZWFsdGh5Tm90ZXNEYXRhLCBjdXJyZW50U29ydEZpZWxkLCBjdXJyZW50U29ydERpcmVjdGlvbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0Ly8gQWRkIHNvcnQgaW5kaWNhdG9ycyBDU1Ncblx0XHRcdGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0XHRcdHN0eWxlLnRleHRDb250ZW50ID0gYFxuXHRcdFx0XHQuc29ydGFibGUtaGVhZGVyIHtcblx0XHRcdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0XHRcdFx0cGFkZGluZy1yaWdodDogMjBweDtcblx0XHRcdFx0fVxuXHRcdFx0XHQuc29ydGFibGUtaGVhZGVyOmhvdmVyIHtcblx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0LnNvcnRlZC1hc2M6OmFmdGVyIHtcblx0XHRcdFx0XHRjb250ZW50OiAnIFx1MjE5MSc7XG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0XHRcdHJpZ2h0OiA1cHg7XG5cdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtYWNjZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHQuc29ydGVkLWRlc2M6OmFmdGVyIHtcblx0XHRcdFx0XHRjb250ZW50OiAnIFx1MjE5Myc7XG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0XHRcdHJpZ2h0OiA1cHg7XG5cdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtYWNjZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0YDtcblx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdFx0XG5cdFx0XHQvLyBJbml0aWFsaXplIHdpdGggZmlsZSBuYW1lIHNvcnRpbmdcblx0XHRcdGFkZFNvcnRIYW5kbGVyKGZpbGVOYW1lSGVhZGVyLCAnZmlsZU5hbWUnKTtcblx0XHRcdGFkZFNvcnRIYW5kbGVyKGRvbWFpbkhlYWRlciwgJ2RvbWFpbicpO1xuXHRcdFx0YWRkU29ydEhhbmRsZXIodHlwZUhlYWRlciwgJ3R5cGUnKTtcblx0XHRcdFxuXHRcdFx0Ly8gSW5pdGlhbCByZW5kZXJcblx0XHRcdHJlbmRlclRhYmxlKGhlYWx0aHlOb3Rlc0RhdGEsICdmaWxlTmFtZScsICdhc2MnKTtcblx0XHRcblx0XHQvLyBUb2dnbGUgY29udGVudFxuXHRcdGNvbnN0IHRvZ2dsZUNvbnRlbnQgPSAoKSA9PiB7XG5cdFx0XHRpZiAoY29udGVudEVsLmlzU2hvd24oKSkge1xuXHRcdFx0XHRjb250ZW50RWwuaGlkZSgpO1xuXHRcdFx0XHR0b2dnbGVFbC5pbm5lckhUTUwgPSBleHBhbmRJY29uO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29udGVudEVsLnNob3coKTtcblx0XHRcdFx0dG9nZ2xlRWwuaW5uZXJIVE1MID0gY29sbGFwc2VJY29uO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0XG5cdFx0dG9nZ2xlRWwub25DbGlja0V2ZW50KChldnQpID0+IHtcblx0XHRcdC8vIFN0b3AgcHJvcGFnYXRpb24gdG8gcHJldmVudCBoZWFkZXIgY2xpY2sgZXZlbnRcblx0XHRcdGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdHRvZ2dsZUNvbnRlbnQoKTtcblx0XHR9KTtcblx0XHRcblx0XHRoZWFkZXJFbC5vbkNsaWNrRXZlbnQodG9nZ2xlQ29udGVudCk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBrbm93bGVkZ2UgYXRvbXMgYmFzZWQgb24gdXNlci1kZWZpbmVkIHR5cGVzXG5cdCAqIEByZXR1cm5zIFRoZSBjb3VudCBvZiBrbm93bGVkZ2UgYXRvbXNcblx0ICovXG5cdHByaXZhdGUgY2FsY3VsYXRlQXRvbUNvdW50KCk6IG51bWJlciB7XG5cdFx0Y29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdFx0bGV0IGF0b21Db3VudCA9IDA7XG5cdFx0XG5cdFx0Zm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG5cdFx0XHRjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdFx0Y29uc3QgdHlwZSA9IGNhY2hlPy5mcm9udG1hdHRlcj8udHlwZTtcblx0XHRcdFxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIGZpbGUncyB0eXBlIG1hdGNoZXMgYW55IG9mIHRoZSB1c2VyLWRlZmluZWQga25vd2xlZGdlIGF0b20gdHlwZXNcblx0XHRcdGlmICh0eXBlICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmtub3dsZWRnZUF0b21UeXBlcy5pbmNsdWRlcyh0eXBlKSkge1xuXHRcdFx0XHRhdG9tQ291bnQrKztcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGF0b21Db3VudDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENhbGN1bGF0ZSB0aGUgY29ubmVjdGlvbiBkZW5zaXR5IG9mIHRoZSBrbm93bGVkZ2UgZ3JhcGhcblx0ICogQHJldHVybnMgVGhlIGNvbm5lY3Rpb24gZGVuc2l0eSBhcyBhIHN0cmluZyBpbiB0aGUgZm9ybWF0IFwiW1x1MjE5MSBpbmJvdW5kQXZnXSBbXHUyMTkzIG91dGJvdW5kQXZnXVwiXG5cdCAqL1xuXHQvKipcblx0ICogQ29udmVydCBDaGluZXNlIGNoYXJhY3RlcnMgdG8gcGlueWluIGZvciBzb3J0aW5nXG5cdCAqIEBwYXJhbSB0ZXh0IElucHV0IHRleHRcblx0ICogQHJldHVybnMgUGlueWluIHN0cmluZyBmb3Igc29ydGluZ1xuXHQgKi9cblx0cHJpdmF0ZSBnZXRQaW55aW4odGV4dDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHQvLyBTaW1wbGUgcGlueWluIG1hcHBpbmcgZm9yIGNvbW1vbiBDaGluZXNlIGNoYXJhY3RlcnNcblx0XHRjb25zdCBwaW55aW5NYXA6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG5cdFx0XHQnXHU1NTRBJzogJ2EnLCAnXHU1NDI3JzogJ2JhJywgJ1x1NjI0RCc6ICdjYWknLCAnXHU3Njg0JzogJ2RlJywgJ1x1OTg5RCc6ICdlJywgJ1x1NTNEMSc6ICdmYScsICdcdTdFRDknOiAnZ2VpJyxcblx0XHRcdCdcdTU0QzgnOiAnaGEnLCAnXHU2NjJGJzogJ3NoaScsICdcdTVDMzEnOiAnaml1JywgJ1x1NzcwQic6ICdrYW4nLCAnXHU0RTg2JzogJ2xlJywgJ1x1NTQxNyc6ICdtYScsXG5cdFx0XHQnXHU0RjYwJzogJ25pJywgJ1x1NTRFNic6ICdvJywgJ1x1NjAxNSc6ICdwYScsICdcdTUzQkInOiAncXUnLCAnXHU0RUJBJzogJ3JlbicsICdcdTRFMDknOiAnc2FuJyxcblx0XHRcdCdcdTRFRDYnOiAndGEnLCAnXHU2MjExJzogJ3dvJywgJ1x1NjBGMyc6ICd4aWFuZycsICdcdTRFMDAnOiAneWknLCAnXHU1NzI4JzogJ3phaScsXG5cdFx0XHQnXHU5NjNGJzogJ2EnLCAnXHU1MTZCJzogJ2JhJywgJ1x1NjRFNic6ICdjYScsICdcdTdCNTQnOiAnZGEnLCAnXHU0RkM0JzogJ2UnLFxuXHRcdFx0J1x1NTY3Nic6ICdnYScsICdcdTUxRkInOiAnamknLCAnXHU1MzYxJzogJ2thJywgJ1x1NjJDOSc6ICdsYScsXG5cdFx0XHQnXHU5MEEzJzogJ25hJywgJ1x1NTU2QSc6ICdwYScsICdcdTRFMDMnOiAncWknLCAnXHU3MTM2JzogJ3JhbicsICdcdTY0OTInOiAnc2EnLFxuXHRcdFx0J1x1NTRDNyc6ICd3YScsICdcdTg5N0YnOiAneGknLCAnXHU1NDQwJzogJ3lhJywgJ1x1Njc0Mic6ICd6YScsXG5cdFx0XHQnXHU1Qjg5JzogJ2FuJywgJ1x1NzY3RCc6ICdiYWknLCAnXHU5MUM3JzogJ2NhaScsICdcdTVFMjYnOiAnZGFpJywgJ1x1OEJGNic6ICdlaScsXG5cdFx0XHQnXHU4QkU1JzogJ2dhaScsICdcdTZENzcnOiAnaGFpJywgJ1x1NUJCNic6ICdqaWEnLCAnXHU1RjAwJzogJ2thaScsICdcdTY3NjUnOiAnbGFpJywgJ1x1NEU3MCc6ICdtYWknLFxuXHRcdFx0J1x1NEU0Myc6ICduYWknLCAnXHU2QjI3JzogJ291JywgJ1x1NjJDRCc6ICdwYWknLCAnXHU1MzQzJzogJ3FpYW4nLCAnXHU4QkE5JzogJ3JhbmcnLCAnXHU4RDVCJzogJ3NhaScsXG5cdFx0XHQnXHU1OTJBJzogJ3RhaScsICdcdTU5MTYnOiAnd2FpJywgJ1x1NTE0OCc6ICd4aWFuJywgJ1x1NTE4RCc6ICd6YWknLFxuXHRcdFx0J1x1NjYwMic6ICdhbmcnLCAnXHU1RTJFJzogJ2JhbmcnLCAnXHU0RUQzJzogJ2NhbmcnLCAnXHU1RjUzJzogJ2RhbmcnLFxuXHRcdFx0J1x1NTIxQSc6ICdnYW5nJywgJ1x1ODIyQSc6ICdoYW5nJywgJ1x1NUMwNic6ICdqaWFuZycsICdcdTVFQjcnOiAna2FuZycsXG5cdFx0XHQnXHU5MENFJzogJ2xhbmcnLCAnXHU1RkQ5JzogJ21hbmcnLCAnXHU1NkNBJzogJ25hbmcnLCAnXHU2NUMxJzogJ3BhbmcnLCAnXHU1RjNBJzogJ3FpYW5nJyxcblx0XHRcdCdcdTY4NTEnOiAnc2FuZycsICdcdTU1MTAnOiAndGFuZycsICdcdTczOEInOiAnd2FuZycsICdcdTk5OTknOiAneGlhbmcnLCAnXHU1RjIwJzogJ3poYW5nJ1xuXHRcdH07XG5cdFx0XG5cdFx0Ly8gQ29udmVydCBDaGluZXNlIGNoYXJhY3RlcnMgdG8gcGlueWluXG5cdFx0bGV0IHBpbnlpbiA9ICcnO1xuXHRcdGZvciAoY29uc3QgY2hhciBvZiB0ZXh0KSB7XG5cdFx0XHRjb25zdCBjaGFyUGlueWluID0gcGlueWluTWFwW2NoYXJdO1xuXHRcdFx0aWYgKGNoYXJQaW55aW4pIHtcblx0XHRcdFx0cGlueWluICs9IGNoYXJQaW55aW47XG5cdFx0XHR9IGVsc2UgaWYgKC9bXFx1NGUwMC1cXHU5ZmZmXS8udGVzdChjaGFyKSkge1xuXHRcdFx0XHQvLyBGb3IgdW5rbm93biBDaGluZXNlIGNoYXJhY3RlcnMsIHVzZSBhIHBsYWNlaG9sZGVyXG5cdFx0XHRcdHBpbnlpbiArPSAneic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBGb3Igbm9uLUNoaW5lc2UgY2hhcmFjdGVycywga2VlcCBhcy1pc1xuXHRcdFx0XHRwaW55aW4gKz0gY2hhci50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcGlueWluO1xuXHR9XG5cdFxuXHRwcml2YXRlIGNhbGN1bGF0ZUNvbm5lY3Rpb25EZW5zaXR5KCk6IHN0cmluZyB7XG5cdFx0Ly8gR2V0IGFsbCBtYXJrZG93biBmaWxlc1xuXHRcdGNvbnN0IGFsbEZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXHRcdFxuXHRcdC8vIEZpbHRlciBvdXQgZXhjbHVkZWQgZm9sZGVycyBhbmQgZmlsZXMgd2l0aCBleGNsdWRlZCB0YWdzXG5cdFx0Y29uc3QgZmlsZXMgPSBhbGxGaWxlcy5maWx0ZXIoZmlsZSA9PiB7XG5cdFx0XHQvLyBDaGVjayBpZiBmaWxlIGlzIGluIGV4Y2x1ZGVkIGZvbGRlcnNcblx0XHRcdGNvbnN0IGlzSW5FeGNsdWRlZEZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRm9sZGVycy5zb21lKGZvbGRlciA9PiBcblx0XHRcdFx0ZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyICsgJy8nKVxuXHRcdFx0KTtcblx0XHRcdFxuXHRcdFx0Ly8gR2V0IGZpbGUgY2FjaGUgdG8gY2hlY2sgdGFnc1xuXHRcdFx0Y29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcblx0XHRcdFxuXHRcdFx0Ly8gQ2hlY2sgdGFncyBmcm9tIGZyb250bWF0dGVyIChjb25zaXN0ZW50IHdpdGggZGlhZ25vc3RpYyBydWxlcylcblx0XHRcdGxldCBmaWxlVGFnczogc3RyaW5nW10gPSBbXTtcblx0XHRcdGlmIChjYWNoZSAmJiBjYWNoZS5mcm9udG1hdHRlciAmJiBjYWNoZS5mcm9udG1hdHRlci50YWdzKSB7XG5cdFx0XHRcdGZpbGVUYWdzID0gQXJyYXkuaXNBcnJheShjYWNoZS5mcm9udG1hdHRlci50YWdzKSBcblx0XHRcdFx0XHQ/IGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgXG5cdFx0XHRcdFx0OiBjYWNoZS5mcm9udG1hdHRlci50YWdzLnNwbGl0KCcsJykubWFwKCh0YWc6IHN0cmluZykgPT4gdGFnLnRyaW0oKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFx1NjUyRlx1NjMwMVx1NUUyNiNcdTU0OENcdTRFMERcdTVFMjYjXHU3Njg0XHU2ODA3XHU3QjdFXHU2ODNDXHU1RjBGXHVGRjBDXHU0RTBEXHU1MzNBXHU1MjA2XHU1OTI3XHU1QzBGXHU1MTk5XG5cdFx0XHRjb25zdCBoYXNFeGNsdWRlZFRhZyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5sZW5ndGggPiAwICYmICgoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubWFwKCh0YWc6IHN0cmluZykgPT4gXG5cdFx0XHRcdFx0dGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zdCBub3JtYWxpemVkRmlsZVRhZ3MgPSBmaWxlVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcblx0XHRcdFx0XHR0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0KTtcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiBub3JtYWxpemVkRmlsZVRhZ3Muc29tZSgoZmlsZVRhZzogc3RyaW5nKSA9PiBub3JtYWxpemVkRXhjbHVkZWRUYWdzLmluY2x1ZGVzKGZpbGVUYWcpKTtcblx0XHRcdH0pKCk7XG5cdFx0XHRcblx0XHRcdC8vIEluY2x1ZGUgZmlsZSBvbmx5IGlmIGl0J3Mgbm90IGluIGV4Y2x1ZGVkIGZvbGRlciBhbmQgZG9lc24ndCBoYXZlIGV4Y2x1ZGVkIHRhZ3Ncblx0XHRcdHJldHVybiAhaXNJbkV4Y2x1ZGVkRm9sZGVyICYmICFoYXNFeGNsdWRlZFRhZztcblx0XHR9KTtcblx0XHRcblx0XHRjb25zdCB0b3RhbEZpbGVzID0gZmlsZXMubGVuZ3RoO1xuXHRcdFxuXHRcdC8vIElmIHRoZXJlIGFyZSBubyBmaWxlcywgcmV0dXJuIGRlZmF1bHQgdmFsdWVzXG5cdFx0aWYgKHRvdGFsRmlsZXMgPT09IDApIHtcblx0XHRcdHJldHVybiBcIltcdTIxOTEgMF0gW1x1MjE5MyAwXVwiO1xuXHRcdH1cblx0XHRcblx0XHRsZXQgdG90YWxJbmJvdW5kTGlua3MgPSAwO1xuXHRcdGxldCB0b3RhbE91dGJvdW5kTGlua3MgPSAwO1xuXHRcdFxuXHRcdC8vIEdldCByZXNvbHZlZCBsaW5rcyBmcm9tIG1ldGFkYXRhIGNhY2hlXG5cdFx0Y29uc3QgcmVzb2x2ZWRMaW5rcyA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUucmVzb2x2ZWRMaW5rcztcblx0XHRcblx0XHQvLyBJdGVyYXRlIHRocm91Z2ggZmlsdGVyZWQgZmlsZXMgdG8gY291bnQgbGlua3Ncblx0XHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcblx0XHRcdC8vIENvdW50IG91dGJvdW5kIGxpbmtzIChsaW5rcyB0byBvdGhlciBmaWxlcylcblx0XHRcdGNvbnN0IG91dGJvdW5kTGlua3MgPSByZXNvbHZlZExpbmtzW2ZpbGUucGF0aF0gPyBPYmplY3QudmFsdWVzKHJlc29sdmVkTGlua3NbZmlsZS5wYXRoXSkucmVkdWNlKChzdW0sIGNvdW50KSA9PiBzdW0gKyBjb3VudCwgMCkgOiAwO1xuXHRcdFx0dG90YWxPdXRib3VuZExpbmtzICs9IG91dGJvdW5kTGlua3M7XG5cdFx0XHRcblx0XHRcdC8vIENvdW50IGluYm91bmQgbGlua3MgKGJhY2tsaW5rcyBmcm9tIG90aGVyIGZpbGVzKVxuXHRcdFx0bGV0IGluYm91bmRMaW5rcyA9IDA7XG5cdFx0XHRmb3IgKGNvbnN0IHNvdXJjZVBhdGggaW4gcmVzb2x2ZWRMaW5rcykge1xuXHRcdFx0XHQvLyBDaGVjayBpZiBzb3VyY2UgZmlsZSBpcyBhbHNvIGluIG91ciBmaWx0ZXJlZCBsaXN0XG5cdFx0XHRcdGNvbnN0IHNvdXJjZUZpbGUgPSBhbGxGaWxlcy5maW5kKGYgPT4gZi5wYXRoID09PSBzb3VyY2VQYXRoKTtcblx0XHRcdFx0aWYgKHNvdXJjZUZpbGUpIHtcblx0XHRcdFx0XHQvLyBDaGVjayBpZiBzb3VyY2UgZmlsZSBzaG91bGQgYmUgaW5jbHVkZWRcblx0XHRcdFx0XHRjb25zdCBzb3VyY2VDYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHNvdXJjZUZpbGUpO1xuXHRcdFx0XHRcdGNvbnN0IHNvdXJjZVRhZ3MgPSBzb3VyY2VDYWNoZT8udGFncz8ubWFwKHRhZyA9PiB0YWcudGFnKSB8fCBbXTtcblx0XHRcdFx0XHRjb25zdCBpc1NvdXJjZUluRXhjbHVkZWRGb2xkZXIgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZvbGRlcnMuc29tZShmb2xkZXIgPT4gXG5cdFx0XHRcdFx0XHRzb3VyY2VGaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIgKyAnLycpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRjb25zdCBoYXNTb3VyY2VFeGNsdWRlZFRhZyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5zb21lKGV4Y2x1ZGVkVGFnID0+IFxuXHRcdFx0XHRcdFx0c291cmNlVGFncy5pbmNsdWRlcygnIycgKyBleGNsdWRlZFRhZylcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIE9ubHkgY291bnQgbGlua3MgZnJvbSBpbmNsdWRlZCBmaWxlc1xuXHRcdFx0XHRcdGlmICghaXNTb3VyY2VJbkV4Y2x1ZGVkRm9sZGVyICYmICFoYXNTb3VyY2VFeGNsdWRlZFRhZykge1xuXHRcdFx0XHRcdFx0aWYgKHJlc29sdmVkTGlua3Nbc291cmNlUGF0aF1bZmlsZS5wYXRoXSkge1xuXHRcdFx0XHRcdFx0XHRpbmJvdW5kTGlua3MgKz0gcmVzb2x2ZWRMaW5rc1tzb3VyY2VQYXRoXVtmaWxlLnBhdGhdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dG90YWxJbmJvdW5kTGlua3MgKz0gaW5ib3VuZExpbmtzO1xuXHRcdH1cblx0XHRcblx0XHQvLyBDYWxjdWxhdGUgYXZlcmFnZXNcblx0XHRjb25zdCBpbmJvdW5kQXZnID0gKHRvdGFsSW5ib3VuZExpbmtzIC8gdG90YWxGaWxlcykudG9GaXhlZCgxKTtcblx0XHRjb25zdCBvdXRib3VuZEF2ZyA9ICh0b3RhbE91dGJvdW5kTGlua3MgLyB0b3RhbEZpbGVzKS50b0ZpeGVkKDEpO1xuXHRcdFxuXHRcdC8vIFJldHVybiBmb3JtYXR0ZWQgc3RyaW5nXG5cdFx0cmV0dXJuIGBbXHUyMTkxICR7aW5ib3VuZEF2Z31dIFtcdTIxOTMgJHtvdXRib3VuZEF2Z31dYDtcblx0fVxuXHRcblx0YXN5bmMgcmVjaGVja0ZpbGVJc3N1ZXMoZmlsZVBhdGg6IHN0cmluZywgcnVsZUlkOiBzdHJpbmcsIGlzc3VlUm93RWw6IEhUTUxFbGVtZW50KSB7XG5cdFx0Y29uc3QgaXNFbmdsaXNoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbic7XG5cdFx0XG5cdFx0Ly8gU2hvdyBsb2FkaW5nIHN0YXRlXG5cdFx0Y29uc3Qgb3JpZ2luYWxUZXh0ID0gaXNzdWVSb3dFbC5xdWVyeVNlbGVjdG9yKCcua25vd2xlZGdlLWFyay1pc3N1ZS1idXR0b24nKT8udGV4dENvbnRlbnQ7XG5cdFx0Y29uc3QgcmVjaGVja0J1dHRvbiA9IGlzc3VlUm93RWwucXVlcnlTZWxlY3RvcignLmtub3dsZWRnZS1hcmstaXNzdWUtYnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cdFx0aWYgKHJlY2hlY2tCdXR0b24pIHtcblx0XHRcdHJlY2hlY2tCdXR0b24udGV4dENvbnRlbnQgPSBpc0VuZ2xpc2ggPyAnQ2hlY2tpbmcuLi4nIDogJ1x1NjhDMFx1NjdFNVx1NEUyRC4uLic7XG5cdFx0XHRyZWNoZWNrQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgcnVsZSB0byByZWNoZWNrIHRoaXMgZmlsZVxuXHRcdFx0Y29uc3QgcnVsZVJlZ2lzdHJ5ID0gUnVsZVJlZ2lzdHJ5LmdldEluc3RhbmNlKCk7XG5cdFx0XHRjb25zdCBydWxlID0gcnVsZVJlZ2lzdHJ5LmdldFJ1bGVzKHRoaXMucGx1Z2luLCB0aGlzLmFwcCkuZmluZCgocjogRGlhZ25vc3RpY1J1bGUpID0+IHIuaWQgPT09IHJ1bGVJZCk7XG5cdFx0XHRcblx0XHRcdGlmICghcnVsZSkge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBSdWxlIG5vdCBmb3VuZDogJHtydWxlSWR9YCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gQ2hlY2sgdGhpcyBzcGVjaWZpYyBmaWxlXG5cdFx0XHRjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblx0XHRcdGlmICghZmlsZSB8fCAhKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgRmlsZSBub3QgZm91bmQ6ICR7ZmlsZVBhdGh9YCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gUnVuIHRoZSBydWxlIGNoZWNrIGZvciB0aGlzIHNwZWNpZmljIGZpbGVcblx0XHRcdGNvbnN0IG5ld0lzc3VlcyA9IGF3YWl0IHJ1bGUuY2hlY2soKTtcblx0XHRcdGNvbnN0IGZpbGVJc3N1ZXMgPSBuZXdJc3N1ZXMuZmlsdGVyKChpc3N1ZTogRGlhZ25vc3RpY0lzc3VlKSA9PiBpc3N1ZS5maWxlUGF0aCA9PT0gZmlsZVBhdGggJiYgIWlzc3VlLmlzSWdub3JlZCk7XG5cdFx0XHRcblx0XHRcdC8vIEZpbmQgdGhlIGV4aXN0aW5nIGlzc3VlIGZvciB0aGlzIGZpbGVcblx0XHRcdGNvbnN0IGV4aXN0aW5nSXNzdWVzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZWREaWFnbm9zaXNSZXN1bHRzPy5pc3N1ZXMgfHwgW107XG5cdFx0XHRjb25zdCBvbGRJc3N1ZSA9IGV4aXN0aW5nSXNzdWVzLmZpbmQoKGlzc3VlOiBEaWFnbm9zdGljSXNzdWUpID0+IFxuXHRcdFx0XHRpc3N1ZS5maWxlUGF0aCA9PT0gZmlsZVBhdGggJiYgXG5cdFx0XHRcdGlzc3VlLnJ1bGVJZCA9PT0gcnVsZUlkICYmIFxuXHRcdFx0XHQhaXNzdWUuaXNJZ25vcmVkXG5cdFx0XHQpO1xuXHRcdFx0XG5cdFx0XHQvLyBJZiB0aGUgaXNzdWUgaXMgZml4ZWQgKG5vIGxvbmdlciBleGlzdHMpXG5cdFx0XHRpZiAoZmlsZUlzc3Vlcy5sZW5ndGggPT09IDAgJiYgb2xkSXNzdWUpIHtcblx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBpc3N1ZSBmcm9tIHNhdmVkIHJlc3VsdHNcblx0XHRcdFx0Y29uc3QgdXBkYXRlZElzc3VlcyA9IGV4aXN0aW5nSXNzdWVzLmZpbHRlcigoaXNzdWU6IERpYWdub3N0aWNJc3N1ZSkgPT4gaXNzdWUuaWQgIT09IG9sZElzc3VlLmlkKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFVwZGF0ZSBzYXZlZCBkaWFnbm9zaXMgcmVzdWx0c1xuXHRcdFx0XHRjb25zdCBjdXJyZW50UmVzdWx0cyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVkRGlhZ25vc2lzUmVzdWx0cyB8fCB7IGlzc3VlczogW10sIGhlYWx0aFNjb3JlOiAxMDAsIGF0b21Db3VudDogMCwgY29ubmVjdGlvbkRlbnNpdHk6ICcwJywgZGlhZ25vc2lzVGltZTogMCB9O1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHMgPSB7XG5cdFx0XHRcdFx0Li4uY3VycmVudFJlc3VsdHMsXG5cdFx0XHRcdFx0aXNzdWVzOiB1cGRhdGVkSXNzdWVzXG5cdFx0XHRcdH07XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSByb3cgZnJvbSB0aGUgdGFibGVcblx0XHRcdFx0aXNzdWVSb3dFbC5yZW1vdmUoKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFVwZGF0ZSB0aGUgYmFkZ2UgY291bnQgZm9yIHRoaXMgcnVsZVxuXHRcdFx0XHR0aGlzLnVwZGF0ZVJ1bGVCYWRnZUNvdW50KHJ1bGVJZCk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBJZiBubyBtb3JlIGlzc3VlcyBmb3IgdGhpcyBydWxlLCByZW1vdmUgdGhlIGVudGlyZSBjYXJkXG5cdFx0XHRcdGNvbnN0IHJlbWFpbmluZ0lzc3VlcyA9IHVwZGF0ZWRJc3N1ZXMuZmlsdGVyKChpc3N1ZTogRGlhZ25vc3RpY0lzc3VlKSA9PiBpc3N1ZS5ydWxlSWQgPT09IHJ1bGVJZCk7XG5cdFx0XHRcdGlmIChyZW1haW5pbmdJc3N1ZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0Y29uc3QgcnVsZUNhcmQgPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXJ1bGUtaWQ9XCIke3J1bGVJZH1cIl1gKTtcblx0XHRcdFx0XHRpZiAocnVsZUNhcmQpIHtcblx0XHRcdFx0XHRcdHJ1bGVDYXJkLnJlbW92ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Y29uc29sZS5sb2coYElzc3VlIGZpeGVkIGZvciBmaWxlOiAke2ZpbGVQYXRofSwgcnVsZTogJHtydWxlSWR9YCk7XG5cdFx0XHR9IGVsc2UgaWYgKGZpbGVJc3N1ZXMubGVuZ3RoID4gMCAmJiBvbGRJc3N1ZSkge1xuXHRcdFx0XHQvLyBJc3N1ZSBzdGlsbCBleGlzdHMsIHVwZGF0ZSB0aGUgaXNzdWUgZGV0YWlscyBpZiBuZWVkZWRcblx0XHRcdFx0Y29uc3QgdXBkYXRlZElzc3VlcyA9IGV4aXN0aW5nSXNzdWVzLm1hcCgoaXNzdWU6IERpYWdub3N0aWNJc3N1ZSkgPT4gXG5cdFx0XHRcdFx0aXNzdWUuaWQgPT09IG9sZElzc3VlLmlkID8gZmlsZUlzc3Vlc1swXSA6IGlzc3VlXG5cdFx0XHRcdCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zdCBjdXJyZW50UmVzdWx0cyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVkRGlhZ25vc2lzUmVzdWx0cyB8fCB7IGlzc3VlczogW10sIGhlYWx0aFNjb3JlOiAxMDAsIGF0b21Db3VudDogMCwgY29ubmVjdGlvbkRlbnNpdHk6ICcwJywgZGlhZ25vc2lzVGltZTogMCB9O1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHMgPSB7XG5cdFx0XHRcdFx0Li4uY3VycmVudFJlc3VsdHMsXG5cdFx0XHRcdFx0aXNzdWVzOiB1cGRhdGVkSXNzdWVzXG5cdFx0XHRcdH07XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29uc29sZS5sb2coYElzc3VlIHN0aWxsIGV4aXN0cyBmb3IgZmlsZTogJHtmaWxlUGF0aH0sIHJ1bGU6ICR7cnVsZUlkfWApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlY2hlY2tpbmcgZmlsZSAke2ZpbGVQYXRofTpgLCBlcnJvcik7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdC8vIFJlc3RvcmUgYnV0dG9uIHN0YXRlXG5cdFx0XHRpZiAocmVjaGVja0J1dHRvbikge1xuXHRcdFx0XHRyZWNoZWNrQnV0dG9uLnRleHRDb250ZW50ID0gb3JpZ2luYWxUZXh0IHx8IChpc0VuZ2xpc2ggPyAnUmVjaGVjaycgOiAnXHU5MUNEXHU2OEMwJyk7XG5cdFx0XHRcdHJlY2hlY2tCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHByaXZhdGUgdXBkYXRlUnVsZUJhZGdlQ291bnQocnVsZUlkOiBzdHJpbmcpIHtcblx0XHRjb25zdCBydWxlQ2FyZCA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihgW2RhdGEtcnVsZS1pZD1cIiR7cnVsZUlkfVwiXWApO1xuXHRcdGlmICghcnVsZUNhcmQpIHJldHVybjtcblx0XHRcblx0XHRjb25zdCBiYWRnZUVsID0gcnVsZUNhcmQucXVlcnlTZWxlY3RvcignLmtub3dsZWRnZS1hcmstY2FyZC1iYWRnZScpO1xuXHRcdGlmICghYmFkZ2VFbCkgcmV0dXJuO1xuXHRcdFxuXHRcdGNvbnN0IGN1cnJlbnRJc3N1ZXMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHM/Lmlzc3VlcyB8fCBbXTtcblx0XHRjb25zdCBydWxlSXNzdWVzID0gY3VycmVudElzc3Vlcy5maWx0ZXIoaXNzdWUgPT4gaXNzdWUucnVsZUlkID09PSBydWxlSWQgJiYgIWlzc3VlLmlzSWdub3JlZCk7XG5cdFx0XG5cdFx0YmFkZ2VFbC50ZXh0Q29udGVudCA9IHJ1bGVJc3N1ZXMubGVuZ3RoLnRvU3RyaW5nKCk7XG5cdH1cblxuXHRhc3luYyBuYXZpZ2F0ZVRvSXNzdWUoZmlsZVBhdGg6IHN0cmluZywgcG9zaXRpb246IHsgc3RhcnQ6IG51bWJlcjsgZW5kOiBudW1iZXIgfSkge1xuXHRcdC8vIE9wZW4gdGhlIGZpbGVcblx0XHRjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblx0XHRpZiAoZmlsZSkge1xuXHRcdFx0Y29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xuXHRcdFx0YXdhaXQgbGVhZi5vcGVuRmlsZShmaWxlIGFzIFRGaWxlKTtcblx0XHRcdFxuXHRcdFx0Ly8gU2Nyb2xsIHRvIHRoZSBwb3NpdGlvbiBpZiBlZGl0b3IgaXMgYXZhaWxhYmxlXG5cdFx0XHRjb25zdCBlZGl0b3IgPSBsZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcgPyBsZWFmLnZpZXcuZWRpdG9yIDogbnVsbDtcblx0XHRcdGlmIChlZGl0b3IpIHtcblx0XHRcdFx0Y29uc3QgcG9zID0gZWRpdG9yLm9mZnNldFRvUG9zKHBvc2l0aW9uLnN0YXJ0KTtcblx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcihwb3MpO1xuXHRcdFx0XHRlZGl0b3Iuc2Nyb2xsSW50b1ZpZXcoeyBmcm9tOiBwb3MsIHRvOiBwb3MgfSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEZpbGUgbm90IGZvdW5kOiAke2ZpbGVQYXRofWApO1xuXHRcdH1cblx0fVxuXHRcblx0aWdub3JlSXNzdWUoaXNzdWVJZDogc3RyaW5nKSB7XG5cdFx0Ly8gQWRkIGlzc3VlSWQgdG8gaWdub3JlZElzc3VlcyBpbiBzZXR0aW5nc1xuXHRcdGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5pbmNsdWRlcyhpc3N1ZUlkKSkge1xuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5wdXNoKGlzc3VlSWQpO1xuXHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fVxuXHR9XG5cblx0dW5pZ25vcmVJc3N1ZShpc3N1ZUlkOiBzdHJpbmcpIHtcblx0XHQvLyBSZW1vdmUgaXNzdWVJZCBmcm9tIGlnbm9yZWRJc3N1ZXMgaW4gc2V0dGluZ3Ncblx0XHRjb25zdCBpbmRleCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5kZXhPZihpc3N1ZUlkKTtcblx0XHRpZiAoaW5kZXggPiAtMSkge1xuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhc3luYyBvbkNsb3NlKCkge1xuXHRcdC8vIE5vdGhpbmcgdG8gY2xlYW4gdXAuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0LyoqXG5cdCAqIE5hdmlnYXRlIHRvIGEgc3BlY2lmaWMgZmlsZSBpbiB0aGUgZGlhZ25vc3RpYyB2aWV3XG5cdCAqIEBwYXJhbSBmaWxlUGF0aCBUaGUgcGF0aCBvZiB0aGUgZmlsZSB0byBuYXZpZ2F0ZSB0b1xuXHQgKi9cblx0YXN5bmMgbmF2aWdhdGVUb0ZpbGUoZmlsZVBhdGg6IHN0cmluZykge1xuXHRcdC8vIEZpbmQgdGhlIGNhcmQgdGhhdCBjb250YWlucyBpc3N1ZXMgZm9yIHRoaXMgZmlsZVxuXHRcdGNvbnN0IHJlc3VsdHNFbCA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcignLmtub3dsZWRnZS1hcmstcmVzdWx0cycpO1xuXHRcdGlmICghcmVzdWx0c0VsKSByZXR1cm47XG5cblx0XHQvLyBTY3JvbGwgdG8gdGhlIGZpcnN0IGlzc3VlIGZvciB0aGlzIGZpbGVcblx0XHRjb25zdCBpc3N1ZXMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlZERpYWdub3Npc1Jlc3VsdHM/Lmlzc3VlcyB8fCBbXTtcblx0XHRjb25zdCBmaWxlSXNzdWVzID0gaXNzdWVzLmZpbHRlcihpc3N1ZSA9PiBpc3N1ZS5maWxlUGF0aCA9PT0gZmlsZVBhdGggJiYgIWlzc3VlLmlzSWdub3JlZCk7XG5cdFx0XG5cdFx0aWYgKGZpbGVJc3N1ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0Ly8gRmluZCB0aGUgY2FyZCBmb3IgdGhlIHJ1bGUgb2YgdGhlIGZpcnN0IGlzc3VlXG5cdFx0XHRjb25zdCBmaXJzdElzc3VlID0gZmlsZUlzc3Vlc1swXTtcblx0XHRcdGNvbnN0IHJ1bGVDYXJkID0gcmVzdWx0c0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXJ1bGUtaWQ9XCIke2ZpcnN0SXNzdWUucnVsZUlkfVwiXWApO1xuXHRcdFx0XG5cdFx0XHRpZiAocnVsZUNhcmQpIHtcblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjYXJkIGlzIHZpc2libGUgKGV4cGFuZCBpZiBjb2xsYXBzZWQpXG5cdFx0XHRcdGNvbnN0IGNhcmRIZWFkZXIgPSBydWxlQ2FyZC5xdWVyeVNlbGVjdG9yKCcua25vd2xlZGdlLWFyay1jYXJkLWhlYWRlcicpIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0XHRjb25zdCBjYXJkQ29udGVudCA9IHJ1bGVDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5rbm93bGVkZ2UtYXJrLWNhcmQtY29udGVudCcpIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGNhcmRIZWFkZXIgJiYgY2FyZENvbnRlbnQgJiYgY2FyZENvbnRlbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG5cdFx0XHRcdFx0Ly8gQ2xpY2sgdG8gZXhwYW5kIGlmIGNvbGxhcHNlZFxuXHRcdFx0XHRcdGNhcmRIZWFkZXIuY2xpY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gU2Nyb2xsIHRoZSBjYXJkIGludG8gdmlldyBhZnRlciBhIGJyaWVmIGRlbGF5IGZvciBhbmltYXRpb25cblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0cnVsZUNhcmQuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBIaWdobGlnaHQgdGhlIHNwZWNpZmljIGlzc3VlIGZvciB0aGlzIGZpbGVcblx0XHRcdFx0XHRjb25zdCBpc3N1ZUVsZW1lbnRzID0gcnVsZUNhcmQucXVlcnlTZWxlY3RvckFsbCgnLmRpYWdub3N0aWMtaXNzdWUnKTtcblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGlzc3VlRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdGNvbnN0IGlzc3VlRWwgPSBpc3N1ZUVsZW1lbnRzW2ldIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0XHRcdFx0Y29uc3QgaXNzdWVGaWxlUGF0aCA9IGlzc3VlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtcGF0aCcpO1xuXHRcdFx0XHRcdFx0aWYgKGlzc3VlRmlsZVBhdGggPT09IGZpbGVQYXRoKSB7XG5cdFx0XHRcdFx0XHRcdGlzc3VlRWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYWN0aXZlKSc7XG5cdFx0XHRcdFx0XHRcdGlzc3VlRWwuc3R5bGUuYm9yZGVyTGVmdCA9ICczcHggc29saWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KSc7XG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlzc3VlRWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyc7XG5cdFx0XHRcdFx0XHRcdFx0aXNzdWVFbC5zdHlsZS5ib3JkZXJMZWZ0ID0gJyc7XG5cdFx0XHRcdFx0XHRcdH0sIDMwMDApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59IiwgImltcG9ydCB7IEFwcCwgVEZpbGUsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBLbm93bGVkZ2VBcmtQbHVnaW4gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IERpYWdub3N0aWNJc3N1ZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgRGF0YUV4cG9ydGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IEtub3dsZWRnZUFya1BsdWdpbiwgcHJpdmF0ZSBhcHA6IEFwcCkge31cbiAgXG4gIGFzeW5jIGV4cG9ydEhlYWx0aHlOb3Rlcyhpc3N1ZXM6IERpYWdub3N0aWNJc3N1ZVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gR2V0IGFsbCBtYXJrZG93biBmaWxlc1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIFxuICAgIC8vIEZpbHRlciBvdXQgZmlsZXMgd2l0aCBpc3N1ZXNcbiAgICBsZXQgaGVhbHRoeUZpbGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4gXG4gICAgICAhaXNzdWVzLnNvbWUoaXNzdWUgPT4gaXNzdWUuZmlsZVBhdGggPT09IGZpbGUucGF0aClcbiAgICApO1xuICAgIFxuICAgIC8vIEFwcGx5IGV4Y2x1ZGVkIGZvbGRlcnMgZmlsdGVyXG4gICAgaGVhbHRoeUZpbGVzID0gaGVhbHRoeUZpbGVzLmZpbHRlcihmaWxlID0+IFxuICAgICAgIXRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRm9sZGVycy5zb21lKChmb2xkZXI6IHN0cmluZykgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyICsgJy8nKSB8fCBmaWxlLnBhdGggPT09IGZvbGRlcilcbiAgICApO1xuICAgIFxuICAgIC8vIEFwcGx5IGV4Y2x1ZGVkIHRhZ3MgZmlsdGVyXG5cdFx0aGVhbHRoeUZpbGVzID0gaGVhbHRoeUZpbGVzLmZpbHRlcihmaWxlID0+IHtcblx0XHQgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG5cdFx0ICBpZiAoY2FjaGUgJiYgY2FjaGUuZnJvbnRtYXR0ZXIgJiYgY2FjaGUuZnJvbnRtYXR0ZXIudGFncyAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubGVuZ3RoID4gMCkge1xuXHRcdFx0Y29uc3QgZmlsZVRhZ3MgPSBBcnJheS5pc0FycmF5KGNhY2hlLmZyb250bWF0dGVyLnRhZ3MpIFxuXHRcdFx0ICA/IGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgXG5cdFx0XHQgIDogY2FjaGUuZnJvbnRtYXR0ZXIudGFncy5zcGxpdCgnLCcpLm1hcCgodGFnOiBzdHJpbmcpID0+IHRhZy50cmltKCkpO1xuXHRcdFx0XG5cdFx0XHQvLyBcdTY1MkZcdTYzMDFcdTVFMjYjXHU1NDhDXHU0RTBEXHU1RTI2I1x1NzY4NFx1NjgwN1x1N0I3RVx1NjgzQ1x1NUYwRlx1RkYwQ1x1NEUwRFx1NTMzQVx1NTIwNlx1NTkyN1x1NUMwRlx1NTE5OVxuXHRcdFx0Y29uc3Qgbm9ybWFsaXplZEV4Y2x1ZGVkVGFncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcblx0XHRcdCAgdGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG5cdFx0XHQpO1xuXHRcdFx0XG5cdFx0XHRjb25zdCBub3JtYWxpemVkRmlsZVRhZ3MgPSBmaWxlVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcblx0XHRcdCAgdGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG5cdFx0XHQpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gIW5vcm1hbGl6ZWRGaWxlVGFncy5zb21lKChmaWxlVGFnOiBzdHJpbmcpID0+IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MuaW5jbHVkZXMoZmlsZVRhZykpO1xuXHRcdCAgfVxuXHRcdCAgcmV0dXJuIHRydWU7XG5cdFx0fSk7XG4gICAgXG4gICAgLy8gTG9nIGV4Y2x1ZGVkIGZvbGRlcnMgYW5kIHRhZ3MgZm9yIGRlYnVnZ2luZ1xuICAgIGNvbnNvbGUubG9nKCdFeGNsdWRlZCBmb2xkZXJzOicsIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRm9sZGVycyk7XG4gICAgY29uc29sZS5sb2coJ0V4Y2x1ZGVkIHRhZ3M6JywgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzKTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBwcm9ibGVtYXRpYyBmaWxlcyBhZnRlciBhcHBseWluZyBleGNsdXNpb24gcnVsZXNcbiAgICAvLyBQcm9ibGVtYXRpYyBmaWxlcyBhcmUgdGhvc2Ugd2l0aCBpc3N1ZXMgYW5kIG5vdCBleGNsdWRlZFxuICAgIGNvbnN0IHByb2JsZW1hdGljRmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiB7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgZmlsZSBoYXMgYW55IGlzc3Vlc1xuICAgICAgY29uc3QgaGFzSXNzdWUgPSBpc3N1ZXMuc29tZShpc3N1ZSA9PiBpc3N1ZS5maWxlUGF0aCA9PT0gZmlsZS5wYXRoKTtcbiAgICAgIFxuICAgICAgLy8gSWYgbm8gaXNzdWVzLCBpdCdzIG5vdCBhIHByb2JsZW1hdGljIGZpbGVcbiAgICAgIGlmICghaGFzSXNzdWUpIHJldHVybiBmYWxzZTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZpbGUgaXMgZXhjbHVkZWQgYnkgZm9sZGVyXG4gICAgICBjb25zdCBpc0V4Y2x1ZGVkQnlGb2xkZXIgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZvbGRlcnMuc29tZSgoZm9sZGVyOiBzdHJpbmcpID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlciArICcvJykgfHwgZmlsZS5wYXRoID09PSBmb2xkZXIpO1xuICAgICAgaWYgKGlzRXhjbHVkZWRCeUZvbGRlcikgcmV0dXJuIGZhbHNlO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB0aGUgZmlsZSBpcyBleGNsdWRlZCBieSB0YWdzXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcblx0XHRpZiAoY2FjaGUgJiYgY2FjaGUuZnJvbnRtYXR0ZXIgJiYgY2FjaGUuZnJvbnRtYXR0ZXIudGFncyAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubGVuZ3RoID4gMCkge1xuXHRcdCAgY29uc3QgZmlsZVRhZ3MgPSBBcnJheS5pc0FycmF5KGNhY2hlLmZyb250bWF0dGVyLnRhZ3MpIFxuXHRcdFx0PyBjYWNoZS5mcm9udG1hdHRlci50YWdzIFxuXHRcdFx0OiBjYWNoZS5mcm9udG1hdHRlci50YWdzLnNwbGl0KCcsJykubWFwKCh0YWc6IHN0cmluZykgPT4gdGFnLnRyaW0oKSk7XG5cdFx0ICBcblx0XHQgIC8vIFx1NjUyRlx1NjMwMVx1NUUyNiNcdTU0OENcdTRFMERcdTVFMjYjXHU3Njg0XHU2ODA3XHU3QjdFXHU2ODNDXHU1RjBGXHVGRjBDXHU0RTBEXHU1MzNBXHU1MjA2XHU1OTI3XHU1QzBGXHU1MTk5XG5cdFx0ICBjb25zdCBub3JtYWxpemVkRXhjbHVkZWRUYWdzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuXHRcdFx0dGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG5cdFx0ICApO1xuXHRcdCAgXG5cdFx0ICBjb25zdCBub3JtYWxpemVkRmlsZVRhZ3MgPSBmaWxlVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcblx0XHRcdHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuXHRcdCAgKTtcblx0XHQgIFxuXHRcdCAgY29uc3QgaXNFeGNsdWRlZEJ5VGFnID0gbm9ybWFsaXplZEZpbGVUYWdzLnNvbWUoKGZpbGVUYWc6IHN0cmluZykgPT4gbm9ybWFsaXplZEV4Y2x1ZGVkVGFncy5pbmNsdWRlcyhmaWxlVGFnKSk7XG5cdFx0ICBpZiAoaXNFeGNsdWRlZEJ5VGFnKSByZXR1cm4gZmFsc2U7XG5cdFx0fVxuICAgICAgXG4gICAgICAvLyBJZiBpdCBoYXMgaXNzdWVzIGFuZCBpcyBub3QgZXhjbHVkZWQsIGl0J3MgYSBwcm9ibGVtYXRpYyBmaWxlXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBTaG93IGEgbm90aWNlIHdpdGggdGhlIG51bWJlciBvZiBoZWFsdGh5IGZpbGVzXG4gICAgbmV3IE5vdGljZShgXHU1QkZDXHU1MUZBICR7aGVhbHRoeUZpbGVzLmxlbmd0aH0gXHU0RTJBXHU1MDY1XHU1RUI3XHU3QjE0XHU4QkIwXHVGRjBDJHtwcm9ibGVtYXRpY0ZpbGVzLmxlbmd0aH0gXHU0RTJBXHU3QjE0XHU4QkIwXHU2NzA5XHU5NUVFXHU5ODk4XHUzMDAyYCk7XG4gICAgXG4gICAgLy8gQ29udmVydCBoZWFsdGh5IGZpbGVzIHRvIEpTT05MXG4gICAgY29uc3QganNvbmxMaW5lczogc3RyaW5nW10gPSBbXTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgaGVhbHRoeUZpbGVzKSB7XG4gICAgICAvLyBTa2lwIGV4Y2x1ZGVkIGZvbGRlcnNcbiAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZvbGRlcnMuc29tZSgoZm9sZGVyOiBzdHJpbmcpID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlciArICcvJykgfHwgZmlsZS5wYXRoID09PSBmb2xkZXIpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTa2lwIGV4Y2x1ZGVkIHRhZ3Ncblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdGlmIChjYWNoZSAmJiBjYWNoZS5mcm9udG1hdHRlciAmJiBjYWNoZS5mcm9udG1hdHRlci50YWdzICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5sZW5ndGggPiAwKSB7XG5cdFx0ICBjb25zdCBmaWxlVGFncyA9IEFycmF5LmlzQXJyYXkoY2FjaGUuZnJvbnRtYXR0ZXIudGFncykgXG5cdFx0XHQ/IGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgXG5cdFx0XHQ6IGNhY2hlLmZyb250bWF0dGVyLnRhZ3Muc3BsaXQoJywnKS5tYXAoKHRhZzogc3RyaW5nKSA9PiB0YWcudHJpbSgpKTtcblx0XHQgIFxuXHRcdCAgLy8gXHU2NTJGXHU2MzAxXHU1RTI2I1x1NTQ4Q1x1NEUwRFx1NUUyNiNcdTc2ODRcdTY4MDdcdTdCN0VcdTY4M0NcdTVGMEZcdUZGMENcdTRFMERcdTUzM0FcdTUyMDZcdTU5MjdcdTVDMEZcdTUxOTlcbiAgICBjb25zdCBub3JtYWxpemVkRXhjbHVkZWRUYWdzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuICAgICAgdGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG4gICAgKTtcbiAgICBcbiAgICBjb25zdCBub3JtYWxpemVkRmlsZVRhZ3MgPSBmaWxlVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcbiAgICAgIHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuICAgICk7XG4gICAgXG4gICAgaWYgKG5vcm1hbGl6ZWRGaWxlVGFncy5zb21lKChmaWxlVGFnOiBzdHJpbmcpID0+IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MuaW5jbHVkZXMoZmlsZVRhZykpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cdFx0fVxuICAgICAgXG4gICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIEpTT04gb2JqZWN0IGJhc2VkIG9uIHRlbXBsYXRlXG4gICAgICBjb25zdCBqc29uT2JqZWN0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgICBcbiAgICAgIC8vIFNpbXBsZSB0ZW1wbGF0ZSByZXBsYWNlbWVudCB3aXRoIHByb3BlciBlc2NhcGluZ1xuICAgICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGJlIG1vcmUgc29waGlzdGljYXRlZFxuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leHBvcnRUZW1wbGF0ZVxuICAgICAgICAucmVwbGFjZSgne3tjb250ZW50fX0nLCBKU09OLnN0cmluZ2lmeShjb250ZW50KSlcbiAgICAgICAgLnJlcGxhY2UoJ3t7dGFnc319JywgSlNPTi5zdHJpbmdpZnkoY2FjaGU/LnRhZ3M/Lm1hcCh0YWcgPT4gdGFnLnRhZykuam9pbignLCAnKSB8fCAnJykpXG4gICAgICAgIC5yZXBsYWNlKCd7e3R5cGV9fScsIEpTT04uc3RyaW5naWZ5KGNhY2hlPy5mcm9udG1hdHRlcj8udHlwZSB8fCAnJykpXG4gICAgICAgIC5yZXBsYWNlKCd7e2ZpbGVOYW1lfX0nLCBKU09OLnN0cmluZ2lmeShmaWxlLm5hbWUpKVxuICAgICAgICAucmVwbGFjZSgne3tmaWxlUGF0aH19JywgSlNPTi5zdHJpbmdpZnkoZmlsZS5wYXRoKSlcbiAgICAgICAgLnJlcGxhY2UoJ3t7ZnJvbnRtYXR0ZXJ9fScsIEpTT04uc3RyaW5naWZ5KGNhY2hlPy5mcm9udG1hdHRlciB8fCB7fSkpXG4gICAgICAgIC5yZXBsYWNlKCd7e2xpbmtzfX0nLCBKU09OLnN0cmluZ2lmeShjYWNoZT8ubGlua3MgfHwgW10pKVxuICAgICAgICAucmVwbGFjZSgne3toZWFkaW5nc319JywgSlNPTi5zdHJpbmdpZnkoY2FjaGU/LmhlYWRpbmdzIHx8IFtdKSk7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFRlbXBsYXRlID0gSlNPTi5wYXJzZSh0ZW1wbGF0ZSk7XG4gICAgICAgIGpzb25sTGluZXMucHVzaChKU09OLnN0cmluZ2lmeShwYXJzZWRUZW1wbGF0ZSkpO1xuICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IHBhcnNlZCB0ZW1wbGF0ZSBmb3IgZmlsZSAke2ZpbGUucGF0aH1gKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHBhcnNpbmcgdGVtcGxhdGUgZm9yIGZpbGUgJHtmaWxlLnBhdGh9OmAsIGVycm9yKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihgVGVtcGxhdGUgY29udGVudDogJHt0ZW1wbGF0ZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQ3JlYXRlIEpTT05MIGNvbnRlbnRcbiAgICBjb25zdCBqc29ubENvbnRlbnQgPSBqc29ubExpbmVzLmpvaW4oJ1xcbicpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBkb3dubG9hZFxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbanNvbmxDb250ZW50XSwgeyB0eXBlOiAnYXBwbGljYXRpb24vanNvbmwnIH0pO1xuICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgXG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBhLmhyZWYgPSB1cmw7XG4gICAgYS5kb3dubG9hZCA9ICdrbm93bGVkZ2UtYXJrLWV4cG9ydC5qc29ubCc7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICBhLmNsaWNrKCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcbiAgICBcbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gIH1cbn0iLCAiaW1wb3J0IHsgQXBwLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IERpYWdub3N0aWNSdWxlLCBEaWFnbm9zdGljSXNzdWUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBLbm93bGVkZ2VBcmtQbHVnaW4gZnJvbSAnLi9tYWluJztcblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhSW50ZWdyaXR5UnVsZSBpbXBsZW1lbnRzIERpYWdub3N0aWNSdWxlIHtcbiAgaWQgPSAnbWV0YWRhdGEtaW50ZWdyaXR5JztcbiAgbmFtZSA9ICdcdTUxNDNcdTY1NzBcdTYzNkVcdTVCOENcdTY1NzRcdTYwMjdcdTY4QzBcdTY3RTUnO1xuICBkZXNjcmlwdGlvbiA9ICdcdTY4QzBcdTY3RTVcdTdCMTRcdThCQjBcdTY1ODdcdTRFRjZcdTY2MkZcdTU0MjZcdTUzMDVcdTU0MkJcdTg5QzRcdTgzMDNcdTc2ODRZQU1MIEZyb250bWF0dGVyJztcbiAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBLbm93bGVkZ2VBcmtQbHVnaW4sIHByaXZhdGUgYXBwOiBBcHApIHt9XG4gIFxuICBhc3luYyBjaGVjaygpOiBQcm9taXNlPERpYWdub3N0aWNJc3N1ZVtdPiB7XG4gICAgY29uc3QgaXNzdWVzOiBEaWFnbm9zdGljSXNzdWVbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgLy8gU2tpcCBleGNsdWRlZCBmb2xkZXJzXG4gICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoKGZvbGRlcjogc3RyaW5nKSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgIFxuICAgICAgLy8gU2tpcCBleGNsdWRlZCB0YWdzIC0gXHU4OEFCXHU2MzkyXHU5NjY0XHU3Njg0XHU3QjE0XHU4QkIwXHU0RTBEXHU1M0MyXHU0RTBFXHU4QkNBXHU2NUFEXG4gICAgICBpZiAoY2FjaGUgJiYgY2FjaGUuZnJvbnRtYXR0ZXIgJiYgY2FjaGUuZnJvbnRtYXR0ZXIudGFncyAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmaWxlVGFncyA9IEFycmF5LmlzQXJyYXkoY2FjaGUuZnJvbnRtYXR0ZXIudGFncykgXG4gICAgICAgICAgPyBjYWNoZS5mcm9udG1hdHRlci50YWdzIFxuICAgICAgICAgIDogY2FjaGUuZnJvbnRtYXR0ZXIudGFncy5zcGxpdCgnLCcpLm1hcCgodGFnOiBzdHJpbmcpID0+IHRhZy50cmltKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gXHU2NTJGXHU2MzAxXHU1RTI2I1x1NTQ4Q1x1NEUwRFx1NUUyNiNcdTc2ODRcdTY4MDdcdTdCN0VcdTY4M0NcdTVGMEZcdUZGMENcdTRFMERcdTUzM0FcdTUyMDZcdTU5MjdcdTVDMEZcdTUxOTlcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV4Y2x1ZGVkVGFncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcbiAgICAgICAgICB0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlVGFncyA9IGZpbGVUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuICAgICAgICAgIHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRGaWxlVGFncy5zb21lKChmaWxlVGFnOiBzdHJpbmcpID0+IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MuaW5jbHVkZXMoZmlsZVRhZykpKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIFx1OERGM1x1OEZDN1x1ODhBQlx1NjM5Mlx1OTY2NFx1NjgwN1x1N0I3RVx1NzY4NFx1N0IxNFx1OEJCMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIFlBTUwgZnJvbnRtYXR0ZXIgZXhpc3RzXG4gICAgICBpZiAoIWNhY2hlIHx8ICFjYWNoZS5mcm9udG1hdHRlcikge1xuICAgICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGAke3RoaXMuaWR9LSR7ZmlsZS5wYXRofWAsXG4gICAgICAgICAgcnVsZUlkOiB0aGlzLmlkLFxuICAgICAgICAgIGZpbGVQYXRoOiBmaWxlLnBhdGgsXG4gICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICBjb250ZXh0UHJldmlldzogdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyAnTWlzc2luZyBZQU1MIEZyb250bWF0dGVyJyA6ICdcdTdGM0FcdTVDMTFZQU1MIEZyb250bWF0dGVyJyxcbiAgICAgICAgICBwb3NpdGlvbjogeyBzdGFydDogMCwgZW5kOiAwIH0sXG4gICAgICAgICAgc2V2ZXJpdHk6ICdoaWdoJyxcbiAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9YClcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayByZXF1aXJlZCBmaWVsZHNcbiAgICAgIGNvbnN0IG1pc3NpbmdGaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlcXVpcmVkTWV0YWRhdGFGaWVsZHMpIHtcbiAgICAgICAgaWYgKCEoZmllbGQgaW4gY2FjaGUuZnJvbnRtYXR0ZXIpKSB7XG4gICAgICAgICAgbWlzc2luZ0ZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAobWlzc2luZ0ZpZWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgICBpZDogYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9YCxcbiAgICAgICAgICBydWxlSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgZmlsZVBhdGg6IGZpbGUucGF0aCxcbiAgICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgIGNvbnRleHRQcmV2aWV3OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/IGBNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogJHttaXNzaW5nRmllbGRzLmpvaW4oJywgJyl9YCA6IGBcdTdGM0FcdTVDMTFcdTVGQzVcdTU4NkJcdTVCNTdcdTZCQjU6ICR7bWlzc2luZ0ZpZWxkcy5qb2luKCcsICcpfWAsXG4gICAgICAgICAgcG9zaXRpb246IHsgc3RhcnQ6IDAsIGVuZDogMCB9LFxuICAgICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9YClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBpc3N1ZXM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vdGVBdG9taWNpdHlSdWxlIGltcGxlbWVudHMgRGlhZ25vc3RpY1J1bGUge1xuICBpZCA9ICdub3RlLWF0b21pY2l0eSc7XG4gIG5hbWUgPSAnXHU3QjE0XHU4QkIwXHU1MzlGXHU1QjUwXHU1MzE2XHU3QTBCXHU1RUE2XHU2OEMwXHU2N0U1JztcbiAgZGVzY3JpcHRpb24gPSAnXHU2OEMwXHU2N0U1XHU3QjE0XHU4QkIwXHU2NjJGXHU1NDI2XHU4RkM3XHU0RThFXHU1MTk3XHU5NTdGXHU2MjE2XHU0RTNCXHU5ODk4XHU1MjA2XHU2NTYzJztcbiAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBLbm93bGVkZ2VBcmtQbHVnaW4sIHByaXZhdGUgYXBwOiBBcHApIHt9XG4gIFxuICBhc3luYyBjaGVjaygpOiBQcm9taXNlPERpYWdub3N0aWNJc3N1ZVtdPiB7XG4gICAgY29uc3QgaXNzdWVzOiBEaWFnbm9zdGljSXNzdWVbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgLy8gU2tpcCBleGNsdWRlZCBmb2xkZXJzXG4gICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoKGZvbGRlcjogc3RyaW5nKSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgIFxuICAgICAgLy8gU2tpcCBleGNsdWRlZCB0YWdzXG4gICAgICBpZiAoY2FjaGUgJiYgY2FjaGUuZnJvbnRtYXR0ZXIgJiYgY2FjaGUuZnJvbnRtYXR0ZXIudGFncyAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmaWxlVGFncyA9IEFycmF5LmlzQXJyYXkoY2FjaGUuZnJvbnRtYXR0ZXIudGFncykgXG4gICAgICAgICAgPyBjYWNoZS5mcm9udG1hdHRlci50YWdzIFxuICAgICAgICAgIDogY2FjaGUuZnJvbnRtYXR0ZXIudGFncy5zcGxpdCgnLCcpLm1hcCgodGFnOiBzdHJpbmcpID0+IHRhZy50cmltKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gXHU2NTJGXHU2MzAxXHU1RTI2I1x1NTQ4Q1x1NEUwRFx1NUUyNiNcdTc2ODRcdTY4MDdcdTdCN0VcdTY4M0NcdTVGMEZcdUZGMENcdTRFMERcdTUzM0FcdTUyMDZcdTU5MjdcdTVDMEZcdTUxOTlcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV4Y2x1ZGVkVGFncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcbiAgICAgICAgICB0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlVGFncyA9IGZpbGVUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuICAgICAgICAgIHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRGaWxlVGFncy5zb21lKChmaWxlVGFnOiBzdHJpbmcpID0+IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MuaW5jbHVkZXMoZmlsZVRhZykpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIG5vdGUgbGVuZ3RoXG4gICAgICBpZiAoY29udGVudC5sZW5ndGggPiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhOb3RlTGVuZ3RoKSB7XG4gICAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgICBpZDogYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9YCxcbiAgICAgICAgICBydWxlSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgZmlsZVBhdGg6IGZpbGUucGF0aCxcbiAgICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgIGNvbnRleHRQcmV2aWV3OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/IGBOb3RlIGxlbmd0aCAoJHtjb250ZW50Lmxlbmd0aH0pIGV4Y2VlZHMgdGhyZXNob2xkICgke3RoaXMucGx1Z2luLnNldHRpbmdzLm1heE5vdGVMZW5ndGh9KWAgOiBgXHU3QjE0XHU4QkIwXHU5NTdGXHU1RUE2ICgke2NvbnRlbnQubGVuZ3RofSkgXHU4RDg1XHU4RkM3XHU5NjA4XHU1MDNDICgke3RoaXMucGx1Z2luLnNldHRpbmdzLm1heE5vdGVMZW5ndGh9KWAsXG4gICAgICAgICAgcG9zaXRpb246IHsgc3RhcnQ6IDAsIGVuZDogMCB9LFxuICAgICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9YClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciBtdWx0aXBsZSBIMSBoZWFkZXJzIGFuZCBjb3VudCBIMiBoZWFkZXJzIGZvciBiZXR0ZXIgY29udGV4dFxuICAgICAgLy8gUmVtb3ZlIGNvZGUgYmxvY2tzIChpbmNsdWRpbmcgdW5jbG9zZWQgb25lcykgYW5kIFlBTUwgZnJvbnQgbWF0dGVyIGJlZm9yZSBjb3VudGluZyBoZWFkZXJzXG4gICAgICBsZXQgcHJvY2Vzc2VkQ29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvYGBgW1xcc1xcU10qP2BgYC9nLCAnJykucmVwbGFjZSgvYGBgW1xcc1xcU10qJC9nLCAnJyk7XG4gICAgICBwcm9jZXNzZWRDb250ZW50ID0gcHJvY2Vzc2VkQ29udGVudC5yZXBsYWNlKC9gW15gXSpgL2csICcnKTtcbiAgICAgIHByb2Nlc3NlZENvbnRlbnQgPSBwcm9jZXNzZWRDb250ZW50LnJlcGxhY2UoLy0tLVtcXHNcXFNdKj8tLS0vLCAnJyk7XG4gICAgICBjb25zdCBoMUNvdW50ID0gKHByb2Nlc3NlZENvbnRlbnQubWF0Y2goL14jXFxzL2dtKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgY29uc3QgaDJDb3VudCA9IChwcm9jZXNzZWRDb250ZW50Lm1hdGNoKC9eIyNcXHMvZ20pIHx8IFtdKS5sZW5ndGg7XG4gICAgICBcbiAgICAgIGlmIChoMUNvdW50ID4gMSkge1xuICAgICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGAke3RoaXMuaWR9LSR7ZmlsZS5wYXRofS1oMWAsXG4gICAgICAgICAgcnVsZUlkOiB0aGlzLmlkLFxuICAgICAgICAgIGZpbGVQYXRoOiBmaWxlLnBhdGgsXG4gICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICBjb250ZXh0UHJldmlldzogdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyBgRm91bmQgJHtoMUNvdW50fSBIMSBoZWFkZXJzIGFuZCAke2gyQ291bnR9IEgyIGhlYWRlcnNgIDogYFx1NTNEMVx1NzNCMCAke2gxQ291bnR9IFx1NEUyQUgxXHU2ODA3XHU5ODk4XHVGRjBDJHtoMkNvdW50fSBcdTRFMkFIMlx1NjgwN1x1OTg5OGAsXG4gICAgICAgICAgcG9zaXRpb246IHsgc3RhcnQ6IDAsIGVuZDogMCB9LFxuICAgICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9LWgxYClcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGgyQ291bnQgPj0gNSkge1xuICAgICAgICAvLyBXYXJuIGFib3V0IHRvbyBtYW55IEgyIHRpdGxlcyB3aGVuIHRoZXJlJ3Mgb25seSBvbmUgSDFcbiAgICAgICAgaXNzdWVzLnB1c2goe1xuICAgICAgICAgIGlkOiBgJHt0aGlzLmlkfS0ke2ZpbGUucGF0aH0taDJgLFxuICAgICAgICAgIHJ1bGVJZDogdGhpcy5pZCxcbiAgICAgICAgICBmaWxlUGF0aDogZmlsZS5wYXRoLFxuICAgICAgICAgIGZpbGVOYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgY29udGV4dFByZXZpZXc6IHRoaXMucGx1Z2luLnNldHRpbmdzLmxhbmd1YWdlID09PSAnZW4nID8gYEZvdW5kICR7aDJDb3VudH0gSDIgaGVhZGVycywgY29uc2lkZXIgc3BsaXR0aW5nIHRoZSBub3RlYCA6IGBcdTUzRDFcdTczQjAgJHtoMkNvdW50fSBcdTRFMkFIMlx1NjgwN1x1OTg5OFx1RkYwQ1x1NUVGQVx1OEJBRVx1ODAwM1x1ODY1MVx1NjJDNlx1NTIwNlx1N0IxNFx1OEJCMGAsXG4gICAgICAgICAgcG9zaXRpb246IHsgc3RhcnQ6IDAsIGVuZDogMCB9LFxuICAgICAgICAgIHNldmVyaXR5OiAnbG93JyxcbiAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtmaWxlLnBhdGh9LWgyYClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBpc3N1ZXM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5ha2VkTGlua3NSdWxlIGltcGxlbWVudHMgRGlhZ25vc3RpY1J1bGUge1xuICBpZCA9ICduYWtlZC1saW5rcyc7XG4gIG5hbWUgPSAnXHU4OEY4XHU5NEZFXHU2M0E1XHU2OEMwXHU2N0U1JztcbiAgZGVzY3JpcHRpb24gPSAnXHU2OEMwXHU2N0U1XHU1MTg1XHU5MEU4XHU5NEZFXHU2M0E1XHU2NjJGXHU1NDI2XHU3RjNBXHU1QzExXHU4REIzXHU1OTFGXHU3Njg0XHU0RTBBXHU0RTBCXHU2NTg3JztcbiAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBLbm93bGVkZ2VBcmtQbHVnaW4sIHByaXZhdGUgYXBwOiBBcHApIHt9XG4gIFxuICBhc3luYyBjaGVjaygpOiBQcm9taXNlPERpYWdub3N0aWNJc3N1ZVtdPiB7XG4gICAgY29uc3QgaXNzdWVzOiBEaWFnbm9zdGljSXNzdWVbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgLy8gU2tpcCBleGNsdWRlZCBmb2xkZXJzXG4gICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoKGZvbGRlcjogc3RyaW5nKSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgIFxuICAgICAgLy8gU2tpcCBleGNsdWRlZCB0YWdzXG4gICAgICBpZiAoY2FjaGUgJiYgY2FjaGUuZnJvbnRtYXR0ZXIgJiYgY2FjaGUuZnJvbnRtYXR0ZXIudGFncyAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmaWxlVGFncyA9IEFycmF5LmlzQXJyYXkoY2FjaGUuZnJvbnRtYXR0ZXIudGFncykgXG4gICAgICAgICAgPyBjYWNoZS5mcm9udG1hdHRlci50YWdzIFxuICAgICAgICAgIDogY2FjaGUuZnJvbnRtYXR0ZXIudGFncy5zcGxpdCgnLCcpLm1hcCgodGFnOiBzdHJpbmcpID0+IHRhZy50cmltKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gXHU2NTJGXHU2MzAxXHU1RTI2I1x1NTQ4Q1x1NEUwRFx1NUUyNiNcdTc2ODRcdTY4MDdcdTdCN0VcdTY4M0NcdTVGMEZcdUZGMENcdTRFMERcdTUzM0FcdTUyMDZcdTU5MjdcdTVDMEZcdTUxOTlcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV4Y2x1ZGVkVGFncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcbiAgICAgICAgICB0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlVGFncyA9IGZpbGVUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuICAgICAgICAgIHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRGaWxlVGFncy5zb21lKChmaWxlVGFnOiBzdHJpbmcpID0+IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MuaW5jbHVkZXMoZmlsZVRhZykpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICBjb25zdCBjYWNoZTIgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgIFxuICAgICAgaWYgKCFjYWNoZTIgfHwgIWNhY2hlMi5saW5rcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBsaW5rIG9mIGNhY2hlMi5saW5rcykge1xuICAgICAgICAvLyBPbmx5IGNoZWNrIGludGVybmFsIGxpbmtzXG4gICAgICAgIGlmIChsaW5rLmxpbmsuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxpbmtTdGFydCA9IGxpbmsucG9zaXRpb24uc3RhcnQub2Zmc2V0O1xuICAgICAgICBjb25zdCBsaW5rRW5kID0gbGluay5wb3NpdGlvbi5lbmQub2Zmc2V0O1xuICAgICAgICBcbiAgICAgICAgLy8gR2V0IGNvbnRleHQgYXJvdW5kIHRoZSBsaW5rXG4gICAgICAgIGNvbnN0IGNvbnRleHRTdGFydCA9IE1hdGgubWF4KDAsIGxpbmtTdGFydCAtIHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkNvbnRleHRMZW5ndGgpO1xuICAgICAgICBjb25zdCBjb250ZXh0RW5kID0gTWF0aC5taW4oY29udGVudC5sZW5ndGgsIGxpbmtFbmQgKyB0aGlzLnBsdWdpbi5zZXR0aW5ncy5taW5Db250ZXh0TGVuZ3RoKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvbnRlbnQuc3Vic3RyaW5nKGNvbnRleHRTdGFydCwgY29udGV4dEVuZCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgbGluayB0ZXh0IGl0c2VsZiBjb250YWlucyBtZWFuaW5nZnVsIHdvcmRzXG4gICAgICAgIGNvbnN0IGxpbmtUZXh0ID0gbGluay5kaXNwbGF5VGV4dCB8fCBsaW5rLmxpbms7XG4gICAgICAgIGNvbnN0IGhhc01lYW5pbmdmdWxMaW5rVGV4dCA9IC9bXFx1NGUwMC1cXHU5ZmE1YS16QS1aMC05XXsyLH0vLnRlc3QobGlua1RleHQpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHZlcmJzIG9yIG1lYW5pbmdmdWwgY29udGV4dCBhcm91bmQgdGhlIGxpbmsgLSBzaW1wbGlmaWVkIGNoZWNrIGZvciBhbnkgQ2hpbmVzZSBjaGFyYWN0ZXJzXG4gICAgICAgIGNvbnN0IGhhc1ZlcmJJbkNvbnRleHQgPSAvW1xcdTRlMDAtXFx1OWZhNV0vLnRlc3QoY29udGV4dCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBmb3Igc2ltcGxlIGNvbnRleHQgaW5kaWNhdG9ycyBsaWtlIFwiXHU2MDNCXHU3RUQzXCIsIFwiXHU4QkY0XHU2NjBFXCIsIFwiXHU1M0MyXHU4MDAzXCIgZXRjLlxuICAgICAgICBjb25zdCBjb250ZXh0S2V5d29yZHMgPSAvKFx1NjAzQlx1N0VEM3xcdThCRjRcdTY2MEV8XHU1M0MyXHU4MDAzfFx1OEJFNlx1ODlDMXxcdTg5QzF8XHU1MTczXHU0RThFfFx1NEVDQlx1N0VDRHxcdThCQThcdThCQkF8XHU1MjA2XHU2NzkwfFx1NjNDRlx1OEZGMHxcdTg5RTNcdTkxQ0F8XHU1QjlBXHU0RTQ5fFx1NjNEMFx1NEY5QnxcdTVDNTVcdTc5M0F8XHU4QkIwXHU1RjU1fFx1ODg2OFx1NzkzQXxcdTYzMDdcdTUxRkF8XHU1RjNBXHU4QzAzfFx1OEJBNFx1NEUzQXxcdTg5QzlcdTVGOTd8XHU1M0QxXHU3M0IwfDo6fFx1NTE3M1x1ODA1NHxcdThGREVcdTYzQTV8XHU1RjcxXHU1NENEfFx1NUJGQ1x1ODFGNHxcdTRGQzNcdThGREJ8XHU2MjkxXHU1MjM2fFx1NTMwNVx1NTQyQnxcdTdFQzRcdTYyMTB8XHU2Nzg0XHU2MjEwfFx1NEY1M1x1NzNCMHxcdTRFRTNcdTg4Njh8XHU4QzYxXHU1RjgxfFx1NTNDRFx1NjYyMHxcdTY1MkZcdTYzMDF8XHU1M0NEXHU1QkY5fFx1NEY5RFx1OEQ1NnxcdTZFOTBcdTRFOEV8XHU1RjUyXHU1NkUwXHU0RThFfFx1NUM1RVx1NEU4RXxcdTRGNUNcdTc1MjhcdTRFOEV8XHU5MDAyXHU3NTI4XHU0RThFfFx1NUU5NFx1NzUyOFx1NEU4RXxcdTRFQTdcdTc1MUZ8XHU1RjYyXHU2MjEwfFx1OEZCRVx1NjIxMHxcdTVCOUVcdTczQjB8XHU1M0QxXHU1QzU1fFx1NkYxNFx1NTNEOHxcdThGNkNcdTUzMTZ8XHU4RjZDXHU1M0Q4fFx1NUY3MVx1NTRDRHxcdTVGMTVcdTUzRDF8XHU1N0ZBXHU0RThFfFx1OTA3NVx1NUZBQXxcdTdCMjZcdTU0MDh8XHU3QjI2XHU1NDA4XHU0RThFfFx1Njc2NVx1NkU5MFx1NEU4RXxcdTYzRURcdTc5M0F8XHU4QkMxXHU2NjBFfFx1OTYxMFx1OEZGMHxcdTZEODlcdTUzQ0F8XHU2REI1XHU3NkQ2fFx1NTMwNVx1NjJFQ3xcdTYxMEZcdTU0NzNcdTc3NDB8XHU5ODg0XHU3OTNBfFx1NUJGOVx1NkJENHxcdTYyN0ZcdThGN0R8XHU4RkQwXHU3NTI4fFx1Njc4NFx1NUVGQXxcdTUyMDZcdTdDN0JcdTRFOEV8XHU1MzNBXHU1MjJCXHU0RThFfFx1NUU3M1x1ODg0Q1x1NEU4RXxcdTg5RTNcdTUxQjN8XHU1OTA0XHU3NDA2fFx1NjU3NFx1NTQwOHxcdTRGMThcdTUzMTZ8XHU3QjgwXHU1MzE2fHJlbGF0ZXxjb25uZWN0fGFmZmVjdHxjYXVzZXxwcm9tb3RlfGluaGliaXR8Y29udGFpbnxjb21wb3NlfGNvbnN0aXR1dGV8ZW1ib2R5fHJlcHJlc2VudHxzeW1ib2xpemV8cmVmbGVjdHxzdXBwb3J0fG9wcG9zZXxkZXBlbmR8ZGVyaXZlfGF0dHJpYnV0ZXxiZWxvbmd8YWN0fGFwcGx5fHByb2R1Y2V8Zm9ybXxkZXZlbG9wfGV2b2x2ZXx0cmFuc2Zvcm18dHJpZ2dlcnxiYXNlfGZvbGxvd3xjb21wbHl8c291cmNlfHJldmVhbHxwcm92ZXxleHBsYWlufGludm9sdmV8Y292ZXJ8aW5jbHVkZXxtZWFufHByZWRpY3R8Y29udHJhc3R8Y2Fycnl8dXNlfGJ1aWxkfGNsYXNzaWZ5fGRpc3Rpbmd1aXNofHBhcmFsbGVsfHNvbHZlfGhhbmRsZXxpbnRlZ3JhdGV8b3B0aW1pemV8c2ltcGxpZnkpLztcbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhY3QgdGV4dCBiZWZvcmUgYW5kIGFmdGVyIHRoZSBsaW5rLCBleGNsdWRpbmcgdGhlIGxpbmsgdGV4dCBpdHNlbGZcbiAgICAgICAgY29uc3QgYmVmb3JlTGluayA9IGNvbnRlbnQuc3Vic3RyaW5nKGNvbnRleHRTdGFydCwgbGlua1N0YXJ0KTtcbiAgICAgICAgY29uc3QgYWZ0ZXJMaW5rID0gY29udGVudC5zdWJzdHJpbmcobGlua0VuZCwgY29udGV4dEVuZCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHRXaXRob3V0TGluayA9IGJlZm9yZUxpbmsgKyBhZnRlckxpbms7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBoYXNDb250ZXh0S2V5d29yZCA9IGNvbnRleHRLZXl3b3Jkcy50ZXN0KGNvbnRleHRXaXRob3V0TGluayk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBmb3IgcHJvcGVyIGxpbmsgZm9ybWF0dGluZ1xuICAgICAgICBjb25zdCBpc1Byb3Blcmx5Rm9ybWF0dGVkID0gL1xcW1xcW1teXFxdXStcXHxbXlxcXV0rXFxdXFxdLy50ZXN0KGNvbnRlbnQuc3Vic3RyaW5nKGxpbmtTdGFydC0xMCwgbGlua0VuZCsxMCkpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cXFtbXlxcXV0rXFxdXFwoW14pXStcXCkvLnRlc3QoY29udGVudC5zdWJzdHJpbmcobGlua1N0YXJ0LTEwLCBsaW5rRW5kKzEwKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBPbmx5IGZsYWcgYXMgbmFrZWQgbGluayBpZiBpdCBsYWNrcyBtZWFuaW5nZnVsIGNvbnRleHQgQU5EIGlzIG5vdCBwcm9wZXJseSBmb3JtYXR0ZWRcbiAgICAgICAgaWYgKCFoYXNDb250ZXh0S2V5d29yZCAmJiAhaXNQcm9wZXJseUZvcm1hdHRlZCkge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBgJHt0aGlzLmlkfS0ke2ZpbGUucGF0aH0tJHtsaW5rU3RhcnR9YCxcbiAgICAgICAgICAgIHJ1bGVJZDogdGhpcy5pZCxcbiAgICAgICAgICAgIGZpbGVQYXRoOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgY29udGV4dFByZXZpZXc6IHRoaXMucGx1Z2luLnNldHRpbmdzLmxhbmd1YWdlID09PSAnZW4nID8gY29udGV4dCA6IGNvbnRleHQsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyBzdGFydDogbGlua1N0YXJ0LCBlbmQ6IGxpbmtFbmQgfSxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnbG93JyxcbiAgICAgICAgICAgIGlzSWdub3JlZDogdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5pbmNsdWRlcyhgJHt0aGlzLmlkfS0ke2ZpbGUucGF0aH0tJHtsaW5rU3RhcnR9YClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gaXNzdWVzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHcmFwaENvbm5lY3Rpdml0eVJ1bGUgaW1wbGVtZW50cyBEaWFnbm9zdGljUnVsZSB7XG4gIGlkID0gJ2dyYXBoLWNvbm5lY3Rpdml0eSc7XG4gIG5hbWUgPSAnXHU3N0U1XHU4QkM2XHU1NkZFXHU4QzMxXHU4RkRFXHU2M0E1XHU2MDI3XHU2OEMwXHU2N0U1JztcbiAgZGVzY3JpcHRpb24gPSAnXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU1QjU4XHU1NzI4XHU2NzJBXHU4OEFCXHU4RkRFXHU2M0E1XHU3Njg0XCJcdTRGRTFcdTYwNkZcdTVCNjRcdTVDOUJcIic7XG4gIFxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogS25vd2xlZGdlQXJrUGx1Z2luLCBwcml2YXRlIGFwcDogQXBwKSB7fVxuICBcbiAgYXN5bmMgY2hlY2soKTogUHJvbWlzZTxEaWFnbm9zdGljSXNzdWVbXT4ge1xuICAgIGNvbnN0IGlzc3VlczogRGlhZ25vc3RpY0lzc3VlW10gPSBbXTtcbiAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSBtYXAgb2YgZmlsZSBwYXRocyB0byB0aGVpciBsaW5rIGNvdW50c1xuICAgIGNvbnN0IGxpbmtNYXAgPSBuZXcgTWFwPHN0cmluZywgeyBpbmJvdW5kOiBudW1iZXI7IG91dGJvdW5kOiBudW1iZXIgfT4oKTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgIC8vIFNraXAgZXhjbHVkZWQgZm9sZGVyc1xuICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRm9sZGVycy5zb21lKChmb2xkZXI6IHN0cmluZykgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICBcbiAgICAgIC8vIFNraXAgZXhjbHVkZWQgdGFnc1xuICAgICAgaWYgKGNhY2hlICYmIGNhY2hlLmZyb250bWF0dGVyICYmIGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZmlsZVRhZ3MgPSBBcnJheS5pc0FycmF5KGNhY2hlLmZyb250bWF0dGVyLnRhZ3MpIFxuICAgICAgICAgID8gY2FjaGUuZnJvbnRtYXR0ZXIudGFncyBcbiAgICAgICAgICA6IGNhY2hlLmZyb250bWF0dGVyLnRhZ3Muc3BsaXQoJywnKS5tYXAoKHRhZzogc3RyaW5nKSA9PiB0YWcudHJpbSgpKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFx1NjUyRlx1NjMwMVx1NUUyNiNcdTU0OENcdTRFMERcdTVFMjYjXHU3Njg0XHU2ODA3XHU3QjdFXHU2ODNDXHU1RjBGXHVGRjBDXHU0RTBEXHU1MzNBXHU1MjA2XHU1OTI3XHU1QzBGXHU1MTk5XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFeGNsdWRlZFRhZ3MgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZFRhZ3MubWFwKCh0YWc6IHN0cmluZykgPT4gXG4gICAgICAgICAgdGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBub3JtYWxpemVkRmlsZVRhZ3MgPSBmaWxlVGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiBcbiAgICAgICAgICB0YWcuc3RhcnRzV2l0aCgnIycpID8gdGFnLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpIDogdGFnLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChub3JtYWxpemVkRmlsZVRhZ3Muc29tZSgoZmlsZVRhZzogc3RyaW5nKSA9PiBub3JtYWxpemVkRXhjbHVkZWRUYWdzLmluY2x1ZGVzKGZpbGVUYWcpKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICghbGlua01hcC5oYXMoZmlsZS5wYXRoKSkge1xuICAgICAgICBsaW5rTWFwLnNldChmaWxlLnBhdGgsIHsgaW5ib3VuZDogMCwgb3V0Ym91bmQ6IDAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChjYWNoZSAmJiBjYWNoZS5saW5rcykge1xuICAgICAgICAvLyBDb3VudCBvdXRib3VuZCBsaW5rc1xuICAgICAgICBsaW5rTWFwLmdldChmaWxlLnBhdGgpIS5vdXRib3VuZCArPSBjYWNoZS5saW5rcy5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICAvLyBDb3VudCBpbmJvdW5kIGxpbmtzXG4gICAgICAgIGZvciAoY29uc3QgbGluayBvZiBjYWNoZS5saW5rcykge1xuICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgaW50ZXJuYWwgbGlua3NcbiAgICAgICAgICBpZiAoIWxpbmsubGluay5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtlZEZpbGVQYXRoID0gdGhpcy5yZXNvbHZlTGlua1BhdGgoZmlsZS5wYXRoLCBsaW5rLmxpbmspO1xuICAgICAgICAgICAgaWYgKGxpbmtlZEZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgIGlmICghbGlua01hcC5oYXMobGlua2VkRmlsZVBhdGgpKSB7XG4gICAgICAgICAgICAgICAgbGlua01hcC5zZXQobGlua2VkRmlsZVBhdGgsIHsgaW5ib3VuZDogMCwgb3V0Ym91bmQ6IDAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGlua01hcC5nZXQobGlua2VkRmlsZVBhdGgpIS5pbmJvdW5kICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBpc29sYXRlZCBub2RlcyAoaW5ib3VuZD0wIGFuZCBvdXRib3VuZD0wKSBhbmQgbGVhZiBub2RlcyAob3V0Ym91bmQ9MCBidXQgaW5ib3VuZD4wKVxuICAgIGZvciAoY29uc3QgW2ZpbGVQYXRoLCBsaW5rc10gb2YgbGlua01hcC5lbnRyaWVzKCkpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpIGFzIFRGaWxlO1xuICAgICAgaWYgKCFmaWxlKSBjb250aW51ZTtcbiAgICAgIFxuICAgICAgLy8gU2tpcCBleGNsdWRlZCBmb2xkZXJzXG4gICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoZm9sZGVyID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlcikpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3IgaXNvbGF0ZWQgbm9kZXNcbiAgICAgIGlmIChsaW5rcy5pbmJvdW5kID09PSAwICYmIGxpbmtzLm91dGJvdW5kID09PSAwKSB7XG4gICAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgICBpZDogYCR7dGhpcy5pZH0tJHtmaWxlUGF0aH0taXNvbGF0ZWRgLFxuICAgICAgICAgIHJ1bGVJZDogdGhpcy5pZCxcbiAgICAgICAgICBmaWxlUGF0aDogZmlsZVBhdGgsXG4gICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICBjb250ZXh0UHJldmlldzogdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyAnSXNvbGF0ZWQgbm9kZSAoaW5ib3VuZD0wIGFuZCBvdXRib3VuZD0wKScgOiAnXHU0RkUxXHU2MDZGXHU1QjY0XHU1QzlCXHU4MjgyXHU3MEI5IChcdTUxNjVcdTk0RkU9MCBcdTRFMTQgXHU1MUZBXHU5NEZFPTApJyxcbiAgICAgICAgICBwb3NpdGlvbjogeyBzdGFydDogMCwgZW5kOiAwIH0sXG4gICAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgIGlzSWdub3JlZDogdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5pbmNsdWRlcyhgJHt0aGlzLmlkfS0ke2ZpbGVQYXRofS1pc29sYXRlZGApXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3IgbGVhZiBub2Rlc1xuICAgICAgaWYgKGxpbmtzLm91dGJvdW5kID09PSAwICYmIGxpbmtzLmluYm91bmQgPiAwKSB7XG4gICAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgICBpZDogYCR7dGhpcy5pZH0tJHtmaWxlUGF0aH0tbGVhZmAsXG4gICAgICAgICAgcnVsZUlkOiB0aGlzLmlkLFxuICAgICAgICAgIGZpbGVQYXRoOiBmaWxlUGF0aCxcbiAgICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgIGNvbnRleHRQcmV2aWV3OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/ICdMZWFmIG5vZGUgKG91dGJvdW5kPTAgYnV0IGluYm91bmQ+MCknIDogJ1x1N0VDOFx1NzBCOVx1ODI4Mlx1NzBCOSAoXHU1MUZBXHU5NEZFPTAgXHU0RjQ2IFx1NTE2NVx1OTRGRT4wKScsXG4gICAgICAgICAgcG9zaXRpb246IHsgc3RhcnQ6IDAsIGVuZDogMCB9LFxuICAgICAgICAgIHNldmVyaXR5OiAnbG93JyxcbiAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtmaWxlUGF0aH0tbGVhZmApXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gaXNzdWVzO1xuICB9XG4gIFxuICBwcml2YXRlIHJlc29sdmVMaW5rUGF0aChjdXJyZW50RmlsZVBhdGg6IHN0cmluZywgbGluazogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgLy8gVGhpcyBpcyBhIHNpbXBsaWZpZWQgaW1wbGVtZW50YXRpb25cbiAgICAvLyBBIHJlYWwgaW1wbGVtZW50YXRpb24gd291bGQgbmVlZCB0byBoYW5kbGUgcmVsYXRpdmUgcGF0aHMsIGV0Yy5cbiAgICBjb25zdCBkaXIgPSBjdXJyZW50RmlsZVBhdGguc3Vic3RyaW5nKDAsIGN1cnJlbnRGaWxlUGF0aC5sYXN0SW5kZXhPZignLycpKTtcbiAgICByZXR1cm4gYCR7ZGlyfS8ke2xpbmt9Lm1kYDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJlZGljYXRlQ29uc2lzdGVuY3lSdWxlIGltcGxlbWVudHMgRGlhZ25vc3RpY1J1bGUge1xuICBpZCA9ICdwcmVkaWNhdGUtY29uc2lzdGVuY3knO1xuICBuYW1lID0gJ1x1NTE3M1x1N0NGQlx1OEMxM1x1OEJFRFx1NEUwMFx1ODFGNFx1NjAyN1x1NjhDMFx1NjdFNSc7XG4gIGRlc2NyaXB0aW9uID0gJ1x1OUYxM1x1NTJCMWBrZXk6OiBbW0xpbmtdXWBcdTc2ODRcdTg5QzRcdTgzMDNcdTRGN0ZcdTc1MjgnO1xuICBcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IEtub3dsZWRnZUFya1BsdWdpbiwgcHJpdmF0ZSBhcHA6IEFwcCkge31cbiAgXG4gIGFzeW5jIGNoZWNrKCk6IFByb21pc2U8RGlhZ25vc3RpY0lzc3VlW10+IHtcbiAgICBjb25zdCBpc3N1ZXM6IERpYWdub3N0aWNJc3N1ZVtdID0gW107XG4gICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgXG4gICAgLy8gTWFwIHRvIHN0b3JlIHByZWRpY2F0ZSB1c2FnZSBjb3VudHMgYW5kIHRoZWlyIGxvY2F0aW9uc1xuICAgIGNvbnN0IHByZWRpY2F0ZU1hcCA9IG5ldyBNYXA8c3RyaW5nLCB7IGNvdW50OiBudW1iZXI7IGxvY2F0aW9uczogeyBmaWxlUGF0aDogc3RyaW5nOyBmaWxlTmFtZTogc3RyaW5nOyBwb3NpdGlvbjogeyBzdGFydDogbnVtYmVyOyBlbmQ6IG51bWJlciB9OyBjb250ZXh0UHJldmlldzogc3RyaW5nIH1bXSB9PigpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgLy8gU2tpcCBleGNsdWRlZCBmb2xkZXJzXG4gICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGb2xkZXJzLnNvbWUoZm9sZGVyID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlcikpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgXG4gICAgICAvLyBTa2lwIGV4Y2x1ZGVkIHRhZ3NcbiAgICAgIGlmIChjYWNoZSAmJiBjYWNoZS5mcm9udG1hdHRlciAmJiBjYWNoZS5mcm9udG1hdHRlci50YWdzICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkVGFncy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGZpbGVUYWdzID0gQXJyYXkuaXNBcnJheShjYWNoZS5mcm9udG1hdHRlci50YWdzKSBcbiAgICAgICAgICA/IGNhY2hlLmZyb250bWF0dGVyLnRhZ3MgXG4gICAgICAgICAgOiBjYWNoZS5mcm9udG1hdHRlci50YWdzLnNwbGl0KCcsJykubWFwKCh0YWc6IHN0cmluZykgPT4gdGFnLnRyaW0oKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBcdTY1MkZcdTYzMDFcdTVFMjYjXHU1NDhDXHU0RTBEXHU1RTI2I1x1NzY4NFx1NjgwN1x1N0I3RVx1NjgzQ1x1NUYwRlx1RkYwQ1x1NEUwRFx1NTMzQVx1NTIwNlx1NTkyN1x1NUMwRlx1NTE5OVxuICAgICAgICBjb25zdCBub3JtYWxpemVkRXhjbHVkZWRUYWdzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRUYWdzLm1hcCgodGFnOiBzdHJpbmcpID0+IFxuICAgICAgICAgIHRhZy5zdGFydHNXaXRoKCcjJykgPyB0YWcuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkgOiB0YWcudG9Mb3dlckNhc2UoKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEZpbGVUYWdzID0gZmlsZVRhZ3MubWFwKCh0YWc6IHN0cmluZykgPT4gXG4gICAgICAgICAgdGFnLnN0YXJ0c1dpdGgoJyMnKSA/IHRhZy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSA6IHRhZy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAobm9ybWFsaXplZEZpbGVUYWdzLnNvbWUoKGZpbGVUYWc6IHN0cmluZykgPT4gbm9ybWFsaXplZEV4Y2x1ZGVkVGFncy5pbmNsdWRlcyhmaWxlVGFnKSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICAgIFxuICAgICAgLy8gRmluZCBhbGwgcHJlZGljYXRlIHBhdHRlcm5zIChrZXk6OiB2YWx1ZSlcbiAgICAgIC8vIFx1NjUyRlx1NjMwMVx1NEUyRFx1ODJGMVx1NjU4N1x1MzAwMVx1NjU3MFx1NUI1N1x1MzAwMVx1NEUwQlx1NTIxMlx1N0VCRlx1NTQ4Q1x1OEZERVx1NUI1N1x1N0IyNlx1NzY4NFx1OEMxM1x1OEJFRFxuICAgICAgY29uc3QgcHJlZGljYXRlUmVnZXggPSAvKFtcXHU0ZTAwLVxcdTlmYTVcXHctXSspOjovZztcbiAgICAgIGxldCBtYXRjaDtcbiAgICAgIFxuICAgICAgd2hpbGUgKChtYXRjaCA9IHByZWRpY2F0ZVJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHByZWRpY2F0ZSA9IG1hdGNoWzFdO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHsgc3RhcnQ6IG1hdGNoLmluZGV4LCBlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIH07XG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgY29udGV4dCBwcmV2aWV3ICg1MCBjaGFyYWN0ZXJzIGJlZm9yZSBhbmQgYWZ0ZXIpXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoMCwgcG9zaXRpb24uc3RhcnQgLSA1MCk7XG4gICAgICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKGNvbnRlbnQubGVuZ3RoLCBwb3NpdGlvbi5lbmQgKyA1MCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHRQcmV2aWV3ID0gY29udGVudC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXByZWRpY2F0ZU1hcC5oYXMocHJlZGljYXRlKSkge1xuICAgICAgICAgIHByZWRpY2F0ZU1hcC5zZXQocHJlZGljYXRlLCB7IGNvdW50OiAwLCBsb2NhdGlvbnM6IFtdIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcmVkaWNhdGVJbmZvID0gcHJlZGljYXRlTWFwLmdldChwcmVkaWNhdGUpITtcbiAgICAgICAgcHJlZGljYXRlSW5mby5jb3VudCsrO1xuICAgICAgICBwcmVkaWNhdGVJbmZvLmxvY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgICBmaWxlUGF0aDogZmlsZS5wYXRoLFxuICAgICAgICAgIGZpbGVOYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgY29udGV4dFByZXZpZXdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEZpbmQgcHJlZGljYXRlcyB3aXRoIGxvdyB1c2FnZSBvciBwb3RlbnRpYWwgdHlwb3NcbiAgICBmb3IgKGNvbnN0IFtwcmVkaWNhdGUsIGluZm9dIG9mIHByZWRpY2F0ZU1hcC5lbnRyaWVzKCkpIHtcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWRpY2F0ZVVzYWdlVGhyZXNob2xkIHx8IDE7XG4gICAgICBpZiAoaW5mby5jb3VudCA8IHRocmVzaG9sZCkgeyAvLyBcdTRGN0ZcdTc1MjhcdTUzRUZcdTkxNERcdTdGNkVcdTc2ODRcdTk2MDhcdTUwM0NcbiAgICAgICAgLy8gQ3JlYXRlIGFuIGlzc3VlIGZvciBlYWNoIGxvY2F0aW9uIG9mIHRoZSBsb3ctdXNhZ2UgcHJlZGljYXRlXG4gICAgICAgIGZvciAoY29uc3QgbG9jYXRpb24gb2YgaW5mby5sb2NhdGlvbnMpIHtcbiAgICAgICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgICAgICBpZDogYCR7dGhpcy5pZH0tJHtwcmVkaWNhdGV9LSR7bG9jYXRpb24uZmlsZVBhdGh9LSR7bG9jYXRpb24ucG9zaXRpb24uc3RhcnR9YCxcbiAgICAgICAgICAgIHJ1bGVJZDogdGhpcy5pZCxcbiAgICAgICAgICAgIGZpbGVQYXRoOiBsb2NhdGlvbi5maWxlUGF0aCxcbiAgICAgICAgICAgIGZpbGVOYW1lOiBsb2NhdGlvbi5maWxlTmFtZSxcbiAgICAgICAgICAgIGNvbnRleHRQcmV2aWV3OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZSA9PT0gJ2VuJyA/IGBQcmVkaWNhdGUgXCIke3ByZWRpY2F0ZX1cIiBoYXMgbG93IHVzYWdlICgke2luZm8uY291bnR9IHRpbWVzKTogJHtsb2NhdGlvbi5jb250ZXh0UHJldmlld31gIDogYFx1OEMxM1x1OEJFRCBcIiR7cHJlZGljYXRlfVwiIFx1NEY3Rlx1NzUyOFx1OTg5MVx1NzM4N1x1OEZDN1x1NEY0RSAoJHtpbmZvLmNvdW50fSBcdTZCMjEpOiAke2xvY2F0aW9uLmNvbnRleHRQcmV2aWV3fWAsXG4gICAgICAgICAgICBwb3NpdGlvbjogbG9jYXRpb24ucG9zaXRpb24sXG4gICAgICAgICAgICBzZXZlcml0eTogJ2xvdycsXG4gICAgICAgICAgICBpc0lnbm9yZWQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZWRJc3N1ZXMuaW5jbHVkZXMoYCR7dGhpcy5pZH0tJHtwcmVkaWNhdGV9LSR7bG9jYXRpb24uZmlsZVBhdGh9LSR7bG9jYXRpb24ucG9zaXRpb24uc3RhcnR9YClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaW1wbGUgdHlwbyBkZXRlY3Rpb24gKHRoaXMgaXMgYSB2ZXJ5IGJhc2ljIGltcGxlbWVudGF0aW9uKVxuICAgICAgLy8gXHU0RjdGXHU3NTI4U2V0XHU2NzY1XHU5MDdGXHU1MTREXHU5MUNEXHU1OTBEXHU2OEMwXHU2N0U1XHU1NDhDXHU2M0QwXHU3OTNBXG4gICAgICBjb25zdCBjaGVja2VkUGFpcnMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBbb3RoZXJQcmVkaWNhdGUsIG90aGVySW5mb10gb2YgcHJlZGljYXRlTWFwLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAocHJlZGljYXRlICE9PSBvdGhlclByZWRpY2F0ZSAmJiB0aGlzLmlzU2ltaWxhcihwcmVkaWNhdGUsIG90aGVyUHJlZGljYXRlKSkge1xuICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NjM5Mlx1NUU4Rlx1NTQwRVx1NzY4NFx1OEMxM1x1OEJFRFx1NUJGOVx1RkYwQ1x1Nzg2RVx1NEZERFx1NkJDRlx1NUJGOVx1NTNFQVx1NjhDMFx1NjdFNVx1NEUwMFx1NkIyMVxuICAgICAgICAgIGNvbnN0IHBhaXJLZXkgPSBbcHJlZGljYXRlLCBvdGhlclByZWRpY2F0ZV0uc29ydCgpLmpvaW4oJ3wnKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoIWNoZWNrZWRQYWlycy5oYXMocGFpcktleSkpIHtcbiAgICAgICAgICAgIGNoZWNrZWRQYWlycy5hZGQocGFpcktleSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvciBzaW1pbGFyIHByZWRpY2F0ZXMsIHdlJ2xsIGNyZWF0ZSBhbiBpc3N1ZSBvbmx5IG9uY2Ugd2l0aCB0aGUgZmlyc3QgbG9jYXRpb25cbiAgICAgICAgICAgIGlmIChpbmZvLmxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpcnN0TG9jYXRpb24gPSBpbmZvLmxvY2F0aW9uc1swXTtcbiAgICAgICAgICAgICAgaXNzdWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBgJHt0aGlzLmlkfS0ke3ByZWRpY2F0ZX0tJHtvdGhlclByZWRpY2F0ZX1gLFxuICAgICAgICAgICAgICAgIHJ1bGVJZDogdGhpcy5pZCxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogZmlyc3RMb2NhdGlvbi5maWxlUGF0aCxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlyc3RMb2NhdGlvbi5maWxlTmFtZSxcbiAgICAgICAgICAgICAgICBjb250ZXh0UHJldmlldzogdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPT09ICdlbicgPyBgUHJlZGljYXRlIFwiJHtwcmVkaWNhdGV9XCIgYW5kIFwiJHtvdGhlclByZWRpY2F0ZX1cIiBtYXkgaGF2ZSBzcGVsbGluZyBzaW1pbGFyaXR5YCA6IGBcdThDMTNcdThCRUQgXCIke3ByZWRpY2F0ZX1cIiBcdTRFMEUgXCIke290aGVyUHJlZGljYXRlfVwiIFx1NTNFRlx1ODBGRFx1NUI1OFx1NTcyOFx1NjJGQ1x1NTE5OVx1NzZGOFx1NEYzQ1x1NjAyN2AsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGZpcnN0TG9jYXRpb24ucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgc2V2ZXJpdHk6ICdsb3cnLFxuICAgICAgICAgICAgICAgIGlzSWdub3JlZDogdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWdub3JlZElzc3Vlcy5pbmNsdWRlcyhgJHt0aGlzLmlkfS0ke3ByZWRpY2F0ZX0tJHtvdGhlclByZWRpY2F0ZX1gKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGlzc3VlcztcbiAgfVxuICBcbiAgcHJpdmF0ZSBpc1NpbWlsYXIoc3RyMTogc3RyaW5nLCBzdHIyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAvLyBcdTRGN0ZcdTc1MjhMZXZlbnNodGVpblx1OERERFx1NzlCQlx1N0I5N1x1NkNENVx1OEJBMVx1N0I5N1x1NUI1N1x1N0IyNlx1NEUzMlx1NzZGOFx1NEYzQ1x1NUVBNlxuICAgIC8vIFx1NjUyRlx1NjMwMVx1NEUyRFx1ODJGMVx1NjU4N1x1NUI1N1x1N0IyNlxuICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5sZXZlbnNodGVpbkRpc3RhbmNlKHN0cjEsIHN0cjIpO1xuICAgIFxuICAgIC8vIFx1OEJBMVx1N0I5N1x1NzZGOFx1NEYzQ1x1NUVBNlx1NzY3RVx1NTIwNlx1NkJENFxuICAgIGNvbnN0IG1heExlbmd0aCA9IE1hdGgubWF4KHN0cjEubGVuZ3RoLCBzdHIyLmxlbmd0aCk7XG4gICAgaWYgKG1heExlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgXG4gICAgY29uc3Qgc2ltaWxhcml0eSA9IDEgLSAoZGlzdGFuY2UgLyBtYXhMZW5ndGgpO1xuICAgIFxuICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NzZGOFx1NEYzQ1x1NUVBNlx1NTkyN1x1NEU4RTcwJVx1RkYwQ1x1NTIxOVx1OEJBNFx1NEUzQVx1NjYyRlx1NzZGOFx1NEYzQ1x1NzY4NFx1OEMxM1x1OEJFRFxuICAgIHJldHVybiBzaW1pbGFyaXR5ID49IDAuNztcbiAgfVxuICBcbiAgLyoqXG4gICAqIFx1OEJBMVx1N0I5N1x1NEUyNFx1NEUyQVx1NUI1N1x1N0IyNlx1NEUzMlx1NEU0Qlx1OTVGNFx1NzY4NExldmVuc2h0ZWluXHU4REREXHU3OUJCXG4gICAqIFx1NjUyRlx1NjMwMVx1NEUyRFx1ODJGMVx1NjU4N1x1NUI1N1x1N0IyNlxuICAgKiBAcGFyYW0gc3RyMSBcdTdCMkNcdTRFMDBcdTRFMkFcdTVCNTdcdTdCMjZcdTRFMzJcbiAgICogQHBhcmFtIHN0cjIgXHU3QjJDXHU0RThDXHU0RTJBXHU1QjU3XHU3QjI2XHU0RTMyXG4gICAqIEByZXR1cm5zIFx1NEUyNFx1NEUyQVx1NUI1N1x1N0IyNlx1NEUzMlx1NEU0Qlx1OTVGNFx1NzY4NFx1N0YxNlx1OEY5MVx1OERERFx1NzlCQlxuICAgKi9cbiAgcHJpdmF0ZSBsZXZlbnNodGVpbkRpc3RhbmNlKHN0cjE6IHN0cmluZywgc3RyMjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBtID0gc3RyMS5sZW5ndGg7XG4gICAgY29uc3QgbiA9IHN0cjIubGVuZ3RoO1xuICAgIFxuICAgIC8vIFx1NTIxQlx1NUVGQVx1NEU4Q1x1N0VGNFx1NjU3MFx1N0VDNFx1NUI1OFx1NTBBOFx1OERERFx1NzlCQlxuICAgIGNvbnN0IGRwOiBudW1iZXJbXVtdID0gQXJyYXkobSArIDEpLmZpbGwobnVsbCkubWFwKCgpID0+IEFycmF5KG4gKyAxKS5maWxsKDApKTtcbiAgICBcbiAgICAvLyBcdTUyMURcdTU5Q0JcdTUzMTZcdThGQjlcdTc1NENcdTY3NjFcdTRFRjZcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBtOyBpKyspIHtcbiAgICAgIGRwW2ldWzBdID0gaTtcbiAgICB9XG4gICAgXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPD0gbjsgaisrKSB7XG4gICAgICBkcFswXVtqXSA9IGo7XG4gICAgfVxuICAgIFxuICAgIC8vIFx1NTJBOFx1NjAwMVx1ODlDNFx1NTIxMlx1OEJBMVx1N0I5N1x1N0YxNlx1OEY5MVx1OERERFx1NzlCQlxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG07IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPD0gbjsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNvc3QgPSBzdHIxW2kgLSAxXSA9PT0gc3RyMltqIC0gMV0gPyAwIDogMTtcbiAgICAgICAgZHBbaV1bal0gPSBNYXRoLm1pbihcbiAgICAgICAgICBkcFtpIC0gMV1bal0gKyAxLCAgICAgICAgICAvLyBcdTUyMjBcdTk2NjRcbiAgICAgICAgICBkcFtpXVtqIC0gMV0gKyAxLCAgICAgICAgICAvLyBcdTYzRDJcdTUxNjVcbiAgICAgICAgICBkcFtpIC0gMV1baiAtIDFdICsgY29zdCAgICAvLyBcdTY2RkZcdTYzNjJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGRwW21dW25dO1xuICB9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQW1HOzs7QUNBbkcsc0JBQStDO0FBSXhDLElBQU0seUJBQU4sY0FBcUMsaUNBQWlCO0FBQUEsRUFHNUQsWUFBWSxLQUFVLFFBQTRCO0FBQ2pELFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2Y7QUFBQSxFQUVBLFVBQWdCO0FBQ2YsVUFBTSxFQUFDLFlBQVcsSUFBSTtBQUV0QixnQkFBWSxNQUFNO0FBR2xCLFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLHlCQUFlLEVBQ3ZCLFlBQVksY0FBWSxTQUN2QixVQUFVLE1BQU0sY0FBSSxFQUNwQixVQUFVLE1BQU0sU0FBUyxFQUN6QixTQUFTLEtBQUssT0FBTyxTQUFTLFlBQVksSUFBSSxFQUM5QyxTQUFTLE9BQU8sVUFBVTtBQUMx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RCxVQUFLO0FBQUEsTUFBSyxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFDaEQsVUFBSztBQUFBLE1BQU0sVUFBSztBQUFBLE1BQU0sVUFBSztBQUFBLE1BQU0sVUFBSztBQUFBLE1BQ3RDLFVBQUs7QUFBQSxNQUFNLFVBQUs7QUFBQSxNQUFNLFVBQUs7QUFBQSxNQUFNLFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUNsRCxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFDdEMsVUFBSztBQUFBLE1BQU0sVUFBSztBQUFBLE1BQU8sVUFBSztBQUFBLE1BQU8sVUFBSztBQUFBLE1BQU8sVUFBSztBQUFBLE1BQ3BELFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUNqRSxVQUFLO0FBQUEsTUFBTyxVQUFLO0FBQUEsTUFBTSxVQUFLO0FBQUEsTUFBTyxVQUFLO0FBQUEsTUFBUSxVQUFLO0FBQUEsTUFBUSxVQUFLO0FBQUEsTUFDbEUsVUFBSztBQUFBLE1BQU8sVUFBSztBQUFBLE1BQU8sVUFBSztBQUFBLE1BQVEsVUFBSztBQUFBLE1BQzFDLFVBQUs7QUFBQSxNQUFPLFVBQUs7QUFBQSxNQUFRLFVBQUs7QUFBQSxNQUFRLFVBQUs7QUFBQSxNQUMzQyxVQUFLO0FBQUEsTUFBUSxVQUFLO0FBQUEsTUFBUSxVQUFLO0FBQUEsTUFBUyxVQUFLO0FBQUEsTUFDN0MsVUFBSztBQUFBLE1BQVEsVUFBSztBQUFBLE1BQVEsVUFBSztBQUFBLE1BQVEsVUFBSztBQUFBLE1BQVEsVUFBSztBQUFBLE1BQ3pELFVBQUs7QUFBQSxNQUFRLFVBQUs7QUFBQSxNQUFRLFVBQUs7QUFBQSxNQUFRLFVBQUs7QUFBQSxNQUFTLFVBQUs7QUFBQSxJQUMzRDtBQUdBLFFBQUksU0FBUztBQUNiLGVBQVcsUUFBUSxN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
